library(readxl)
library(fBasics)#Analisis estadistico
library(aTSA)#Raiz Unitaria
library(tseries)#Raiz Unitaria
library(naniar)#remueve Nas
library(tidyverse)#Ya incluye read excel
library(PerformanceAnalytics)
library(textshape)
library(QuantPsyc)#Pruba multivariada de normlaidad
library(statmod)
library(ghyp)#multivariado NIG
library(cramer)#Pruba cramer NIG multivariada
library(tidyr)
library(dplyr)
g1<- read_excel("Documents/GitHub/Market-Index-Portafolios/A-1 Index Group 1/A -1.2 Index Group/Correlaciones A - 1.2/Charting Excel Export - Jan 21st 2022 11_27_13 pm.xls",
col_types = c("date", "numeric", "numeric",
"numeric", "numeric", "numeric"))
library(readxl)
Charting_Excel_Export_Jan_21st_2022_11_27_13_pm <- read_excel("~/Documents/GitHub/Market-Index-Portafolios/A-1 Index Group 1/A -1.2 Index Group/Correlaciones A - 1.2/Charting Excel Export - Jan 21st 2022 11_27_13 pm.xls",
col_types = c("date", "numeric", "numeric",
"numeric", "numeric", "numeric"))
View(Charting_Excel_Export_Jan_21st_2022_11_27_13_pm)
g1<- Charting_Excel_Export_Jan_21st_2022_11_27_13_pm
colnames(g1)<-c("Fecha","OMX 20","STI","FTSE 100","HSI","DJI")
g1<-textshape::column_to_rownames(g1,loc=1)
g1<-drop_na(g1)
View(g1)
retornos<-Return.calculate(g1,method = "log")
retornos<- retornos[-1,]
ggplot(retornos, aes(retornos$OMX.20))+
geom_density()+
geom_vline(xintercept = 0)
View(g1)
Estg1<-basicStats(retornos)
View(retornos)
View(Estg1)
adf.test(retornos$STI)
ks.test(retornos$STI,basenormal)
#Construccion de normal con parametros multivariados de la series
m<-mean(retornos$OMX.20)
sd<-sd(retornos$OMX.20)
len<-length(retornos$OMX.20)
basenormal<-rnorm(len,m,sd)#normal con los parametros de nuestras series
#Prubas de Kormogorov contra distribucion normal, creada con paramaetros de nuestra serie
ks.test(retornos$OMX.20,basenormal)
plot(density(retornos$OMX.20),col="blue",ylim=c(0,60), main="Distribuciones contra normal")+
lines(density(retornos$STI),
col="green")+
lines(density(retornos$FTSE.100),
col="orange")+
lines(density(retornos$HSI),
col="black")+
lines(density(retornos$DJI),
col="grey")+
lines(density(basenormal),
col="red")
#Parametros de la NIG
NIG<-nigFit(retornos$STI)
#Agrupar parametros en un objeto
a<-NIG@fit[["par"]]
a<-data.frame(t(a))
plot(density(r),
col="red",
main="NIG Univariada",
sub="STI index")
#NIG aleatoria con parametors univariados de nuestra serie
r = rnig(len,
alpha = a$alpha ,
beta = a$beta,
delta = a$delta ,
mu= a$mu)
plot(density(r),
col="red",
main="NIG Univariada",
sub="STI index")
#Pruba de Kormogorov univariada para NIG
ks.test(retornos$STI,r)
#Parametros para NIG Multivariada
multNIG<-fit.NIGmv(data=retornos,silent=FALSE)
#Localizar parametros dentor de un obejto
Mom1NIGm<-multNIG@expected.value
Mom2NIGm<-multNIG@variance
#Construccion de la funcion NIG con nuestros  parametros de la funcion multivariada
Mnig <- rghyp(len,multNIG)
retornos1<-as.matrix(retornos)
View(retornos1)
#Prueba cramer de comprobacion
#Se buscan similitudes estadisticas
cramer.test(Mnig,retornos1,conf.level = .95)
#Graficas de NIG Multivariada
plot(density(Mnig),
col="red",ylim=c(0,60),main="Distribuciones contra NIG multivariada")+
lines(density(retornos$OMX.20),
col="green")+
lines(density(retornos$FTSE.100),
col="purple")+
lines(density(retornos$HSI),
col="black")+
lines(density(retornos$DJI),
col="dark blue")+
lines(density(retornos$STI),
col="pink")
