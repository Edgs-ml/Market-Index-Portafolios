library(readxl)
library(timeDate) # Requerido para cargar la libreria de fBasics
library(timeSeries) # Requerido para cargar la libreria de fBasics
library(fBasics) # Analisis estadistico
library(aTSA)# Raiz Unitaria
library(zoo) # Requerido para cargar la libreria de tseries
library(tseries) # Raiz Unitaria
library(naniar) # remueve Nas
library(tidyverse) # Ya incluye read excel
library(xts)
library(PerformanceAnalytics)
library(textshape)
library(boot) # Requuerida para cargar la libreria QuantPsyc
library(MASS) # Requuerida para cargar la libreria QuantPsyc
library(QuantPsyc) # Pruba multivariada de normlaidad
library(statmod)
library(numDeriv) # Requuerida para cargar la libreria ghyp
library(ghyp) # multivariado NIG
library(cramer) # Pruba cramer NIG multivariada
library(textshape)
#Ordenar la base----------------------------------------------------------------
g1<- read.csv("1.2.3.g1 5 menos correlacionados.csv")
library(readr)
X1_2_3_Retornos_5_menos_correlacionados <- read_csv("~/Documents/GitHub/Market-Index-Portafolios/APLHA/ALPHA 1/ALPHA 1.2/1.2.3. Normality Test/1.2.3.Retornos 5 menos correlacionados.csv",
col_types = cols(...1 = col_date(format = "%d/%m/%Y")))
View(X1_2_3_Retornos_5_menos_correlacionados)
colnames(g1)<-c("Fecha","SPX","OMXC","FTSE","KOSPI","MSCI")
g1<-column_to_rownames(g1,loc=1)
g1 <- X1_2_3_Retornos_5_menos_correlacionados
colnames(g1)<-c("Fecha","SPX","OMXC","FTSE","KOSPI","MSCI")
g1<-column_to_rownames(g1,loc=1)
g1<-drop_na(g1)
g1 <- as.xts(g1)
View(g1)
#Pruebas de estacionaridad------------------------------------------------------
Estg1<-basicStats(g1)
Estg1
#Construccion de normal con parametros multivariados de la series
m<-mean(g1$SPX)
sd<-sd(g1$SPX)
len<-length(g1$SPX)
basenormal<-rnorm(len,m,sd)#normal con los parametros de nuestras series
#Kormogorov---------------------------------------------------------------------
#Prubas de Kormogorov contra distribucion normal,
#creada con paramaetros de nuestra serie
ks.test(g1$SPX,basenormal)
#Graficas de normalidad---------------------------------------------------------
plot(density(g1$SPX),col="blue",ylim=c(0,60), main="Distribuciones contra normal")+
lines(density(g1$OMXC),
col="green")+
lines(density(g1$FTSE),
col="orange")+
lines(density(g1$KOSPI),
col="black")+
lines(density(g1$MSCI),
col="grey")+
lines(density(basenormal),
col="red")
#Agrupar parametros en un objeto
a<-NIG@fit[["par"]]
a<-data.frame(t(a))
# Normal
mu <- 0
sd <- 1
grid <- seq(-.20, .20, by = .01) #de que tamño son los pasos, usar seq. by= tiene que ser muy poco
grid
dnorm(grid, mu, sd)
dn <- dnorm(grid, mu, sd)
plot(dnorm)
plot(dn)
# Normal
mu <- 0
sd <- 0.5
grid <- seq(-.20, .20, by = .01) #de que tamño son los pasos, usar seq. by= tiene que ser muy poco
dn <- dnorm(grid, mu, sd)
plot(dn)
# Normal
mu <- 0
sd <- 0.005
grid <- seq(-.20, .20, by = .01) #de que tamño son los pasos, usar seq. by= tiene que ser muy poco
dn <- dnorm(grid, mu, sd)
plot(dn)
# Normal
mu <- 0
sd <- 0.05
grid <- seq(-.20, .20, by = .01) #de que tamño son los pasos, usar seq. by= tiene que ser muy poco
dn <- dnorm(grid, mu, sd)
plot(dn)
plot(x = grid, y = dn)
plot(x = grid, y = dn, type = "l")
#NIG aleatoria con parametors univariados de nuestra serie
r = rnig(len,
alpha = a$alpha ,
beta = a$beta,
delta = a$delta ,
mu= a$mu)
#Parametros de la NIG univariada------------------------------------------------
NIG<-nigFit(g1$OMXC)
#Graficas de normalidad---------------------------------------------------------
muN <- 0
sdN <- 0.05
gridN <- seq(-.20, .20, by = .01) #de que tamño son los pasos, usar seq. by= tiene que ser muy poco
dn <- dnorm(grid, mu, sd)
dn <- dnorm(gridN, muN, sdN)
plot(x = grid, y = dn,
type = "l")
plot(density(g1$SPX),col="blue",ylim=c(0,60), main="Distribuciones contra normal")+
lines(density(g1$OMXC),
col="green")+
lines(density(g1$FTSE),
col="orange")+
lines(density(g1$KOSPI),
col="black")+
lines(density(g1$MSCI),
col="grey")+
lines(density(basenormal),
col="red")
#Parametros de la NIG univariada------------------------------------------------
NIG<-nigFit(g1$OMXC)
#Agrupar parametros en un objeto
a<-NIG@fit[["par"]]
a<-data.frame(t(a))
#NIG aleatoria con parametors univariados de nuestra serie
r = dnig(grid,
alpha = a$alpha ,
beta = a$beta,
delta = a$delta ,
mu= a$mu)
plot(x = grid, y = dn,
type = "l")
lines(x=grid, y=r, col="red")
plot(x = grid, y = r,
type = "l")
lines(x=grid, y=dn, col="red")
#Graficas de normalidad---------------------------------------------------------
muN <- 0
sdN <- 0.05
gridN <- seq(-.20, .20, by = .001) #de que tamño son los pasos, usar seq. by= tiene que ser muy poco
dn <- dnorm(gridN, muN, sdN)
plot(x = grid, y = r,
type = "l")
lines(x=grid, y=dn, col="red")
#Graficas de normalidad---------------------------------------------------------
muN <- 0
sdN <- 0.05
grid <- seq(-.20, .20, by = .001) #de que tamño son los pasos, usar seq. by= tiene que ser muy poco
dn <- dnorm(gridN, muN, sdN)
plot(x = grid, y = r,
type = "l")
#Graficas de normalidad---------------------------------------------------------
muN <- 0
sdN <- 0.05
grid <- seq(-.20, .20, by = .001) #de que tamño son los pasos, usar seq. by= tiene que ser muy poco
dn <- dnorm(grid, muN, sdN)
plot(x = grid, y = r,
type = "l")
#NIG aleatoria con parametors univariados de nuestra serie
r = dnig(grid,
alpha = a$alpha ,
beta = a$beta,
delta = a$delta ,
mu= a$mu)
plot(x = grid, y = r,
type = "l")
lines(x=grid, y=dn, col="red")
#Graficas de normalidad---------------------------------------------------------
muN <- mean(g1$OMXC)
sdN <- sd(g1$OMXC)
grid <- seq(-.20, .20, by = .001) #de que tamño son los pasos, usar seq. by= tiene que ser muy poco
dn <- dnorm(grid, muN, sdN)
#NIG aleatoria con parametors univariados de nuestra serie
r = dnig(grid,
alpha = a$alpha ,
beta = a$beta,
delta = a$delta ,
mu= a$mu)
plot(x = grid, y = r,
type = "l")
lines(x=grid, y=dn, col="red")
lines(density(g1$OMXC), col = "g")
lines(density(g1$OMXC), col = "green")
