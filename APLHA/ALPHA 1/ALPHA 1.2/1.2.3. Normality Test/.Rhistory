#Librerias----------------------------------------------------------------------
library(readxl)
library(fBasics) # Analisis estadistico
#Librerias----------------------------------------------------------------------
library(readxl)
library(timeDate) # Requerido para cargar la libreria de fBasics
library(timeSeries) # Requerido para cargar la libreria de fBasics
library(fBasics) # Analisis estadistico
library(aTSA)# Raiz Unitaria
library(zoo) # Requerido para cargar la libreria de tseries
library(tseries) # Raiz Unitaria
library(naniar) # remueve Nas
library(tidyverse) # Ya incluye read excel
library(PerformanceAnalytics)
library(xts)
library(PerformanceAnalytics)
library(textshape)
library(boot) # Requuerida para cargar la libreria QuantPsyc
library(MASS) # Requuerida para cargar la libreria QuantPsyc
library(QuantPsyc) # Pruba multivariada de normlaidad
library(statmod)
library(numDeriv) # Requuerida para cargar la libreria ghyp
library(ghyp) # multivariado NIG
library(cramer) # Pruba cramer NIG multivariada
library(textshape)
library(readr)
X1_2_3_Retornos_5_menos_correlacionados <- read_csv("1.2.3.Retornos 5 menos correlacionados.csv",
col_types = cols(...1 = col_date(format = "%d/%m/%Y")))
View(X1_2_3_Retornos_5_menos_correlacionados)
g1 <- X1_2_3_Retornos_5_menos_correlacionados
colnames(g1)<-c("Fecha","SPX","OMXC","FTSE","KOSPI","MSCI")
View(g1)
g1<-column_to_rownames(g1,loc=1)
g1<-drop_na(g1)
glimpse(g1)
str(g1)
plot(g1$SPX)
ggplot(g1, aes())
g1 <- as.xts(g1)
plot(g1$SPX)
View(g1)
vis_miss(g1)
#Pruebas de estacionaridad------------------------------------------------------
Estg1<-basicStats(g1)
View(Estg1)
adf.test(g1$SPX)
adf.test(g1$SPX)
library(readxl)
library(timeDate) # Requerido para cargar la libreria de fBasics
library(timeSeries) # Requerido para cargar la libreria de fBasics
library(fBasics) # Analisis estadistico
library(aTSA)# Raiz Unitaria
library(zoo) # Requerido para cargar la libreria de tseries
library(tseries) # Raiz Unitaria
library(naniar) # remueve Nas
library(tidyverse) # Ya incluye read excel
library(xts)
library(PerformanceAnalytics)
library(textshape)
library(boot) # Requuerida para cargar la libreria QuantPsyc
library(MASS) # Requuerida para cargar la libreria QuantPsyc
library(QuantPsyc) # Pruba multivariada de normlaidad
library(statmod)
library(numDeriv) # Requuerida para cargar la libreria ghyp
library(ghyp) # multivariado NIG
library(cramer) # Pruba cramer NIG multivariada
library(textshape)
View(g1)
#Pruebas de estacionaridad------------------------------------------------------
Estg1<-basicStats(g1)
Estg1
#Librerias----------------------------------------------------------------------
library(readxl)
library(timeDate) # Requerido para cargar la libreria de fBasics
library(timeSeries) # Requerido para cargar la libreria de fBasics
library(fBasics) # Analisis estadistico
library(aTSA)# Raiz Unitaria
library(zoo) # Requerido para cargar la libreria de tseries
library(tseries) # Raiz Unitaria
library(naniar) # remueve Nas
library(tidyverse) # Ya incluye read excel
library(tseries) # Raiz Unitaria
library(xts)
library(PerformanceAnalytics)
library(textshape)
library(boot) # Requuerida para cargar la libreria QuantPsyc
library(MASS) # Requuerida para cargar la libreria QuantPsyc
library(QuantPsyc) # Pruba multivariada de normlaidad
library(QuantPsyc) # Pruba multivariada de normlaidad
library(statmod)
library(numDeriv) # Requuerida para cargar la libreria ghyp
library(ghyp) # multivariado NIG
library(cramer) # Pruba cramer NIG multivariada
library(textshape)
View(g1)
#Construccion de normal con parametros multivariados de la series
m<-mean(g1$SPX)
sd<-sd(g1$SPX)
len<-length(g1$SPX)
basenormal<-rnorm(len,m,sd)#normal con los parametros de nuestras series
#Graficas de normalidad---------------------------------------------------------
plot(density(g1$SPX),col="blue",ylim=c(0,60), main="Distribuciones contra normal")+
lines(density(g1$OMXC),
col="green")+
lines(density(g1$FTSE),
col="orange")+
lines(density(g1$KOSPI),
col="black")+
lines(density(g1$MSCI),
col="grey")+
lines(density(basenormal),
col="red")
#NIG aleatoria con parametors univariados de nuestra serie
r = rnig(len,
alpha = a$alpha ,
beta = a$beta,
delta = a$delta ,
mu= a$mu)
#Agrupar parametros en un objeto
a<-NIG@fit[["par"]]
a<-data.frame(t(a))
#NIG aleatoria con parametors univariados de nuestra serie
r = rnig(len,
alpha = a$alpha ,
beta = a$beta,
delta = a$delta ,
mu= a$mu)
#Nig Multivariada---------------------------------------------------------------
#Parametros para NIG Multivariada
multNIG<-fit.NIGmv(data=g1,silent=FALSE)
#Localizar parametros dentor de un obejto
Mom1NIGm<-multNIG@expected.value
Mom2NIGm<-multNIG@variance
View(Mom2NIGm)
Mom1NIGm
#Construccion de la funcion NIG con nuestros  parametros de la funcion multivariada
Mnig <- rghyp(len,multNIG)
g11<-as.matrix(g1)
View(g11)
#Graficas de NIG Multivariada---------------------------------------------------
plot(density(Mnig),
col="red",ylim=c(0,60),main="Distribuciones contra NIG multivariada")+
lines(density(g1$SPX),
col="green")+
lines(density(g1$FTSE),
col="purple")+
lines(density(g1$KOSPI),
col="black")+
lines(density(g1$MSCI),
col="dark blue")+
lines(density(g1$OMXC),
col="pink")
<<<<<<< Updated upstream
library(readxl)#Leer excel
library(factoextra)#funcion kmeans, grafiacs de pca
library(textshape)#editar las columnas}
library(naniar)#elimina nas
library(stats)#pca
library(tidyverse)
df1 <- data.frame(read_excel("C:/Users/juanl/Desktop/paper/Bases de datos/Criterios-Unificado.xlsx"))#Carga los datos
df1<-textshape::column_to_rownames(df1,
loc=1)
df1<-(na.omit(df1))
df1$GDP<-NULL
#df1pca <- df1 [,-4]
pca_2<-prcomp(df1)
summary(pca_2)
summary(pca_2)
```{r Combinar en una base el PCA1}
df2 <- cbind(df1,
pca_2$x)#Agrefar pca2 por renglones
df2$pais<-rownames(df2)
Clas<-df2 %>%
arrange(desc(PC1))
View(Clas)
Class<-data.frame(Clas$pais,Clas$PC1)
colnames(Class)<-c("PaÃ­s","PC1")
Grupo1<-head(Class,5)
View(Grupo1)
=======
library(readxl)
library(timeDate) # Requerido para cargar la libreria de fBasics
library(timeSeries) # Requerido para cargar la libreria de fBasics
library(fBasics) # Analisis estadistico
library(aTSA)# Raiz Unitaria
library(zoo) # Requerido para cargar la libreria de tseries
library(tseries) # Raiz Unitaria
library(naniar) # remueve Nas
library(tidyverse) # Ya incluye read excel
library(xts)
library(PerformanceAnalytics)
library(textshape)
library(boot) # Requuerida para cargar la libreria QuantPsyc
library(MASS) # Requuerida para cargar la libreria QuantPsyc
library(QuantPsyc) # Pruba multivariada de normlaidad
library(statmod)
library(numDeriv) # Requuerida para cargar la libreria ghyp
library(ghyp) # multivariado NIG
library(cramer) # Pruba cramer NIG multivariada
library(textshape)
library(readr)
X1_2_3_Retornos_5_menos_correlacionados <- read_csv("1.2.3.Retornos 5 menos correlacionados.csv",
col_types = cols(...1 = col_date(format = "%d/%m/%Y")))
View(X1_2_3_Retornos_5_menos_correlacionados)
g1 <- X1_2_3_Retornos_5_menos_correlacionados
colnames(g1)<-c("Fecha","SPX","OMXC","FTSE","KOSPI","MSCI")
g1<-column_to_rownames(g1,loc=1)
g1<-drop_na(g1)
g1 <- as.xts(g1)
glimpse(g1)
#Pruebas de estacionaridad------------------------------------------------------
Estg1<-basicStats(g1)
Estg1
adf.test(g1$SPX)
#-------------------------
#Teorica Normal ajustada con las series de tiempo de los activos del portafolio
muN_OMXC <- mean(g1$OMXC)
sdN_OMXC <- sd(g1$OMXC)
gridN_OMXC <- seq(-.20, .20, by = .001)
dN_OMXC <- dnorm(gridN_OMXC, muN_OMXC, sdN_OMXC)
View(g1)
muN_SPX <- mean(g1$SPX)
sdN_SPX <- sd(g1$SPX)
gridN_SPX <- seq(-.20, .20, by = .001)
dN_SPX <- dnorm(gridN_SPX, muN_SPX, sdN_SPX)
muN_FTSE <- mean(g1$FTSE)
sdN_FTSE <- sd(g1$FTSE)
gridN_FTSE <- seq(-.20, .20, by = .001)
dN_FTSE <- dnorm(gridN_FTSE, muN_FTSE, sdN_FTSE)
muN_KOSPI <- mean(g1$KOSPI)
sdN_KOSPI <- sd(g1$KOSPI)
gridN_KOSPI <- seq(-.20, .20, by = .001)
dN_KOSPI <- dnorm(gridN_KOSPI, muN_KOSPI, sdN_KOSPI)
muN_MSCI <- mean(g1$MSCI)
sdN_MSCI <- sd(g1$MSCI)
gridN_MSCI <- seq(-.20, .20, by = .001)
dN_MSCI <- dnorm(gridN_MSCI, muN_MSCI, sdN_MSCI)
?normFit()
NIG_OMXC <- nigFit(g1$OMXC)
NIG_SPX <- nigFit(g1$SPX)
NIG_FTSE <- nigFit(g1$FTSE)
NIG_KOSPI <- nigFit(g1$KOSPI)
NIG_MSCI <- nigFit(g1$MSCI)
#agrupar parametros en un objeto
Parametro_OMXC <- NIG_OMXC@fit[["par"]]
#agrupar parametros en un objeto
ParametroNIG_OMXC <- NIG_OMXC@fit[["par"]]
ParametroNIG_OMXC <- data.frame(t(ParametroNIG_OMXC))
ParametroNIG_SPX <- NIG_SPX@fit[["par"]]
ParametroNIG_SPX <- data.frame(t(ParametroNIG_SPX))
arametroNIG_FTSE <- NIG_FTSE@fit[["par"]]
ParametroNIG_FTSE <- data.frame(t(ParametroNIG_FTSE))
ParametroNIG_KOSPI <- NIG_KOSPI@fit[["par"]]
ParametroNIG_KOSPI <- data.frame(t(ParametroNIG_KOSPI))
ParametroNIG_MSCI <- NIG_MSCI@fit[["par"]]
ParametroNIG_MSCI <- data.frame(t(ParametroNIG_MSCI))
arametroNIG_FTSE <- NIG_FTSE@fit[["par"]]
ParametroNIG_FTSE <- data.frame(t(ParametroNIG_FTSE))
ParametroNIG_FTSE <- NIG_FTSE@fit[["par"]]
ParametroNIG_FTSE <- data.frame(t(ParametroNIG_FTSE))
r_OMXC=dnig(gridN_OMXC,
alpha = NIG_OMXC$alpha,
beta = NIG_OMXC$beta,
delta = NIG_OMXC$delta,
mu= NIG_OMXC$mu)
r_OMXC=dnig(gridN_OMXC,
alpha = NIG_OMXC$alpha,
beta = NIG_OMXC$beta,
delta = NIG_OMXC$delta,
mu= NIG_OMXC$mu)
#Teorica NIG ajustada--------------
NIG_OMXC <- nigFit(g1$OMXC)
NIG_SPX <- nigFit(g1$SPX)
NIG_FTSE <- nigFit(g1$FTSE)
NIG_KOSPI <- nigFit(g1$KOSPI)
NIG_MSCI <- nigFit(g1$MSCI)
#agrupar parametros en un objeto
ParametroNIG_OMXC <- NIG_OMXC@fit[["par"]]
ParametroNIG_OMXC <- data.frame(t(ParametroNIG_OMXC))
r_OMXC=dnig(gridN_OMXC,
alpha = NIG_OMXC$alpha,
beta = NIG_OMXC$beta,
delta = NIG_OMXC$delta,
mu= NIG_OMXC$mu)
r_OMXC=dnig(gridN_OMXC,
alpha = ParametroNIG_OMXC$alpha,
beta = ParametroNIG_OMXC,
delta = ParametroNIG_OMXC$delta,
mu= ParametroNIG_OMXC$mu)
r_SPX=dnig(gridN_SPX,
alpha = ParametroNIG_SPX$alpha,
beta = ParametroNIG_SPX$beta,
delta = ParametroNIG_SPX$delta,
mu = ParametroNIG_SPX$mu)
r_OMXC=dnig(gridN_OMXC,
alpha = ParametroNIG_OMXC$alpha,
beta = ParametroNIG_OMXC$beta,
delta = ParametroNIG_OMXC$delta,
mu = ParametroNIG_OMXC$mu)
r_FTSE=dnig(gridN_FTSE,
alpha = ParametroNIG_FTSE$alpha,
beta = ParametroNIG_FTSE$beta,
delta = ParametroNIG_FTSE$delta,
mu = ParametroNIG_FTSE$mu)
r_KOSPI=dnig(gridN_KOSPI,
alpha = ParametroNIG_KOSPI$alpha,
beta = ParametroNIG_KOSPI$beta,
delta = ParametroNIG_KOSPI$delta,
mu = ParametroNIG_KOSPI$mu)
r_MSCI=dnig(gridN_MSCI,
alpha = ParametroNIG_MSCI$alpha,
beta = ParametroNIG_MSCI$beta,
delta = ParametroNIG_MSCI$delta,
mu = ParametroNIG_MSCI$mu)
plot(density(r_OMXC),
col="red",
main="NIG Univariada",
sub="STI index")
plot(x = gridN_OMXC, y = r_OMXC,
type = "l")
lines(x=gridN_OMXC, y=dN_OMXC, col="red")
lines(density(g1$OMXC), col = "green")
plot(x = gridN_OMXC, y = r_OMXC,
type = "l", label = "GrÃ¡fica 1 OMXC")
lines(x=gridN_OMXC, y=dN_OMXC, col="red")
lines(density(g1$OMXC), col = "green")
plot(x = gridN_SPX, y = r_SPX,
type = "l")
lines(x=gridN_SPX, y=dN_SPX, col="red")
lines(density(g1$SPX), col="green")
plot(x = gridN_FTSE, y = r_FTSE,
type = "l")
lines(x=gridN_FTSE, y=dN_FTSE, col="red")
lines(density(g1$FTSE), col = "green") #Grafica normal, nig y empirica de FTSE
plot(x = gridN_KOSPI, y = r_KOSPI,
type = "l")
lines(x=gridN_KOSPI, y=dN_KOSPI, col="red")
lines(density(g1$KOSPI), col = "green") #Grafica normal, nig y empirica de KOSPI
plot(x = gridN_MSCI, y = r_MSCI,
type = "l")
lines(x=gridN_MSCI, y=dN_MSCI, col="red")
lines(density(g1$MSCI), col = "green") #Grafica normal, nig y empirica de MCSI
>>>>>>> Stashed changes
