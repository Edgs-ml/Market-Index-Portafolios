library(readxl)
library(fBasics) # Analisis estadistico
library(aTSA)# Raiz Unitaria
library(zoo) # Requerido para cargar la libreria de tseries
library(tseries) # Raiz Unitaria
library(naniar) # remueve Nas
library(tidyverse) # Ya incluye read excel
library(PerformanceAnalytics)
library(textshape)
library(boot) # Requuerida para cargar la libreria QuantPsyc
library(MASS) # Requuerida para cargar la libreria QuantPsyc
library(QuantPsyc) # Pruba multivariada de normlaidad
library(statmod)
library(numDeriv) # Requuerida para cargar la libreria ghyp
library(ghyp) # multivariado NIG
library(cramer) # Pruba cramer NIG multivariada
g1<- read.csv("1.2.3.Retornos 5 menos correlacionados.csv")
colnames(g1)<-c("Fecha","SPX","OMXC","FTSE","KOSPI","MSCI")
#View(g1)
g1<-textshape::column_to_rownames(g1,loc=1)
g1<-drop_na(g1)
glimpse(g1)
retornos<-Return.calculate(g1,method = "log")[-1,]
Estg1<-basicStats(retornos)
Estg1
adf.test(retornos$SPX)
retornos<-Return.calculate(g1,method = "log")[-1,]
retornos<-drop_na(retornos)
Estg1<-basicStats(retornos)
Estg1
adf.test(retornos$SPX)
adf.test(retornos$OMXC)
adf.test(retornos$FTSE)
adf.test(retornos$KOSPI)
g1<- read.csv("1.2.3.Retornos 5 menos correlacionados.csv")
View(g1)
colnames(g1)<-c("Fecha","SPX","OMXC","FTSE","KOSPI","MSCI")
View(g1)
library(textshape)
g1<-column_to_rownames(g1,loc=1)
View(g1)
g1<-drop_na(g1)
glimpse(g1)
retornos<-Return.calculate(g1,method = "log")[-1,]
retornos<-drop_na(retornos)
View(retornos)
adf.test(retornos$SPX)
adf.test(retornos$SPX)
adf.test(retornos$OMXC)
g1<- read.csv("1.2.3.Retornos 5 menos correlacionados.csv")
View(g1)
colnames(g1)<-c("Fecha","SPX","OMXC","FTSE","KOSPI","MSCI")
#View(g1)
g1<-column_to_rownames(g1,loc=1)
View(g1)
adf.test(retornos$SPX)
adf.test(g1$SPX)
adf.test(g1$OMXC)
adf.test(g1$SPX)
adf.test(g1$OMXC)
adf.test(g1$FTSE)
adf.test(g1$KOSPI)
adf.test(g1$MSCI)
#Shapiro Wilk
shapiro.test(g1$SPX)
#Shapiro Francia
sfTest(g1$SPX)
#Construccion de normal con parametros multivariados de la series
m<-mean(g1$SPX)
sd<-sd(g1$SPX)
len<-length(g1$SPX)
basenormal<-rnorm(len,m,sd)#normal con los parametros de nuestras series
#Prubas de Kormogorov contra distribucion normal, creada con paramaetros de nuestra serie
ks.test(g1$SPX,basenormal)
mult.norm(g1)$mult.test
plot(density(g1$SPX),col="blue",ylim=c(0,60), main="Distribuciones contra normal")+
lines(density(g1$OMXC),
col="green")+
lines(density(g1$FTSE),
col="orange")+
lines(density(g1$KOSPI),
col="black")+
lines(density(g1$MSCI),
col="grey")+
lines(density(basenormal),
col="red")
#Parametros de la NIG
NIG<-nigFit(g1$OMXC)
#Agrupar parametros en un objeto
a<-NIG@fit[["par"]]
a<-data.frame(t(a))
#NIG aleatoria con parametors univariados de nuestra serie
r = rnig(len,
alpha = a$alpha ,
beta = a$beta,
delta = a$delta ,
mu= a$mu)
plot(density(r),
col="red",
main="NIG Univariada",
sub="STI index")
#Pruba de Kormogorov univariada para NIG
ks.test(g1$OMXC,r)
#Parametros para NIG Multivariada
multNIG<-fit.NIGmv(data=g1,silent=FALSE)
#Localizar parametros dentor de un obejto
Mom1NIGm<-multNIG@expected.value
Mom2NIGm<-multNIG@variance
#Construccion de la funcion NIG con nuestros  parametros de la funcion multivariada
Mnig <- rghyp(len,multNIG)
g11<-as.matrix(g1)
Mnig
Mom1NIGm
Mom2NIGm
View(multNIG)
t<-as.data.frame(Mom2NIGm)
t
View(t)
library(writeexl)
library(writexl)
install.packages("writexl")
library(writexl)
write_xlsx(t,"C:\Users\juanl\Documents\GitHub\Market-Index-Portafolios\APLHA\ALPHA 1\ALPHA 1.2\1.2.3. Normality Test\\ Mom2")
write_xlsx(t,"C:\Users\juanl\Documents\GitHub\Market-Index-Portafolios\APLHA\ALPHA 1\ALPHA 1.2\1.2.3. Normality Test\ Mom2")
