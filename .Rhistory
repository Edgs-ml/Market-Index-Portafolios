plot(density(Mnig),col="red",ylim=c(0,60),main="Distribuciones contra NIG multivariada")+
lines(density(retornos$OMX20),col="green")+
lines(density(retornos$FTSE),col="purple")+
lines(density(retornos$HSI),col="black")+
lines(density(retornos$DJI),col="dark blue")+
lines(density(retornos$STI),col="pink")
Specs_Port <- portfolio.spec(c("DJI",	"HSI",	"OMX20",	"STI",	"FTSE"))
library(quantmod)
library(PerformanceAnalytics)
library(PortfolioAnalytics)
library(DEoptim)
library(readxl)
library(fBasics)
library(ghyp)
g1<- read_excel("D:/JL/Market-Index-Portafolios/APLHA/ALPHA 1/ALPHA 1.1/1.1.3Portafolio_Optimization/Optimizacion en excel/NIG/Optimizacion (el bueno1).xlsx",
sheet = "Datos")
Specs_Port <- portfolio.spec(c("DJI",	"HSI",	"OMX20",	"STI",	"FTSE"))
##### Add Constraints #####
Specs_Port <- add.constraint(Specs_Port,type="full_investment")
Specs_Port <- add.constraint(Specs_Port,type="long_only")
##### Add Objective #####
Specs_Port <- add.objective(Specs_Port,type="risk",name="StdDev")
Specs_Port <- add.objective(Specs_Port,type='return',name='mean')
Specs_Port
View(Specs_Port)
plot(density(retornos$OMX20),col="blue",ylim=c(0,60), main="Distribuciones contra normal")+
lines(density(retornos$STI),
col="green")+
lines(density(retornos$FTSE),
col="orange")+
lines(density(retornos$HSI),
col="black")+
lines(density(retornos$DJI),
col="grey")+
lines(density(basenormal),
col="red")
plot(density(retornos$OMX20),col="blue",ylim=c(0,60), main="Distribuciones contra normal")
plot(density(retornos$OMX20),
col="blue",
ylim=c(0,60),
main="Distribuciones contra normal")+
lines(density(retornos$DJI),
col(="red"))
lines(density(retornos$DJI)
plot(density(retornos$OMX20),
plot(density(retornos$OMX20),
col="blue",
ylim=c(0,60),
main="Distribuciones contra normal")
plot(density(retornos$DJI),
col="red",
ylim=c(0,60),
main="Distribuciones contra normal")
plot(density(retornos$OMX20),
col="blue",
ylim=c(0,60),
main="Distribuciones contra normal")+plot(density(retornos$DJI),
col="red",
ylim=c(0,60),
main="Distribuciones contra normal")
plot(density(retornos$OMX20),
col="blue",
ylim=c(0,60),
main="Distribuciones contra normal")+plot(density(retornos$DJI),
col="red",
ylim=c(0,60))
plot(density(retornos$OMX20),
col="blue",
ylim=c(0,60),
main="Distribuciones contra normal")+lines(density(retornos$DJI),
col="red",
ylim=c(0,60))
library(quantmod)
library(PerformanceAnalytics)
library(PortfolioAnalytics)
library(DEoptim)
library(readxl)
library(fBasics)
library(ghyp)
plot(density(retornos$OMX20),
col="blue",
ylim=c(0,60),
main="Distribuciones contra normal")+
lines(density(retornos$DJI),
col="red",
ylim=c(0,60))+
lines(density(retornos$HSI),
col="orange",
ylim=c(0,60))+
lines(density(retornos$STI),
col="green",
ylim=c(0,60))+
lines(density(retornos$FTSE),
col="black",
ylim=c(0,60))
library(quantmod)
library(PerformanceAnalytics)
library(PortfolioAnalytics)
library(DEoptim)
library(readxl)
library(fBasics)
library(ghyp)
install.packages("GeneralizedHyperbolic")
DFOpt1Norm <- read_excel("~/Documents/GitHub/Market-Index-Portafolios/iNDICES.xlsx")
View(DFOpt1Norm)
DFOpt1Norm <- read_excel("~/Documents/GitHub/Market-Index-Portafolios/iNDICES.xlsx",
col_types = c("date", "numeric", "numeric",
"numeric", "numeric", "numeric"))
DFOpt1Norm <- read_excel("~/Documents/GitHub/Market-Index-Portafolios/iNDICES.xlsx",
col_types = c("date", "numeric", "numeric",
"numeric", "numeric", "numeric", "numeric", "numeric"))
View(DFOpt1Norm)
View(DFOpt1Norm)
DFOpt1Norm <- read_excel("~/Documents/GitHub/Market-Index-Portafolios/iNDICES.xlsx",
col_types = c("date", "numeric", "numeric",
"numeric", "numeric", "numeric", "numeric", "numeric"))
colnames(DFOpt1Norm) <- ("Fecha","SP","OMX30","HSI","STI","KOSPI","DAX")
colnames(DFOpt1Norm) <- ("Fecha", "SP", "OMX30", "HSI", "STI", "KOSPI", "DAX")
colnames(g1)<-c("Fecha","DJI",	"HSI",	"OMX20",	"STI",	"FTSE")
View(g1)
Specs_Port <- portfolio.spec(c("DJI",	"HSI",	"OMX20",	"STI",	"FTSE"))
##### Add Constraints #####
Specs_Port <- add.constraint(Specs_Port,type="full_investment")
Specs_Port <- add.constraint(Specs_Port,type="long_only")
##### Add Objective #####
Specs_Port <- add.objective(Specs_Port,type="risk",name="StdDev")
Specs_Port <- add.objective(Specs_Port,type='return',name='mean')
Specs_Port
fviz_pca_ind(pca_df,
repel = TRUE,
title = "Place of each country in a PC1 and PC2 Map [With GDP]")
library(tidyverse)
library(readxl)
library(textshape) #"Tools for Reshaping Text". Usado en columns_to_rownames
library(broom)
library(plotly)
library(scales)
library(caTools)
library(caret)
library(cluster)
library(factoextra) #Para graficar K-Means y PCA
library(psych) #Usado por su funsión de crar matices de correlaciones de colores
library(stats) #Para hacer el PCA
library(naniar) #Para limpiar las bases de datos
library(fBasics) #Analisis estadistico
library(PerformanceAnalytics)
library(statmod)
library(knitr)
library(stargazer)
df <- read_excel("APLHA/ALPHA_1/ALPHA_1.1/1.1.1PCA_Codes/Criterios-Unificado (Datos para PCA).xlsx")
#df2: eliminar a China y Estados Unidos
df2 <- df %>%
subset(Country!="China" & Country!="United States")
#df: Data Frame with all variables and observations
df <- column_to_rownames(df, loc = 1)
#df1: Data frame without GDP and with all the countries
df1 <- df[,-4]
#df2: Data Frame without China and USA and with GDP
df2 <- column_to_rownames(df2, loc = 1)
describe(df)
stargazer(df, type = "latex", title="Indicators", align = FALSE)
tabledf <- describe(df)
kable(tabledf, format = "latex") %>%
kable_styling(latex_options = "scale_down", font_size = 5)
cor.plot(df, main = "Correlación de GCI, ECI, EDBI, y GDP")
cor.plot(df, main = FALSE)
cor.plot(df, main(FALSE))
cor.plot(df, main = "Correlación de GCI,ECI, EDBI, y GDP")
cor.plot(df2_PC1234, main = "Correlación de los Índices con sus Tres Componentes Principales")
Kdf1_Descent = subset(df1_PC123_Descent, select = c("PC1","PC2", "PC3"))
head(Kdf1_Descent, 10)
library(kableExtra)
kableExtra_latex_packages(head(Kdf1_Descent, 10))
table1 <- head(Kdf1_Descent, 10)
kableExtra_latex_packages(table1)
kable(table1)
kable(table1, format = "latex")
kable(table1, format = "latex")
kable_styling(table1, latex_options = "striped")
kable(table1, format = "latex", kable_styling(latex_options = "striped"))
kable(table1, format = "latex")
g1 <- drop_na(g1)
glimpse(g1)
map <- fviz_pca_ind(pca_df1, repel = TRUE)
map
map <- fviz_pca_ind(pca_df1, repel = TRUE, select.ind = list(Singapore))
map <- fviz_pca_ind(pca_df1, repel = TRUE, select.ind = list(Singapore=TRUE))
map
map <- fviz_pca_ind(pca_df1,
repel = TRUE,
select.ind = table1)
map
map <- fviz_pca_ind(pca_df1,
repel = TRUE,
label = "none")
map
View(map)
map <- fviz_pca_ind(pca_df1,
repel = TRUE,
label = c(Singapore, Germany))
map <- fviz_pca_ind(pca_df1,
repel = TRUE,
label = c("Singapore", "Germnany"))
map
map <- fviz_pca_ind(pca_df1,
repel = TRUE,
addEllipses = TRUE,
label = c("Singapore", "Germnany"))
map
map <- fviz_pca_ind(pca_df1,
repel = TRUE,
label = c("Singapore", "Germnany"))
map
library(cluster)
library(factoextra) #Para graficar K-Means y PCA
library(psych)
library(stats) #Para hacer el PCA
library(naniar) #Para limpiar las bases de datos
library(fBasics) #Analisis estadistico
library(aTSA) #Raiz Unitaria
library(tseries) #Raiz Unitaria
library(PerformanceAnalytics)
library(QuantPsyc) #Pruba multivariada
library(statmod)
library(ghyp) #Para hacer momentos estadisticos de la NIG
library(quantmod) #Para descargar datos
library(cramer) #Para la prueba de cramer
Serie_de_datos_el_bueno_ <- read_excel("~/Documents/GitHub/Market-Index-Portafolios/iNDICES.xlsx",
col_types = c("date", "numeric", "numeric",
"numeric", "numeric", "numeric", "numeric", "numeric"))
g1 <- Serie_de_datos_el_bueno_
colnames(g1)<-c("Fecha", "SP", "OMX30","HSI","STI","DJI","KOSPI", "DAX")
g1<-textshape::column_to_rownames(g1,loc=1)
g1 <- drop_na(g1)
glimpse(g1)
head(g1)
table333 <- head(g1)
kable(table333, format = "latex")
retornos <- Return.calculate(g1,
method = "log")[-1,]
table333 <- head(retornos)
kable(table333, format = "latex")
Estg1 <- basicStats(retornos)
Estg1
table334 <- head(Estg1)
kable(table334, format = "latex")
kable(table334)
adf_sti <- adf.test(retornos$SP)
adf_sti_table <- as.data.frame(c(adf_sti$p.value))
adf_sti_table <- adf_sti_table %>%
mutate(method=adf_sti[["method"]])
adf_sti_table <- adf_sti_table %>%
mutate(DF=adf_sti[["statistic"]][["Dickey-Fuller"]])
adf.test(retornos$SP)
adf.test(retornos$OMX30)
adf.test(retornos$HSI)
adf.test(retornos$STI)
adf.test(retornos$DJI)
adf.test(retornos$KOSPI)
adf.test(retornos$DAX)
plot(density(retornos$SP),
col="red",
ylim=c(0,60),
main="Distribuciones contra normal")+
lines(density(retornos$OMX30),
col="green",
ylim=c(0,60))+
lines(density(retornos$HSI),
col="blue",
ylim=c(0,60))+
lines(density(retornos$STI),
col="orange",
ylim=c(0,60))+
lines(density(retornos$DJI),
col="pink",
ylim=c(0,60)+
lines(density(retornos$KOSPI),
col="purple",
ylim=c(0,60))+
lines(density(retornos$DAX),
col="brown",
ylim=c(0,60)))
mult.norm(retornos)$mult.test
m <- mean(retornos$SP)
sd <- sd(retornos$SP)
len <- length(retornos$SP)
basenormal <- dnorm(len,m,sd)
m <- mean(retornos$SP)
m <- mean(retornos$SP)
sd <- sd(retornos$SP)
len <- length(retornos$SP)
basenormal <- dnorm(len,m,sd)
ks.test(retornos$SP, basenormal)
ks.test(retornos$OMX30, basenormal)
ks.test(retornos$HSI, basenormal)
ks.test(retornos$STI, basenormal)
ks.test(retornos$DJI, basenormal)
ks.test(retornos$KOSPI, basenormal)
ks.test(retornos$DAX, basenormal)
mult.norm(retornos)$mult.test
table5<-mult.norm(retornos)$mult.test
kable(table5, format = "latex")
#Parametros de la NIG
NIG<-nigFit(retornos$SP)
#Agrupar parametros en un objeto
a<-NIG@fit[["par"]]
a<-data.frame(t(a))
#NIG aleatoria con parametors univariados de nuestra serie
r = rnig(len,
alpha = a$alpha,
beta = a$beta,
delta = a$delta,
mu= a$mu)
plot(density(r),
col="black",
main="NIG Univariada",
sub="SP index")
#Pruba de Kormogorov univariada para NIG
ks.test(retornos$SP,r)
library(quantmod)
library(PerformanceAnalytics)
library(PortfolioAnalytics)
library(DEoptim)
library(readxl)
library(fBasics)
library(ghyp)
library(PortfolioAnalytics)
Optimized_Port_Norm <- optimize.portfolio(retornos,
Specs_Port_Norm,
trace = TRUE)
Specs_Port_Norm <- portfolio.spec(retornos)
##### Add Constraints #####
Specs_Port_Norm <- add.constraint(Specs_Port_Norm,type = "full_investment")
Specs_Port_Norm <- add.constraint(Specs_Port_Norm,type="long_only")
##### Add Objective #####
Specs_Port_Norm <- add.objective(Specs_Port_Norm,type="risk",name="StdDev")
Specs_Port_Norm <- add.objective(Specs_Port_Norm,type='return',name='mean')
Specs_Port_Norm
Optimized_Port_Norm <- optimize.portfolio(retornos,
Specs_Port_Norm,
trace = TRUE)
kable(Specs_Port_Norm, format = "latex")
kable(table5, format = "latex")
df_PC1234 <- cbind(df, pca_df$x)
df_PC1234_Descent <- df_PC1234 %>%
arrange(desc(PC1))
df1_PC123 <- cbind(df1, pca_df1$x)
df1_PC123_Descent <- df1_PC123 %>%
arrange(desc(PC1))
df2_PC1234 <- cbind(df2, pca_df2$x)
df2_PC1234_Descent <- df2_PC1234 %>%
arrange(desc(PC1))
fviz_pca_ind(pca_df,
repel = TRUE,
title = "Place of each country in a PC1 and PC2 Map [With GDP]")
library(tidyverse)
library(readxl)
library(textshape) #"Tools for Reshaping Text". Usado en columns_to_rownames
library(broom)
library(plotly)
library(scales)
library(caTools)
library(caret)
library(cluster)
library(factoextra) #Para graficar K-Means y PCA
library(psych) #Usado por su funsión de crar matices de correlaciones de colores
library(stats) #Para hacer el PCA
library(naniar) #Para limpiar las bases de datos
library(fBasics) #Analisis estadistico
library(PerformanceAnalytics)
library(statmod)
library(knitr)
library(stargazer)
df <- read_excel("APLHA/ALPHA_1/ALPHA_1.1/1.1.1PCA_Codes/Criterios-Unificado (Datos para PCA).xlsx")
#df2: eliminar a China y Estados Unidos
df2 <- df %>%
subset(Country!="China" & Country!="United States")
#df: Data Frame with all variables and observations
df <- column_to_rownames(df, loc = 1)
#df1: Data frame without GDP and with all the countries
df1 <- df[,-4]
#df2: Data Frame without China and USA and with GDP
df2 <- column_to_rownames(df2, loc = 1)
df <- read_excel("APLHA/ALPHA_1/ALPHA_1.1/1.1.1PCA_Codes/Criterios-Unificado (Datos para PCA).xlsx")
#df2: eliminar a China y Estados Unidos
df2 <- df %>%
subset(Country!="China" & Country!="United States")
#df: Data Frame with all variables and observations
df <- column_to_rownames(df, loc = 1)
#df1: Data frame without GDP and with all the countries
df1 <- df[,-4]
#df2: Data Frame without China and USA and with GDP
df2 <- column_to_rownames(df2, loc = 1)
tabledf <- describe(df)
kable(tabledf, caption = "Descripción Estadistica de los índicadores")
kable(tabledf,
digits = 3,
caption = "Descripción Estadistica de los índicadores")
kable(tabledf,
caption = "Descripción Estadistica de los índicadores")
library(tidyverse)
library(readxl)
library(textshape) #"Tools for Reshaping Text". Usado en columns_to_rownames
library(broom)
library(plotly)
library(scales)
library(caTools)
library(caret)
library(cluster)
library(factoextra) #Para graficar K-Means y PCA
library(psych) #Usado por su funsión de crar matices de correlaciones de colores
library(stats) #Para hacer el PCA
library(naniar) #Para limpiar las bases de datos
library(fBasics) #Analisis estadistico
library(PerformanceAnalytics)
library(statmod)
library(knitr)
library(stargazer)
library(kableExtra)
df <- read_excel("APLHA/ALPHA_1/ALPHA_1.1/1.1.1PCA_Codes/Criterios-Unificado (Datos para PCA).xlsx")
#df2: eliminar a China y Estados Unidos
df2 <- df %>%
subset(Country!="China" & Country!="United States")
#df: Data Frame with all variables and observations
df <- column_to_rownames(df, loc = 1)
#df1: Data frame without GDP and with all the countries
df1 <- df[,-4]
#df2: Data Frame without China and USA and with GDP
df2 <- column_to_rownames(df2, loc = 1)
tabledf <- describe(df)
kable(tabledf, format = "latex") %>%
kable_styling(latex_options = "scale_down", font_size = 5)
kable(tabledf, format = "latex") %>%
kable_styling(latex_options = "scale_down", font_size = 5)
tabledf <- describe(df)
kable(tabledf, format = "html") %>%
kable_styling(latex_options = "scale_down", font_size = 5)
cor.plot(df, main = "Correlación de GCI, ECI, EDBI, y GDP")
cor.plot(df1, main = "Correlación de GCI, ECI, y EDBI")
cor.plot(df2, main = "Correlación de GCI, ECI, EDBI, y GDP sin Estados Unidos y China")
pca_df <- prcomp(df)
kable(pca_df, format = "latex")
pca_df1 <- prcomp(df1)
summary(pca_df1)
Summary_Table_PCA_df<-summary(pca_df1)
kable(Summary_Table_PCA_df, format = "latex")
Summary_Table_PCA_df
stargazer(Summary_Table_PCA_df, type = "latex")
as.data.frame(Summary_Table_PCA_df)
pca_df2 <- prcomp(df2)
summary(pca_df2)
pca_df <- prcomp(df)
summary(pca_df)
df_PC1234 <- cbind(df, pca_df$x)
df_PC1234_Descent <- df_PC1234 %>%
arrange(desc(PC1))
df1_PC123 <- cbind(df1, pca_df1$x)
df1_PC123_Descent <- df1_PC123 %>%
arrange(desc(PC1))
df2_PC1234 <- cbind(df2, pca_df2$x)
df2_PC1234_Descent <- df2_PC1234 %>%
arrange(desc(PC1))
fviz_pca_ind(pca_df,
repel = TRUE,
title = "Place of each country in a PC1 and PC2 Map [With GDP]")
fviz_pca_ind(pca_df,
repel = FALSE,
title = "Place of each country in a PC1 and PC2 Map [With GDP]")
fviz_pca_ind(pca_df,
repel = FALSE,
title = "Lugar en el mapa de cada País dentro de los Componentes Principales 1 y 2 [con GDP]")
fviz_pca_ind(pca_df,
repel = FALSE,
title = "Lugar de Países dentro de los Componentes Principales 1 y 2 [con GDP]")
fviz_pca_ind(pca_df1,
repel = TRUE,
title = "Place of each country in a PC1 and PC2 Map [Without GDP]")
"quitar los nombres de los puntos"
fviz_pca_ind(pca_df2,
repel = TRUE,
title = "Place of each country [With GDP and without USA & China]")
cor.plot(df2, main = FALSE)
cor.plot(df2, main(F))
cor.plot(df2)
map <- fviz_pca_ind(pca_df1, title="Coordenadas de cada País Dentro de Componente Principal 1 y 2")
map
map <- fviz_pca_ind(pca_df1,
repel = TRUE,
title="Coordenadas de cada País Dentro de Componente Principal 1 y 2")
map
Serie_de_datos_el_bueno_ <- read_excel("~/Documents/GitHub/Market-Index-Portafolios/iNDICES.xlsx",
col_types = c("date", "numeric", "numeric",
"numeric", "numeric", "numeric", "numeric", "numeric"))
g1 <- Serie_de_datos_el_bueno_
colnames(g1)<-c("Fecha", "SP", "OMX30","HSI","STI","DJI","KOSPI", "DAX")
g1<-textshape::column_to_rownames(g1,loc=1)
g1 <- drop_na(g1)
glimpse(g1)
g1 <- drop_na(g1)
glimpse(g1)
retornos <- Return.calculate(g1,
method = "log")[-1,]
Estg1 <- basicStats(retornos)
Estg1
table777 <- head(g1)
kable(table777, format = "latex")
retornos <- Return.calculate(g1,
method = "log")[-1,]
kable(retornos, format = "latex")
retornsHead <- head(retornos)
kable(retornsHead, format = "latex")
kable(Estg1, format = "latex")
