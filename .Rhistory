## Tercer kmeans sobre PC12
df_K2C2 <- cbind(df_K1C1,
as.data.frame(kmean2_df_PC12$cluster))
colnames(df_K2C2)[3] = "K2C2"
df_K2C2 <- df_K2C2 %>%
filter(K2C2==2)
df_K2C2 <- df_K2C2[,-3]
View(df_K2C2)
#----
kmean3_df_PC12 <- kmeans(df_K2C2,
centers = 2,
iter.max = 50)
fviz_cluster(kmean3_df_PC12,
data = df_K2C2)
df_K3C2 <- cbind(df_K2C2,
as.data.frame(kmean3_df_PC12$cluster))
colnames(df_K3C2)[3] = "K3C2"
df_K3C2 <- df_K3C2 %>%
filter(K3C2==2)
df_K3C2 <- df_K3C2[,-3]
View(df_K3C2)
df_K3C1 <- cbind(df_K2C2,
as.data.frame(kmean3_df_PC12$cluster))
colnames(df_K3C1)[3] = "K3C1"
df_K3C1 <- df_K3C1 %>%
filter(K3C1==1)
df_K3C1 <- df_K3C1[,-3]
View(df_K3C1)
library(tidyverse)
library(readxl)
library(textshape) #"Tools for Reshaping Text". Usado en columns_to_rownames
library(broom)
library(plotly)
library(scales)
library(caTools)
library(caret)
library(cluster)
library(factoextra) #Para graficar K-Means y PCA
library(psych) #Usado por su funsión de crar matices de correlaciones de colores
library(stats) #Para hacer el PCA
library(naniar) #Para limpiar las bases de datos
library(fBasics) #Analisis estadistico
library(PerformanceAnalytics)
library(statmod)
library(knitr)
library(stargazer)
library(kableExtra)
library(ggpubr)
library(ggdist)
library(ggExtra)
library(ggbeeswarm)
library(aTSA) #Raiz Unitaria
library(tseries) #Raiz Unitaria
library(QuantPsyc) #Pruba multivariada
library(ghyp) #Para hacer momentos estadisticos de la NIG
library(quantmod) #Para descargar datos
library(cramer) #Para la prueba de cramer
library(PortfolioAnalytics)
library(DEoptim)
library(tidyquant)
library(NbClust)
library(dendextend)
df <- read_excel("APLHA/ALPHA_1/ALPHA_1.1/1.1.1PCA_Codes/Criterios-Unificado (Datos para PCA).xlsx")
df <- df[,-6]
df_plot <- df #Data Frame para hacer gráficas descriptivas
df <- column_to_rownames(df, loc = 1)
df_plot <- cbind(df_plot[,-5], log10(df$GDP))
colnames(df_plot)[5] = "GDP"
df <- column_to_rownames(df_plot,
loc = 1)
# Graficas descriptivas de las variables
df_plot %>%
ggplot(aes(x=GDP))+
geom_histogram(bins=100)+
geom_label(data = df_plot %>%
filter(GDP>13), aes(x=GDP,y=Country,
label=Country))
# PCA con df_gdplog
pca_df <- prcomp(df,
center = TRUE,
scale. = TRUE)
summary(pca_df)
df_PC1234 <- cbind(df,
as.data.frame(pca_df$x)) %>%
arrange(desc(PC1))
df_PC12 <- as.data.frame(pca_df$x)
df_PC12 <- df_PC12[,1:2]
# Kmeans sobre el PCA
NbClust(df_PC12,
distance = "euclidean",
method = "kmeans")
kmean1_df_PC12 <- kmeans(df_PC12,
centers = 3,
iter.max = 50) #creamos objeto de kmeans con la df principal
fviz_cluster(kmean1_df_PC12,
data = df_PC12)
## Segundo kmeans sobre PC12
df_K1C1 <- cbind(df_PC12,
as.data.frame(kmean1_df_PC12$cluster))
colnames(df_K1C1)[3] = "K1C1"
df_K1C1 <- df_K1C1 %>%
filter(K1C1==3)
df_K1C1 <- df_K1C1[,-3]
View(df_K1C1)
#----
NbClust(df_K1C1,
distance = "euclidean",
method = "kmeans")
kmean2_df_PC12 <- kmeans(df_K1C1,
centers = 2,
iter.max = 50)
fviz_cluster(kmean2_df_PC12,
data = df_K1C1)
## Tercer kmeans sobre PC12
df_K2C2 <- cbind(df_K1C1,
as.data.frame(kmean2_df_PC12$cluster))
colnames(df_K2C2)[3] = "K2C2"
df_K2C2 <- df_K2C2 %>%
filter(K2C2==2)
df_K2C2 <- df_K2C2[,-3]
View(df_K2C2)
#----
kmean3_df_PC12 <- kmeans(df_K2C2,
centers = 2,
iter.max = 50)
fviz_cluster(kmean3_df_PC12,
data = df_K2C2)
df_K3C2 <- cbind(df_K2C2,
as.data.frame(kmean3_df_PC12$cluster))
colnames(df_K3C2)[3] = "K3C2"
df_K3C2 <- df_K3C2 %>%
filter(K3C2==2)
df_K3C2 <- df_K3C2[,-3]
View(df_K3C2)
df_K3C1 <- cbind(df_K2C2,
as.data.frame(kmean3_df_PC12$cluster))
colnames(df_K3C1)[3] = "K3C1"
df_K3C1 <- df_K3C1 %>%
filter(K3C1==1)
df_K3C1 <- df_K3C1[,-3]
View(df_K3C1)
# Indices
indices <- read_excel("Indices_km.xlsx")
View(indices)
library(readxl)
Indices_km <- read_excel("Indices_km.xlsx",
sheet = "Hoja1")
View(Indices_km)
# Indices
indices <- read_excel("Indices_km.xlsx",
heet = "Hoja1")
# Indices
indices <- read_excel("Indices_km.xlsx",
sheet = "Hoja1")
View(indices)
indices <- indices[,-1]
# Indices
indices <- read_excel("Indices_km.xlsx",
sheet = "Hoja1")
colnames(indices)[1,] <- "Date"
colnames(indices$...1) <- "Date"
names(indices)[names(indices) == '...1'] <- 'Date'
vis_miss(indices)
indices <- indices[-1,]
vis_miss(indices)
indices <- drop_na(indices)
vis_miss(indices)
summary(indices)
library(tidyverse)
library(readxl)
library(textshape) #"Tools for Reshaping Text". Usado en columns_to_rownames
library(broom)
library(plotly)
library(scales)
library(caTools)
library(caret)
library(cluster)
library(factoextra) #Para graficar K-Means y PCA
library(psych) #Usado por su funsión de crar matices de correlaciones de colores
library(stats) #Para hacer el PCA
library(naniar) #Para limpiar las bases de datos
library(fBasics) #Analisis estadistico
library(PerformanceAnalytics)
library(statmod)
library(knitr)
library(stargazer)
library(kableExtra)
library(ggpubr)
library(ggdist)
library(ggExtra)
library(ggbeeswarm)
library(aTSA) #Raiz Unitaria
library(tseries) #Raiz Unitaria
library(QuantPsyc) #Pruba multivariada
library(ghyp) #Para hacer momentos estadisticos de la NIG
library(quantmod) #Para descargar datos
library(cramer) #Para la prueba de cramer
library(PortfolioAnalytics)
library(DEoptim)
library(tidyquant)
library(NbClust)
library(dendextend)
# Indices
indices <- read_excel("Indices_km.xlsx",
sheet = "Hoja1")
names(indices)[names(indices) == '...1'] <- 'Date'
indices <- indices[-1,]
View(indices)
indices <- format(indices$Date, format="%d,%m,%Y")
# Indices
indices <- read_excel("Indices_km.xlsx",
sheet = "Hoja1")
# Indices
indices <- read_excel("Indices_km.xlsx",
sheet = "Hoja1",
col_types = c("date",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text"))
View(indices)
names(indices)[names(indices) == '...1'] <- 'Date'
indices <- indices[-1,]
View(indices)
# Indices
indices <- read_excel("Indices_km.xlsx",
sheet = "Hoja1",
col_types = c("date",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text"))
names(indices)[names(indices) == '...1'] <- 'Date'
indices <- indices[-1,]
View(indices)
library(tidyverse)
library(readxl)
library(textshape) #"Tools for Reshaping Text". Usado en columns_to_rownames
library(broom)
library(plotly)
library(scales)
library(caTools)
library(caret)
library(cluster)
library(factoextra) #Para graficar K-Means y PCA
library(psych) #Usado por su funsión de crar matices de correlaciones de colores
library(stats) #Para hacer el PCA
library(naniar) #Para limpiar las bases de datos
library(fBasics) #Analisis estadistico
library(PerformanceAnalytics)
library(statmod)
library(knitr)
library(stargazer)
library(kableExtra)
library(ggpubr)
library(ggdist)
library(ggExtra)
library(ggbeeswarm)
library(aTSA) #Raiz Unitaria
library(tseries) #Raiz Unitaria
library(QuantPsyc) #Pruba multivariada
library(ghyp) #Para hacer momentos estadisticos de la NIG
library(quantmod) #Para descargar datos
library(cramer) #Para la prueba de cramer
library(PortfolioAnalytics)
library(DEoptim)
library(tidyquant)
library(NbClust)
library(dendextend)
indices <- read_excel("Indices_km.xlsx",
sheet = "Hoja1",
col_types = c("date",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text"))
names(indices)[names(indices) == '...1'] <- 'Date'
indices <- indices[-1,]
View(indices)
indices <- indices %>%
arrange(desc())
indices <- indices %>%
arrange(desc(Date))
tail(indices)
vis_miss(indices)
indices <- na.omit(indices)
vis_miss(indices)
tail(indices)
indices <- indices %>%
arrange(desc(Date))
column_to_rownames(indices, loc = 1)
View(indices)
indices <- column_to_rownames(indices, loc = 1)
vis_miss(indices)
indices <- indices %>%
arrange(desc(Date))
# Percent to decimal function
percent_to_decimal <- function(percent) {
percent / 100
}
# Use percent_to_decimal() on 6
percent_to_decimal(6)
# Example percentage
pct <- 8
# Use percent_to_decimal() on pct
percent_to_decimal(pct)
indices <- round(indices, digits = 2)
indices <- round(indices$AUSTRALIA, digits = 2)
class(indices$AUSTRALIA)
# Indices
indices <- read_excel("Indices_km.xlsx",
sheet = "Hoja1",
col_types = c("date",
"numeric", "numeric", "numeric", "numeric", "numeric",
"numeric", "numeric", "numeric", "numeric", "numeric",
"numeric", "numeric", "numeric", "numeric", "numeric",
"numeric", "numeric", "numeric", "numeric"))
names(indices)[names(indices) == '...1'] <- 'Date'
indices <- indices[-1,]
View(indices)
indices <- na.omit(indices)
indices <- column_to_rownames(indices, loc = 1)
indices <- round(indices, digits = 2)
indices <- indices %>%
arrange(desc(Date))
library(xts)
library(tidyverse)
library(readxl)
library(textshape) #"Tools for Reshaping Text". Usado en columns_to_rownames
library(broom)
library(plotly)
library(scales)
library(caTools)
library(caret)
library(cluster)
library(factoextra) #Para graficar K-Means y PCA
library(psych) #Usado por su funsión de crar matices de correlaciones de colores
library(stats) #Para hacer el PCA
library(naniar) #Para limpiar las bases de datos
library(fBasics) #Analisis estadistico
library(PerformanceAnalytics)
library(statmod)
library(knitr)
library(stargazer)
library(kableExtra)
library(ggpubr)
library(ggdist)
library(ggExtra)
library(ggbeeswarm)
library(aTSA) #Raiz Unitaria
library(tseries) #Raiz Unitaria
library(QuantPsyc) #Pruba multivariada
library(ghyp) #Para hacer momentos estadisticos de la NIG
library(quantmod) #Para descargar datos
library(cramer) #Para la prueba de cramer
library(PortfolioAnalytics)
library(DEoptim)
library(tidyquant)
library(NbClust)
library(dendextend)
library(xts)
library(zoo)
# Indices
indices <- read_excel("Indices_km.xlsx",
sheet = "Hoja1",
col_types = c("date",
"numeric", "numeric", "numeric", "numeric", "numeric",
"numeric", "numeric", "numeric", "numeric", "numeric",
"numeric", "numeric", "numeric", "numeric", "numeric",
"numeric", "numeric", "numeric", "numeric"))
names(indices)[names(indices) == '...1'] <- 'Date'
indices <- indices[-1,]
View(indices)
indices <- na.omit(indices)
indicesrev <- rev(indices)
View(indicesrev)
indicessrot <- sort(indices, decreasing = TRUE)
View(indicessrot)
indicessrot <- sort(indices, decreasing = TRUE)
View(indicessrot)
class(indices)
indices <- as.data.frame(indices)
class(indices)
indicessrot <- sort(indices, decreasing = TRUE)
View(indicessrot)
indices <- as.xts(indices)
# Indices
indices <- read_excel("Indices_km.xlsx",
sheet = "Hoja1",
col_types = c("date",
"numeric", "numeric", "numeric", "numeric", "numeric",
"numeric", "numeric", "numeric", "numeric", "numeric",
"numeric", "numeric", "numeric", "numeric", "numeric",
"numeric", "numeric", "numeric", "numeric"))
names(indices)[names(indices) == '...1'] <- 'Date'
indices <- indices[-1,]
View(indices)
indices <- na.omit(indices)
class(indices)
indicessrot <- sort(indices, decreasing = TRUE)
indicessrot <- sort(xtfrm.data.frame(indices), decreasing = TRUE)
class(indices)
indices <- as.data.frame(indices)
class(indices)
indicessrot <- sort(indices, decreasing = TRUE)
vis_miss(indices)
indicesrev <- rev(indices)
View(indicesrev)
# Indices
indices <- read_excel("Indices_km.xlsx",
sheet = "Hoja1",
col_types = c("date",
"numeric", "numeric", "numeric", "numeric", "numeric",
"numeric", "numeric", "numeric", "numeric", "numeric",
"numeric", "numeric", "numeric", "numeric", "numeric",
"numeric", "numeric", "numeric", "numeric"))
names(indices)[names(indices) == '...1'] <- 'Date'
indices <- indices[-1,]
indices <- na.omit(indices)
View(indices)
class(indices)
indices <- as.xts(indices)
class(indices$Date)
indices$Date <- as.POSIXct.Date(indices)
# Indices
indices <- read_excel("Indices_km.xlsx",
sheet = "Hoja1",
col_types = c("date",
"numeric", "numeric", "numeric", "numeric", "numeric",
"numeric", "numeric", "numeric", "numeric", "numeric",
"numeric", "numeric", "numeric", "numeric", "numeric",
"numeric", "numeric", "numeric", "numeric"))
names(indices)[names(indices) == '...1'] <- 'Date'
indices <- indices[-1,]
indices <- na.omit(indices)
indices <- column_to_rownames(indices, loc = 1)
indices <- round(indices, digits = 2)
View(indices)
indicessrot <- sort(indices, decreasing = TRUE)
View(indicessrot)
indicesseq <- seq.Date(indices)
tail(indices)
indicesseq <- seq.Date(indices, from="2003-01-08", to="2023-06-15")
class(indices)
indices <- as.xts(indices)
# Indices
indices <- read_excel("Indices_km.xlsx",
sheet = "Hoja1",
col_types = c("date",
"numeric", "numeric", "numeric", "numeric", "numeric",
"numeric", "numeric", "numeric", "numeric", "numeric",
"numeric", "numeric", "numeric", "numeric", "numeric",
"numeric", "numeric", "numeric", "numeric"))
names(indices)[names(indices) == '...1'] <- 'Date'
indices <- indices[-1,]
indices <- na.omit(indices)
View(indices)
class(indices)
indices <- column_to_rownames(indices, loc = 1)
indices <- round(indices, digits = 2)
indices <- as.xts(indices)
indices <- rename(indices, United States = USA)
# Creación de las Data Frames
df <- read_excel("APLHA/ALPHA_1/ALPHA_1.1/1.1.1PCA_Codes/Criterios-Unificado (Datos para PCA).xlsx")
df <- df[,-6]
df_plot <- df #Data Frame para hacer gráficas descriptivas
df <- column_to_rownames(df, loc = 1)
df_plot <- cbind(df_plot[,-5], log10(df$GDP))
colnames(df_plot)[5] = "GDP"
df <- column_to_rownames(df_plot,
loc = 1)
# Graficas descriptivas de las variables
df_plot %>%
ggplot(aes(x=GDP))+
geom_histogram(bins=100)+
geom_label(data = df_plot %>%
filter(GDP>13), aes(x=GDP,y=Country,
label=Country))
View(df_plot)
new_names <- c("United States", "Australia", "India", "Italy", "Mexico",
"Russian Federation", "Saudi Arabia", "Spain", "Canada", "China",
"France", "Germany","Japan", "Korea, Rep", "Netherlands",
"Switzerland", "United Kingdom", "Brazil", "South Africa")
colnames(indices) <- new_names
View(indices)
class(indices)
View(indices)
Equity1 <- c("^AXJO", "^ATX","^BFX","^GSPTSE","000001.SS", "^OMXT", "^OMXH25", "^FCHI",
"^FCHI", "^GDAXI", "^ISEQ", "TA35.TA", "^N225", "FBMEMAS.FGI", "^AEX", "^IBEX",
"^SSMI", "DUAE.L")
getSymbols(Equity1, from=as.Date("2018-01-01"), to=Sys.Date())
Equity1_ad <- NULL
for(i in Equity1){
assign(paste0("Ad_",i), Ad(get(i)))
Equity1_ad <- c(Equity1_ad, paste0("Ad_",i))
}
class(Equity1)
class(Equity2_Portfolio)
Serie_de_datos_el_bueno_ <- read_excel("~/Documents/GitHub/Market-Index-Portafolios/iNDICES.xlsx",
col_types = c("date", "numeric", "numeric",
"numeric", "numeric", "numeric", "numeric", "numeric"))
g1 <- Serie_de_datos_el_bueno_
colnames(g1)<-c("Fecha", "SP", "OMX30","HSI","STI","DJI","KOSPI", "DAX")
g1<-textshape::column_to_rownames(g1,loc=1)
g1 <- drop_na(g1)
retornos <- Return.calculate(g1,
method = "log")[-1,]
View(retornos)
class(retornos)
#-----Portafolios
Indices_Returns <- Return.calculate(indices)[-1,]
View(Indices_Returns)
