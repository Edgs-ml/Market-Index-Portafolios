clusters=7)
?kmeans
?subset
fviz_cluster(k_map,
data = coordinates_map)
k_map1 <- k_map_df %>%
subset(`k_map$cluster`==7)
head(k_map1)
View(k_map1)
map <- fviz_pca_ind(pca_df1,
repel = TRUE,
title=NULL)
map
names_map <- as.data.frame(map[["data"]][["name"]])
y_map <- as.data.frame(map[["data"]][["y"]])
x_map <- as.data.frame(map[["data"]][["x"]])
coordinates_map <- cbind(names_map, x_map, y_map)
colnames(coordinates_map) <- c("Country", "x","y")
row.names(coordinates_map) <- coordinates_map$Country
coordinates_map <- coordinates_map[,-1]
coordinates_map %>%
ggplot(aes(x=x, y=y))+
geom_point()+
geom_text(aes(label=names_map$`map[["data"]][["name"]]`))
fviz_nbclust(coordinates_map,
kmeans,
method = "wss",
k.max = 24)
fviz_nbclust(df1_scaled,
kmeans,
method = "gap_stat",
k.max = 30)
k_map <- kmeans(coordinates_map, 7)
fviz_cluster(k_map,
data = coordinates_map)
#List of countries by cluster
k_map_df <- as.data.frame(k_map$cluster)
k_map1 <- k_map_df %>%
arrange(`k_map$cluster`)
k_map1 <- k_map_df %>%
subset(`k_map$cluster`==7)
View(k_map1)
map <- fviz_pca_ind(pca_df1,
repel = TRUE,
title=NULL)
map
names_map <- as.data.frame(map[["data"]][["name"]])
y_map <- as.data.frame(map[["data"]][["y"]])
x_map <- as.data.frame(map[["data"]][["x"]])
coordinates_map <- cbind(names_map, x_map, y_map)
colnames(coordinates_map) <- c("Country", "x","y")
row.names(coordinates_map) <- coordinates_map$Country
coordinates_map <- coordinates_map[,-1]
coordinates_map %>%
ggplot(aes(x=x, y=y))+
geom_point()+
geom_text(aes(label=names_map$`map[["data"]][["name"]]`))
fviz_nbclust(coordinates_map,
kmeans,
method = "wss",
k.max = 24)
fviz_nbclust(df1_scaled,
kmeans,
method = "gap_stat",
k.max = 30)
k_map <- kmeans(coordinates_map, 7)
fviz_cluster(k_map,
data = coordinates_map)
#List of countries by cluster
k_map_df <- as.data.frame(k_map$cluster)
k_map1 <- k_map_df %>%
arrange(`k_map$cluster`)
k_map1 <- k_map_df %>%
subset(`k_map$cluster`==7)
head(k_map1)
# A partir del mapa hecho del PC1 y PC2 creamos un objeto para facilitar la extracción de
# sus valores
map <- fviz_pca_ind(pca_df1,
repel = TRUE,
title=NULL)
#map Es opcional ver el resultado
# Creamos un Data Frame para luego poder usar sus valores para el Kmeans
names_map <- as.data.frame(map[["data"]][["name"]])
y_map <- as.data.frame(map[["data"]][["y"]])
x_map <- as.data.frame(map[["data"]][["x"]])
coordinates_map <- cbind(names_map, x_map, y_map)
colnames(coordinates_map) <- c("Country", "x","y")
row.names(coordinates_map) <- coordinates_map$Country
coordinates_map <- coordinates_map[,-1]
coordinates_map %>%
ggplot(aes(x=x, y=y))+
geom_point()+
geom_text(aes(label=names_map$`map[["data"]][["name"]]`))
# Análisis previo del Kmeans
fviz_nbclust(coordinates_map,
kmeans,
method = "wss",
k.max = 24)
fviz_nbclust(df1_scaled,
kmeans,
method = "gap_stat",
k.max = 30)
# CORREGIR !!! PONER ARGUMENTO DE SIZE=5 PARA TENER LOS PORTAFOLIOS DE 5 PAISES
k_map <- kmeans(coordinates_map, 7)
fviz_cluster(k_map,
data = coordinates_map)
#List of countries by cluster
k_map_df <- as.data.frame(k_map$cluster)
k_map1 <- k_map_df %>%
arrange(`k_map$cluster`)
k_map1 <- k_map_df %>%
subset(`k_map$cluster`==7)
head(k_map1)
library(tidyverse)
library(readxl)
library(textshape) #"Tools for Reshaping Text". Usado en columns_to_rownames
library(broom)
library(plotly)
library(scales)
library(caTools)
library(caret)
library(cluster)
library(factoextra) #Para graficar K-Means y PCA
library(psych) #Usado por su funsión de crar matices de correlaciones de colores
library(stats) #Para hacer el PCA
library(naniar) #Para limpiar las bases de datos
library(fBasics) #Analisis estadistico
library(PerformanceAnalytics)
library(statmod)
library(knitr)
library(stargazer)
library(kableExtra)
library(ggpubr)
library(ggdist)
library(ggExtra)
library(ggbeeswarm)
df <- read_excel("APLHA/ALPHA_1/ALPHA_1.1/1.1.1PCA_Codes/Criterios-Unificado (Datos para PCA).xlsx")
df_plot <- read_excel("APLHA/ALPHA_1/ALPHA_1.1/1.1.1PCA_Codes/Criterios-Unificado (Datos para PCA).xlsx")
#df2: eliminar a China y Estados Unidos
df2 <- df %>%
subset(Country!="China" & Country!="United States")
#df: Data Frame with all variables and observations
df <- column_to_rownames(df, loc = 1)
#df1: Data frame without GDP and with all the countries
df1 <- df[,-4]
#df2: Data Frame without China and USA and with GDP
df2 <- column_to_rownames(df2, loc = 1)
kable(head(df)) #Tabla de los primero paises en Latex
library(tidyverse)
library(readxl)
library(textshape) #"Tools for Reshaping Text". Usado en columns_to_rownames
library(broom)
library(plotly)
library(scales)
library(caTools)
library(caret)
library(cluster)
library(factoextra) #Para graficar K-Means y PCA
library(psych) #Usado por su funsión de crar matices de correlaciones de colores
library(stats) #Para hacer el PCA
library(naniar) #Para limpiar las bases de datos
library(fBasics) #Analisis estadistico
library(PerformanceAnalytics)
library(statmod)
library(knitr)
library(stargazer)
library(kableExtra)
library(ggpubr)
library(ggdist)
library(ggExtra)
library(ggbeeswarm)
library(cluster)
library(factoextra) #Para graficar K-Means y PCA
library(psych)
library(stats) #Para hacer el PCA
library(naniar) #Para limpiar las bases de datos
library(fBasics) #Analisis estadistico
library(aTSA) #Raiz Unitaria
library(tseries) #Raiz Unitaria
library(PerformanceAnalytics)
library(QuantPsyc) #Pruba multivariada
library(statmod)
library(ghyp) #Para hacer momentos estadisticos de la NIG
library(quantmod) #Para descargar datos
library(cramer) #Para la prueba de cramer
df <- read_excel("APLHA/ALPHA_1/ALPHA_1.1/1.1.1PCA_Codes/Criterios-Unificado (Datos para PCA).xlsx")
df_plot <- read_excel("APLHA/ALPHA_1/ALPHA_1.1/1.1.1PCA_Codes/Criterios-Unificado (Datos para PCA).xlsx")
#df2: eliminar a China y Estados Unidos
df2 <- df %>%
subset(Country!="China" & Country!="United States")
#df: Data Frame with all variables and observations
df <- column_to_rownames(df, loc = 1)
#df1: Data frame without GDP and with all the countries
df1 <- df[,-4]
#df2: Data Frame without China and USA and with GDP
df2 <- column_to_rownames(df2, loc = 1)
kable(head(df)) #Tabla de los primero paises en Latex
library(tidyverse)
library(readxl)
library(textshape) #"Tools for Reshaping Text". Usado en columns_to_rownames
library(broom)
library(plotly)
library(scales)
library(caTools)
library(caret)
library(cluster)
library(factoextra) #Para graficar K-Means y PCA
library(psych) #Usado por su funsión de crar matices de correlaciones de colores
library(stats) #Para hacer el PCA
library(naniar) #Para limpiar las bases de datos
library(fBasics) #Analisis estadistico
library(PerformanceAnalytics)
library(statmod)
library(knitr)
library(stargazer)
library(kableExtra)
library(ggpubr)
library(ggdist)
library(ggExtra)
library(ggbeeswarm)
library(aTSA) #Raiz Unitaria
library(tseries) #Raiz Unitaria
library(QuantPsyc) #Pruba multivariada
library(ghyp) #Para hacer momentos estadisticos de la NIG
library(quantmod) #Para descargar datos
library(cramer) #Para la prueba de cramer
bxp_gdp <- df_plot %>%
ggplot(aes(x=GDP, y=0))+
geom_boxplot()+
geom_quasirandom()+
geom_label(data=df_plot %>%
filter(GDP>1.0e+13), aes(label=Country))
#vio_gdp <- df_plot %>%
#  ggplot(aes(x=GDP, y=GCI))+
#  geom_violin()+
#  geom_label(data=df_plot %>%
#               filter(GDP>1.0e+13), aes(label=Country))
hist_gdp <- df_plot %>%
ggplot(aes(x=GDP))+
geom_histogram(bins=100)+
geom_label(data = df_plot %>%
filter(GDP>1.0e+13), aes(x=GDP,y=Country,
label=Country))
#stat_desc_gdp <- kable(describe(df_plot$GDP), )
ggarrange(bxp_gdp, hist_gdp,
labels = c("Boxplot", "Histogram"),
ncol = 2,
nrow = 1)
bxp_eci <- df_plot %>%
ggplot(aes(x=ECI, y=0))+
geom_boxplot()+
geom_quasirandom()
vio_eci <- df_plot %>%
ggplot(aes(x=ECI, y=0))+
geom_violin()
ggarrange(bxp_eci, vio_eci,
labels = c("A", "B"),
ncol = 2,
nrow = 1)
bxp_edbi <- df_plot %>%
ggplot(aes(x=EDBI, y=0))+
geom_boxplot()+
geom_quasirandom()
vio_edbi <- df_plot %>%
ggplot(aes(x=EDBI, y=0))+
geom_violin()
ggarrange(bxp_edbi, vio_edbi,
labels = c("A", "B"),
ncol = 2,
nrow = 1)
bxp_gci <- df_plot %>%
ggplot(aes(x=GCI, y=0))+
geom_boxplot()+
geom_quasirandom()
vio_gci <- df_plot %>%
ggplot(aes(x=GCI, y=0))+
geom_violin()
ggarrange(bxp_gci, vio_eci,
labels = c("A", "B"),
ncol = 2,
nrow = 1)
ggarrange(bxp_eci, bxp_gci, bxp_edbi, bxp_gdp,
labels = c("ECI Boxplot", "GCI Boxplot", "EDBI Boxplot", "GDP Boxplot"),
ncol = 2,
nrow = 2)
df <- read_excel("APLHA/ALPHA_1/ALPHA_1.1/1.1.1PCA_Codes/Criterios-Unificado (Datos para PCA).xlsx")
df_plot <- read_excel("APLHA/ALPHA_1/ALPHA_1.1/1.1.1PCA_Codes/Criterios-Unificado (Datos para PCA).xlsx")
#df: Data Frame with all variables and observations
df <- column_to_rownames(df, loc = 1)
#df1: Data frame without GDP and with all the countries
df1 <- df[,-4]
#df2: Data Frame without China and USA and with GDP
df2 <- column_to_rownames(df2, loc = 1)
df <- read_excel("APLHA/ALPHA_1/ALPHA_1.1/1.1.1PCA_Codes/Criterios-Unificado (Datos para PCA).xlsx")
df_plot <- read_excel("APLHA/ALPHA_1/ALPHA_1.1/1.1.1PCA_Codes/Criterios-Unificado (Datos para PCA).xlsx")
#df: Data Frame with all variables and observations
df <- column_to_rownames(df, loc = 1)
#df1: Data frame without GDP and with all the countries
df1 <- df[,-4]
kable(head(df)) #Tabla de los primero paises en Latex
df <- read_excel("APLHA/ALPHA_1/ALPHA_1.1/1.1.1PCA_Codes/Criterios-Unificado (Datos para PCA).xlsx")
df_plot <- read_excel("APLHA/ALPHA_1/ALPHA_1.1/1.1.1PCA_Codes/Criterios-Unificado (Datos para PCA).xlsx")
#df: Data Frame with all variables and observations
df <- column_to_rownames(df, loc = 1)
#df1: Data frame without GDP and with all the countries
df1 <- df[,-4]
kable(head(df)) #Tabla de los primero paises en Latex
kable(head(df1))
View(df_plot)
df <- read_excel("APLHA/ALPHA_1/ALPHA_1.1/1.1.1PCA_Codes/Criterios-Unificado (Datos para PCA).xlsx")
#df: Data Frame with all variables and observations
df <- column_to_rownames(df, loc = 1)
#df1: Data frame without GDP and with all the countries
df1 <- df[,-4]
kable(head(df)) #Tabla de los primero paises en Latex
kable(head(df1))
describe(df)
df <- read_excel("APLHA/ALPHA_1/ALPHA_1.1/1.1.1PCA_Codes/Criterios-Unificado (Datos para PCA).xlsx")
#df: Data Frame with all variables and observations
df <- column_to_rownames(df, loc = 1)
#df1: Data frame without GDP and with all the countries
df1 <- df[,-4]
kable(head(df)) #Tabla de los primero paises en Latex
kable(head(df1))
tabledf <- describe(df)
kable(tabledf, format = "latex") %>%
kable_styling(latex_options = "scale_down", font_size = 5)
df <- read_excel("APLHA/ALPHA_1/ALPHA_1.1/1.1.1PCA_Codes/Criterios-Unificado (Datos para PCA).xlsx")
#df: Data Frame with all variables and observations
df <- column_to_rownames(df, loc = 1)
#df1: Data frame without GDP and with all the countries
df1 <- df[,-4]
kable(head(df)) #Tabla de los primero paises en Latex
kable(head(df1))
tabledf <- describe(df)
kable(tabledf, format = "latex") %>%
kable_styling(latex_options = "scale_down", font_size = 5)
tabledf1 <- describe(df1)
kable(tabledf1, format = "latex") %>%
kable_styling(latex_options = "scale_down", font_size = 5)
kable(tabledf,
caption = "Descripción Estadistica de los índicadores")
df_PC1234 <- cbind(df, pca_df$x)
df_PC1234_Descent <- df_PC1234 %>%
arrange(desc(PC1))
df1_PC123 <- cbind(df1, pca_df1$x)
df1_PC123_Descent <- df1_PC123 %>%
arrange(desc(PC1))
head(df_PC1234_Descent, 5)
Biplot_fvis_df <- fviz_pca_biplot(pca_df)
Biplot_fvis_df1 <- fviz_pca_biplot(pca_df1)
Contrib_var_fvis_df <- fviz_contrib(pca_df, choice = "var",
title = "Porcentaje de Varianza Contribuida con GDP y todas las Observaciones",
addlabels = TRUE)
Contrib_var_fvis_df1 <- fviz_contrib(pca_df1, choice = "var",
title = "Percentage of Variance contribution Without Variable GDP",
addlabels = TRUE)
Porcen_var_fvis_df <- fviz_screeplot(pca_df,
title = "4 Principal Components With USA & China",
addlabels = TRUE)
Porcen_var_fvis_df1 <- fviz_screeplot(pca_df1,
title = "3 Principal Components Without GDP",
addlabels = TRUE) # Porcentaje de la varianza explicada con el PCA1
#PCA DF
ggarrange(Contrib_var_fvis_df, Porcen_var_fvis_df, Biplot_fvis_df,
ncol = 2,
nrow = 2)
#,labels = c("Porcentaje de Varianza Contribuida con GDP y todas las Observaciones",
#                     "4 Componentes Principales con Estados Unidos y China",
#                     "Valor de Explicación del Componente Principal como Vector")
#PCA DF1
ggarrange(Contrib_var_fvis_df1, Porcen_var_fvis_df1, Biplot_fvis_df1,
ncol = 2,
nrow = 2)
#Gráfica de individuos y variables.
Biplot_fvis_df <- fviz_pca_biplot(pca_df)
Biplot_fvis_df1 <- fviz_pca_biplot(pca_df1)
#Contribución de varianza de variables y de Componentes Principales
Contrib_var_fvis_df <- fviz_contrib(pca_df, choice = "var",
title = "Porcentaje de Varianza Contribuida con GDP y todas las Observaciones",
addlabels = TRUE)
Contrib_var_fvis_df1 <- fviz_contrib(pca_df1, choice = "var",
title = "Percentage of Variance contribution Without Variable GDP",
addlabels = TRUE)
# Porcentaje de varianza explicada por cada Componente Principal
Porcen_var_fvis_df <- fviz_screeplot(pca_df,
title = "4 Principal Components With USA & China",
addlabels = TRUE)
Porcen_var_fvis_df1 <- fviz_screeplot(pca_df1,
title = "3 Principal Components Without GDP",
addlabels = TRUE) # Porcentaje de la varianza explicada con el PCA1
#PCA DF
ggarrange(Contrib_var_fvis_df, Porcen_var_fvis_df, Biplot_fvis_df,
ncol = 2,
nrow = 2)
#,labels = c("Porcentaje de Varianza Contribuida con GDP y todas las Observaciones",
#                     "4 Componentes Principales con Estados Unidos y China",
#                     "Valor de Explicación del Componente Principal como Vector")
#PCA DF1
ggarrange(Contrib_var_fvis_df1, Porcen_var_fvis_df1, Biplot_fvis_df1,
ncol = 2,
nrow = 2)
# A partir del mapa hecho del PC1 y PC2 creamos un objeto para facilitar la extracción de
# sus valores
map <- fviz_pca_ind(pca_df1,
repel = TRUE,
title=NULL)
#map Es opcional ver el resultado
# Creamos un Data Frame para luego poder usar sus valores para el Kmeans
names_map <- as.data.frame(map[["data"]][["name"]])
y_map <- as.data.frame(map[["data"]][["y"]])
x_map <- as.data.frame(map[["data"]][["x"]])
coordinates_map <- cbind(names_map, x_map, y_map)
colnames(coordinates_map) <- c("Country", "x","y")
row.names(coordinates_map) <- coordinates_map$Country
coordinates_map <- coordinates_map[,-1]
coordinates_map %>%
ggplot(aes(x=x, y=y))+
geom_point()+
geom_text(aes(label=names_map$`map[["data"]][["name"]]`))
# Análisis previo del Kmeans
fviz_nbclust(coordinates_map,
kmeans,
method = "wss",
k.max = 24)
fviz_nbclust(df1_scaled,
kmeans,
method = "gap_stat",
k.max = 30)
# CORREGIR !!! PONER ARGUMENTO DE SIZE=5 PARA TENER LOS PORTAFOLIOS DE 5 PAISES
k_map <- kmeans(coordinates_map, 7)
fviz_cluster(k_map,
data = coordinates_map)
#List of countries by cluster
k_map_df <- as.data.frame(k_map$cluster)
k_map1 <- k_map_df %>%
arrange(`k_map$cluster`)
k_map1 <- k_map_df %>%
subset(`k_map$cluster`==6)
head(k_map1)
View(k_map1)
# ESTA ES LA GRÁFICA QUE NO TIENE SENTIDO
plot(density(retornos$SP),
col="red",
ylim=c(0,60),
main="Distribuciones contra normal")+
lines(density(retornos$OMX30),
col="green",
ylim=c(0,60))+
lines(density(retornos$HSI),
col="blue",
ylim=c(0,60))+
lines(density(retornos$STI),
col="orange",
ylim=c(0,60))+
lines(density(retornos$DJI),
col="pink",
ylim=c(0,60)+
lines(density(retornos$KOSPI),
col="purple",
ylim=c(0,60))+
lines(density(retornos$DAX),
col="brown",
ylim=c(0,60)))
mult.norm(retornos)$mult.test
library(QuantPsyc)
mult.norm(retornos)$mult.test
k_map <- kmeans(coordinates_map, size=5)
library(cluster)
k_map <- kmeans(coordinates_map, 10)
fviz_cluster(k_map,
data = coordinates_map)
library(tidyverse)
library(readxl)
library(textshape) #"Tools for Reshaping Text". Usado en columns_to_rownames
library(broom)
library(plotly)
library(scales)
library(caTools)
library(caret)
library(cluster)
library(factoextra) #Para graficar K-Means y PCA
library(psych) #Usado por su funsión de crar matices de correlaciones de colores
library(stats) #Para hacer el PCA
library(naniar) #Para limpiar las bases de datos
library(fBasics) #Analisis estadistico
library(PerformanceAnalytics)
library(statmod)
library(knitr)
library(stargazer)
library(kableExtra)
library(ggpubr)
library(ggdist)
library(ggExtra)
library(ggbeeswarm)
library(aTSA) #Raiz Unitaria
library(tseries) #Raiz Unitaria
library(QuantPsyc) #Pruba multivariada
library(ghyp) #Para hacer momentos estadisticos de la NIG
library(quantmod) #Para descargar datos
library(cramer) #Para la prueba de cramer
k_map <- kmeans(coordinates_map, 10)
fviz_cluster(k_map,
data = coordinates_map)
k_map_df <- as.data.frame(k_map$cluster)
k_map1 <- k_map_df %>%
arrange(`k_map$cluster`)
k_map1 <- k_map_df %>%
subset(`k_map$cluster`==8)
View(k_map1)
fviz_cluster(k_map,
data = coordinates_map)
