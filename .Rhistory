DJI <- Ad(DJI)
View(DJI)
Symbols_ad <- NULL
for(i in portafolio_df1){
assign(paste0("Ad_", i), Ad(get(i)))
Symbols_ad <- c(Symbols_ad, paste0("Ad_",i))
}
library(quantmod)
library(PerformanceAnalytics)
library(PortfolioAnalytics)
library(DEoptim)
library(readxl)
library(fBasics)
library(ghyp)
g1<- read_excel("D:/JL/Market-Index-Portafolios/APLHA/ALPHA 1/ALPHA 1.2/1.2.4 Optimizaci?n/Optimizacion NIG alpha 1.2.xlsx",
sheet = "Datos")
library(readxl)
Optimizacion_NIG_alpha_1_2 <- read_excel("APLHA/ALPHA 1/ALPHA 1.2/1.2.4 Optimización/Optimizacion NIG alpha 1.2.xlsx")
View(Optimizacion_NIG_alpha_1_2)
g1 <- Optimizacion_NIG_alpha_1_2
colnames(g1)<-c("Fecha","SPX",	"OMXC",	"FTSE","KOSPI","MSCI")
SPX<-xts(g1$SPX,as.Date(g1$Fecha))
OMXC<-xts(g1$OMXC,as.Date(g1$Fecha))
FTSE<-xts(g1$FTSE,as.Date(g1$Fecha))
KOSPI<-xts(g1$KOSPI,as.Date(g1$Fecha))
MSCI<-xts(g1$MSCI,as.Date(g1$Fecha))
Portafolio_NIG_A1.2<-merge.xts(SPX,OMXC,FTSE,KOSPI,MSCI)
View(g1)
g1 <- g1[-:7]
g1 <- g1[-,7]
g1 <- g1[,-7]
View(g1)
SPX<-xts(g1$SPX,as.Date(g1$Fecha))
g1 <- na.omit(g1)
SPX<-xts(g1$SPX,as.Date(g1$Fecha))
View(g1)
OMXC<-xts(g1$OMXC,as.Date(g1$Fecha))
FTSE<-xts(g1$FTSE,as.Date(g1$Fecha))
KOSPI<-xts(g1$KOSPI,as.Date(g1$Fecha))
MSCI<-xts(g1$MSCI,as.Date(g1$Fecha))
Portafolio_NIG_A1.2<-merge.xts(SPX,OMXC,FTSE,KOSPI,MSCI)
View(Portafolio_NIG_A1.2)
Specs_Port_NIG_A1.2 <- portfolio.spec(c("SPX",	"OMXC",	"FTSE","KOSPI","MSCI"))
##### Add Constraints #####
Specs_Port_NIG_A1.2 <- add.constraint(Specs_Port_NIG_A1.2,type="full_investment")
Specs_Port_NIG_A1.2 <- add.constraint(Specs_Port_NIG_A1.2,
type="long_only")
##### Add Objective #####
Specs_Port_NIG_A1.2 <- add.objective(Specs_Port_NIG_A1.2,
type="risk",
name="StdDev")
Specs_Port_NIG_A1.2 <- add.objective(Specs_Port_NIG_A1.2,
type='return',
name='mean')
Specs_Port_NIG_A1.2
covnig<-function(R,portfolio){
a<-fit.NIGmv(R,silent=TRUE)
COV<-a@variance
mu<-a@expected.value
mu<-matrix(mu,ncol = 1)
resultado<-list(mu=mu,sigma=COV)
return(resultado)
}
Optimized_Port_NIG_A1.2 <- optimize.portfolio(Portafolio_NIG_A1.2,
Specs_Port_NIG_A1.2,
momentFUN = covnig,
optimize_method = "random",
trace = TRUE)
chart.Weights(Optimized_Port_NIG_A1.2,plot.type = "barplot")
W_R <- extractWeights(Optimized_Port_NIG_A1.2)
sum(W_R)
Return_opt_NIG_A1.2 <- Return.portfolio(Portafolio_NIG_A1.2,W_R)
table.AnnualizedReturns(Return_opt_NIG_A1.2,
scale = 252,
geometric = FALSE)
Return.cumulative(Return_opt_NIG_A1.2,
geometric = FALSE)
chart.RiskReward(Optimized_Port_NIG_A1.2,
risk.col = 'StdDev',
return.col = 'mean',
chart.assets = T)
g1<- read_excel("D:/JL/Market-Index-Portafolios/APLHA/ALPHA 1/ALPHA 1.2/1.2.4 Optimizaci?n/Optimizacion NIG alpha 1.2.xlsx",
sheet = "Datos")
library(readxl)
Optimizacion_NIG_alpha_1_2 <- read_excel("APLHA/ALPHA 1/ALPHA 1.2/1.2.4 Optimización/Optimizacion NIG alpha 1.2.xlsx")
View(Optimizacion_NIG_alpha_1_2)
g1 <- Optimizacion_NIG_alpha_1_2
colnames(g1)<-c("Fecha","SPX",	"OMXC",	"FTSE","KOSPI","MSCI")
g1 <- g1[,-7]
g1 <- na.omit(g1)
SPX<-xts(g1$SPX,as.Date(g1$Fecha))
OMXC<-xts(g1$OMXC,as.Date(g1$Fecha))
FTSE<-xts(g1$FTSE,as.Date(g1$Fecha))
KOSPI<-xts(g1$KOSPI,as.Date(g1$Fecha))
MSCI<-xts(g1$MSCI,as.Date(g1$Fecha))
Portafolio_NORM_A1.2<-merge.xts(SPX,OMXC,FTSE,KOSPI,MSCI)
Specs_Port_NORM_A1.2 <- portfolio.spec(c("SPX",	"OMXC",	"FTSE",	"KOSPI",	"MSCI"))
##### Add Constraints #####
Specs_Port_NORM_A1.2 <- add.constraint(Specs_Port_NORM_A1.2,type="full_investment")
Specs_Port_NORM_A1.2 <- add.constraint(Specs_Port_NORM_A1.2,type="long_only")
##### Add Objective #####
Specs_Port_NORM_A1.2 <- add.objective(Specs_Port_NORM_A1.2,type="risk",name="StdDev")
Specs_Port_NORM_A1.2 <- add.objective(Specs_Port_NORM_A1.2,type='return',name='mean')
Specs_Port_NORM_A1.2
Optimized_Port_NORM_A1.2 <- optimize.portfolio(Portafolio_NORM_A1.2,
Specs_Port_NORM_A1.2,
optimize_method = "random",
trace = TRUE)
chart.Weights(Optimized_Port_NORM_A1.2,plot.type="barplot")
W_R_NORM_A1.2 <- extractWeights(Optimized_Port_NORM_A1.2)
sum(W_R_NORM_A1.2)
Return_opt_NORM_A1.2 <- Return.portfolio(Portafolio_NORM_A1.2,
W_R_NORM_A1.2)
table.AnnualizedReturns(Return_opt_NORM_A1.2,
scale = 252,
geometric = FALSE)
Return.cumulative(Return_opt_NORM_A1.2,
geometric = FALSE)
chart.RiskReward(Optimized_Port_NORM_A1.2,
risk.col = 'StdDev',
return.col = 'mean',
chart.assets = T)
View(g1)
colnames(g1)<-c("Fecha","DJI","HSI","OMX20","STI","FTSE")
g1 %>%
vis_miss()
library(tidyverse)
g1 %>%
vis_miss()
library(naniar)
g1 %>%
vis_miss()
g1 <- g1 %>%
drop_na()
rendimientos <- xts(g1[,2:6], order.by = as.Date(g1$Fecha))
View(rendimientos)
#------------- Creación de portafolio
Specs_Port <- portfolio.spec(c("DJI",	"HSI",	"OMX20",	"STI",	"FTSE"))
##### Add Constraints #####
Specs_Port <- add.constraint(Specs_Port,type="full_investment")
Specs_Port <- add.constraint(Specs_Port,type="long_only")
##### Add Objective #####
Specs_Port <- add.objective(Specs_Port,type="risk",name="StdDev")
Specs_Port <- add.objective(Specs_Port,type='return',name='mean')
Specs_Port
Optimized_Port_Normal <- optimize.portfolio(rendimientos,
Specs_Port,
optimize_method = "random",
trace = TRUE)
covnig<-function(R,portfolio){
a<-fit.NIGmv(R,silent=TRUE)
COV<-a@variance
mu<-a@expected.value
mu<-matrix(mu,ncol = 1)
resultado<-list(mu=mu,sigma=COV)
return(resultado)
}
Optimized_Port_NIG <- optimize.portfolio(rendimientos,
Specs_Port,
momentFUN = covnig,
optimize_method = "random",
trace = TRUE)
#--------------
#-------------- Análisis de portafolios
chart.Weights(Optimized_Port_Normal, plot.type = "barplot")
#--------------
#-------------- Análisis de portafolios
chart.Weights(Optimized_Port_Normal, plot.type = "barplot")
#--------------
#-------------- Análisis de portafolios
chart.Weights(Optimized_Port_Normal, plot.type = "barplot")
chart.Weights(Optimized_Port_Normal, plot.type = "barplot")
W_R_Normal <- extractWeights(Optimized_Port_Normal)
W_R_Normal
sum(W_R_Normal)
chart.Weights(Optimized_Port_NIG, plot.type = "barplot")
W_R_NIG <- extractWeights(Optimized_Port_NIG)
W_R_NIG
sum(W_R_NIG)
Return_Port_Normal <- Return.portfolio(rendimientos, W_R_Normal)
table.AnnualizedReturns(Return_Port_Normal,
scale = 252,
geometric = FALSE)
Return.cumulative(Return_Port_Normal,
geometric = FALSE)
chart.RiskReward(Optimized_Port_Normal,
risk.col = 'StdDev',
return.col = 'mean',
chart.assets = TRUE)
Return_Port_NIG <- Return.portfolio(rendimientos, W_R_NIG)
table.AnnualizedReturns(Return_Port_NIG,
scale = 252,
geometric = FALSE)
Return.cumulative(Return_Port_NIG,
geometric = FALSE)
chart.RiskReward(Optimized_Port_NIG,
risk.col = 'StdDev',
return.col = 'mean',
chart.assets = TRUE)
#--------------Graficas comparativas
rand <- Optimized_Port1$random_portfolios
Optimized_Port1
library(quantmod)
library(PerformanceAnalytics)
library(PortfolioAnalytics)
library(DEoptim)
library(readxl)
library(fBasics)
library(ghyp)
library(naniar)
library(tidyverse)
View(g1)
library(readxl)
Optimizacion_NIG_alpha_1_2 <- read_excel("APLHA/ALPHA_1/Data-ALPHA1/Optimizacion_NIG_alpha_1.2.xlsx")
View(Optimizacion_NIG_alpha_1_2)
g1 <- Optimizacion_NIG_alpha_1_2
View(g1)
colnames(g1)<-c("Fecha","DJI","HSI","OMX20","STI","FTSE")
View(g1)
g1 %>%
vis_miss()
library(quantmod)
library(PerformanceAnalytics)
library(PortfolioAnalytics)
library(DEoptim)
library(readxl)
library(fBasics)
library(ghyp)
library(naniar)
library(tidyverse)
g1 %>%
vis_miss()
View(g1)
g1 <- g1[,-7]
View(g1)
g1 %>%
vis_miss()
g1 <- g1 %>%
drop_na()
g1 %>%
vis_miss()
rendimientos <- xts(g1[,2:6], order.by = as.Date(g1$Fecha))
View(rendimientos)
#------------- Creación de portafolio
Specs_Port <- portfolio.spec(c("DJI",	"HSI",	"OMX20",	"STI",	"FTSE"))
##### Add Constraints #####
Specs_Port <- add.constraint(Specs_Port,type="full_investment")
Specs_Port <- add.constraint(Specs_Port,type="long_only")
##### Add Objective #####
Specs_Port <- add.objective(Specs_Port,type="risk",name="StdDev")
Specs_Port <- add.objective(Specs_Port,type='return',name='mean')
Specs_Port
Optimized_Port_Normal <- optimize.portfolio(rendimientos,
Specs_Port,
optimize_method = "random",
trace = TRUE)
covnig<-function(R,portfolio){
a<-fit.NIGmv(R,silent=TRUE)
COV<-a@variance
mu<-a@expected.value
mu<-matrix(mu,ncol = 1)
resultado<-list(mu=mu,sigma=COV)
return(resultado)
}
Optimized_Port_NIG <- optimize.portfolio(rendimientos,
Specs_Port,
momentFUN = covnig,
optimize_method = "random",
trace = TRUE)
#--------------
#-------------- Análisis de portafolios
chart.Weights(Optimized_Port_Normal, plot.type = "barplot")
#--------------
#-------------- Análisis de portafolios
chart.Weights(Optimized_Port_Normal, plot.type = "barplot")
chart.Weights(Optimized_Port_Normal, plot.type = "barplot")
W_R_Normal <- extractWeights(Optimized_Port_Normal)
W_R_Normal
sum(W_R_Normal)
chart.Weights(Optimized_Port_NIG, plot.type = "barplot")
W_R_NIG <- extractWeights(Optimized_Port_NIG)
W_R_NIG
sum(W_R_NIG)
Return_Port_Normal <- Return.portfolio(rendimientos, W_R_Normal)
table.AnnualizedReturns(Return_Port_Normal,
scale = 252,
geometric = FALSE)
Return.cumulative(Return_Port_Normal,
geometric = FALSE)
chart.RiskReward(Optimized_Port_Normal,
risk.col = 'StdDev',
return.col = 'mean',
chart.assets = TRUE)
Return_Port_NIG <- Return.portfolio(rendimientos, W_R_NIG)
table.AnnualizedReturns(Return_Port_NIG,
scale = 252,
geometric = FALSE)
Return.cumulative(Return_Port_NIG,
geometric = FALSE)
chart.RiskReward(Optimized_Port_NIG,
risk.col = 'StdDev',
return.col = 'mean',
chart.assets = TRUE)
rand <- Optimized_Port1$random_portfolios
rand <- Optimized_Port_NIG$random_portfolios
View(rand)
fronteraNorm %>%
ggplot(aes(x=Volatility, y=Expected_Return))+
geom_point(alpha=0.5, col="pink")+
geom_point(data=tibble(Volatility = Optimized_Port_Normal$objective_measures$StdDev,
Expected_Return = Optimized_Port_Normal$objective_measures$mean),
col="red", size=3)+
geom_point(data=fronteraNIG, aes(x=Volatility, y=Expected_Return), alpha=0.2, col="blue")+
geom_point(data=tibble(Volatility = Optimized_Port_NIG$objective_measures$StdDev,
Expected_Return = Optimized_Port_NIG$objective_measures$mean),
alpha=1, col="darkgreen", size=3)
#--------
mediasNORM <- NULL
standDevNORM <- NULL
for (i in 1:1682) {
mediasNORM[i] <- Optimized_Port_Normal$random_portfolio_objective_results[[i]]$objective_measures$mean
standDevNORM[i] <- Optimized_Port_Normal$random_portfolio_objective_results[[i]]$objective_measures$StdDev
}
mediasNIG <- NULL
standDeviNIG <- NULL
for (i in 1:1768) {
mediasNIG[i] <- Optimized_Port_NIG$random_portfolio_objective_results[[i]]$objective_measures$mean
standDeviNIG[i] <- Optimized_Port_NIG$random_portfolio_objective_results[[i]]$objective_measures$StdDev
}
#-------- Fronteras
fronteraNorm <- tibble(Volatility = standDevNORM, Expected_Return = mediasNORM)
fronteraNorm <- tibble(Volatility = standDevNORM, Expected_Return = mediasNORM)
fronteraNIG <- tibble(Volatility = standDeviNIG, Expected_Return = mediasNIG)
fronteraNorm %>%
ggplot(aes(x=Volatility, y=Expected_Return))+
geom_point(alpha=0.5, col="pink")+
geom_point(data=tibble(Volatility = Optimized_Port_Normal$objective_measures$StdDev,
Expected_Return = Optimized_Port_Normal$objective_measures$mean),
col="red", size=3)+
geom_point(data=fronteraNIG, aes(x=Volatility, y=Expected_Return), alpha=0.2, col="blue")+
geom_point(data=tibble(Volatility = Optimized_Port_NIG$objective_measures$StdDev,
Expected_Return = Optimized_Port_NIG$objective_measures$mean),
alpha=1, col="darkgreen", size=3)
library(tidyverse)
library(readxl)
library(textshape) #"Tools for Reshaping Text". Usado en columns_to_rownames
library(broom)
library(plotly)
library(scales)
library(caTools)
library(caret)
library(cluster)
library(factoextra) #Para graficar K-Means y PCA
library(psych) #Usado por su funsión de crar matices de correlaciones de colores
library(stats) #Para hacer el PCA
library(naniar) #Para limpiar las bases de datos
library(fBasics) #Analisis estadistico
library(PerformanceAnalytics)
library(statmod)
library(knitr)
df <- read_excel("~/Desktop/Market Index Portfolios/Bases de Datos/Criterios-Unificado.xlsx")
df <- column_to_rownames(df, loc = 1)
# Data Frame with all variables and observations
describe(df)
df1 <- df[,-4]
df2 <- subset(df, Country!="China" & Country!="United States")
View(df1)
View(df2)
View(df)
df <- read_excel("~/Desktop/Market Index Portfolios/Bases de Datos/Criterios-Unificado.xlsx")
# Data Frame with all variables and observations
describe(df)
View(df)
df2 <- df %>%
subset(df, Country!="China" & Country!="United States")
df2 <- df %>%
subset(Country!="China" & Country!="United States")
View(df2)
#df: Data Frame with all variables and observations
df <- column_to_rownames(df, loc = 1)
describe(df)
#---------------------------
#df1: Data Frame without GDP and with USA and China
df1 <- df[,-4]
View(df)
View(df1)
View(df2)
df2 <- column_to_rownames(df2, loc = 1)
View(df2)
describe(df,
df1,
df2)
describe(df)
describe(df2)
describe(df1)
cor.plot(df)
cor.plot(df1)
cor.plot(df2)
cor.plot(df2)
cor.plot(df1)
cor.plot(df)
pca_df <- prcomp(df)
summary(pca_df)
pca_df1 <- prcomp(df1)
summary(pca_df1)
pca_df2 <- prcomp(df2)
summary(pca_df2)
pca_df2 %>%
kable(summary)
kable(summary(pca_df2))
summary_pca_df2 <- summary(pca_df2))
summary_pca_df2 <- summary(pca_df2)
summary_pca_df2 %>%
kable()
summary_pca_df2 <- as.data.frame(summary_pca_df2)
summary(pca_df2)
df_PC1234 <- cbind(df, pca_df$x)
df_PC1234_Descent <- df_PC1234 %>%
arrange(desc(PC1))
View(df_PC1234)
View(df_PC1234_Descent)
df_PC1234 <- cbind(df, pca_df$x)
df_PC1234_Descent <- df_PC1234 %>%
arrange(desc(PC1))
df1_PC123 <- cbind(df1, pca_df1$x)
df1_PC123_Descent <- df1_PC123 %>%
arrange(desc(PC1))
df2_PC1234 <- cbind(df2, pca_df2$x)
df2_PC1234_Descent <- df2_PC1234 %>%
arrange(desc(PC1))
fviz_pca_ind(pca_df,
repel = TRUE,
title = "Place of each country in a PC1 and PC2 Map [With GDP]")
fviz_pca_ind(pca_df1,
repel = TRUE,
title = "Place of each country in a PC1 and PC2 Map [Without GDP]")
fviz_pca_ind(pca_df2,
repel = TRUE,
title = "Place of each country [With GDP and without USA & China]")
fviz_pca_biplot(pca_df)
fviz_pca_biplot(pca_df1)
fviz_pca_biplot(pca_df2)
fviz_contrib(pca_df, choice = "var",
title = "Percentage of Variance contribution With Variable GDP",
addlabels = TRUE)
fviz_contrib(pca_df1, choice = "var",
title = "Percentage of Variance contribution Without Variable GDP",
addlabels = TRUE)
fviz_contrib(pca_df2, choice = "var",
title = "With Variable GDP and without USA & China",
addlabels = TRUE)
fviz_screeplot(pca_df,
title = "4 Principal Components With USA & China",
addlabels = TRUE)
fviz_eig(pca_df, choice = "eigenvalue",
addlabels = TRUE,
title = "e")
cor.plot(df_PC1234)
cor.plot(df1_PC123)
cor.plot(df2_PC1234)
fviz_eig(pca_df1, choice = "eigenvalue",
addlabels = TRUE,
title = "e")
fviz_eig(pca_df2, choice = "eigenvalue",
addlabels = TRUE,
title = "e")
fviz_screeplot(pca_df1,
title = "3 Principal Components Without GDP",
addlabels = TRUE) # Porcentaje de la varianza explicada con el PCA1
fviz_screeplot(pca_df2,
title = "4 Principal Components Without USA & China",
addlabels = TRUE)
map <- fviz_pca_ind(pca_df1)
map
Kdf1_Descent = subset(df1_PC123_Descent, select = c("PC1","PC2", "PC3"))
head(Kdf1_Descent, 5)
df1_scaled <- scale(df1_PC123_Descent)
set.seed(123)
fviz_nbclust(df1_scaled,
kmeans,
method = "wss",
k.max = 24)
fviz_nbclust(df1_scaled,
kmeans,
method = "gap_stat",
k.max = 30)
#calculate gap statistic based on number of clusters
gap_stat <- clusGap(df1_scaled,
FUN = kmeans,
nstart = 25,
K.max = 30,
B = 50)
km <- kmeans(Kdf1_Descent, centers = 4, iter.max = 20, nstart = 20)
fviz_cluster(km, data = Kdf1_Descent)#Grafica K means
library(cluster)
library(factoextra) #Para graficar K-Means y PCA
library(psych)
library(stats) #Para hacer el PCA
library(naniar) #Para limpiar las bases de datos
library(fBasics) #Analisis estadistico
library(aTSA) #Raiz Unitaria
library(tseries) #Raiz Unitaria
library(PerformanceAnalytics)
library(QuantPsyc) #Pruba multivariada
library(statmod)
library(ghyp)
library(quantmod)
library(cramer) #Para la prueba de cramer
portafolio_df1 <- c("^DJI","^HSI","^OMX20","^STI","^FTSE")
getSymbols(portafolio_df1, from=as.Date("2001-01-01"), to=Sys.Date())
portafolio_df1 <- c("^DJI","^HSI","^OMX20","^STI","^FTSE")
getSymbols(portafolio_df1, from=as.Date("2001-01-01"), to=Sys.Date())
