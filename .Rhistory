pca_df$clusters
#Gráfica de individuos y variables.
Biplot_fvis_df <- fviz_pca_biplot(pca_df)
Biplot_fvis_df1 <- fviz_pca_biplot(pca_df1)
#Contribución de varianza de variables y de Componentes Principales
Contrib_var_fvis_df <- fviz_contrib(pca_df, choice = "var",
title = "Porcentaje de Varianza Contribuida con GDP y todas las Observaciones",
addlabels = TRUE)
Contrib_var_fvis_df1 <- fviz_contrib(pca_df1, choice = "var",
title = "Percentage of Variance contribution Without Variable GDP",
addlabels = TRUE)
# Porcentaje de varianza explicada por cada Componente Principal
Porcen_var_fvis_df <- fviz_screeplot(pca_df,
title = "4 Principal Components With USA & China",
addlabels = TRUE)
Porcen_var_fvis_df1 <- fviz_screeplot(pca_df1,
title = "3 Principal Components Without GDP",
addlabels = TRUE) # Porcentaje de la varianza explicada con el PCA1
#PCA DF
ggarrange(Contrib_var_fvis_df, Porcen_var_fvis_df, Biplot_fvis_df,
ncol = 2,
nrow = 2)
#,labels = c("Porcentaje de Varianza Contribuida con GDP y todas las Observaciones",
#                     "4 Componentes Principales con Estados Unidos y China",
#                     "Valor de Explicación del Componente Principal como Vector")
#PCA DF1
ggarrange(Contrib_var_fvis_df1, Porcen_var_fvis_df1, Biplot_fvis_df1,
ncol = 2,
nrow = 2)
View(df_PC1234)
cor.plot(df_PC1234)
cor.plot(df1_PC123)
# A partir del mapa hecho del PC1 y PC2 creamos un objeto para facilitar la extracción de
# sus valores
map <- fviz_pca_ind(pca_df1,
repel = TRUE,
title=NULL)
#map Es opcional ver el resultado
# Creamos un Data Frame para luego poder usar sus valores para el Kmeans
names_map <- as.data.frame(map[["data"]][["name"]])
y_map <- as.data.frame(map[["data"]][["y"]])
x_map <- as.data.frame(map[["data"]][["x"]])
coordinates_map <- cbind(names_map, x_map, y_map)
colnames(coordinates_map) <- c("Country", "x","y")
row.names(coordinates_map) <- coordinates_map$Country
coordinates_map <- coordinates_map[,-1]
coordinates_map %>%
ggplot(aes(x=x, y=y))+
geom_point()+
geom_text(aes(label=names_map$`map[["data"]][["name"]]`))
k_map <- kmeans(coordinates_map, 4)
fviz_cluster(k_map,
data = coordinates_map)
#List of countries by cluster
k_map_df <- as.data.frame(k_map$cluster)
k_map1 <- k_map_df %>%
arrange(`k_map$cluster`) %>%
subset(`k_map$cluster`==2)
View(k_map1)
k_map <- kmeans(coordinates_map, 4)
fviz_cluster(k_map,
data = coordinates_map)
k_map <- kmeans(coordinates_map, 5)
fviz_cluster(k_map,
data = coordinates_map)
k_map_df <- as.data.frame(k_map$cluster)
k_map_df <- as.data.frame(k_map$cluster)%>%
arrange(`k_map$cluster`) %>%
subset(`k_map$cluster`==2)
View(k_map_df)
fviz_cluster(k_map,
data = coordinates_map)
k_map <- kmeans(coordinates_map, 5)
fviz_cluster(k_map,
data = coordinates_map)
#List of countries by cluster
k_map_df <- as.data.frame(k_map$cluster)%>%
arrange(`k_map$cluster`) %>%
subset(`k_map$cluster`==3)
View(k_map_df)
k_map_clusters3 <- cbind(coordinates_map,
cluster = k_map_df$`k_map$cluster`) %>%
subset(cluster==3)
k_map_clusters3 <- cbind(coordinates_map,
cluster = k_map_df$`k_map$cluster`)
View(coordinates_map)
k_map <- kmeans(coordinates_map, 5)
fviz_cluster(k_map,
data = coordinates_map)
#List of countries by cluster
k_map_df <- as.data.frame(k_map$cluster)%>%
arrange(`k_map$cluster`)
k_map_df_C3 <- k_map_df  %>%
subset(`k_map$cluster`==3)
View(k_map_df)
View(k_map_df_C3)
k_map <- kmeans(coordinates_map, 5)
fviz_cluster(k_map,
data = coordinates_map)
k_map_df <- as.data.frame(k_map$cluster) %>%
arrange(`k_map$cluster`)
View(k_map_df)
k_map_df_C3 <- k_map_df  %>%
subset(`k_map$cluster`==3)
View(k_map_df_C3)
fviz_cluster(k_map,
data = coordinates_map)
k_map_df_C2 <- k_map_df  %>%
subset(`k_map$cluster`==2)
View(k_map_df_C2)
fviz_cluster(k_map,
data = coordinates_map)
k_map_clusters3 <- cbind(coordinates_map,
cluster = k_map_df$`k_map$cluster`)
View(k_map_clusters3)
k_map <- kmeans(coordinates_map, 5)
fviz_cluster(k_map,
data = coordinates_map)
k_map_df <- as.data.frame(k_map$cluster)
View(k_map_df)
k_map_df_C1 <- k_map_df  %>%
subset(`k_map$cluster`==1)
View(k_map_df_C1)
fviz_cluster(k_map,
data = coordinates_map)
k_map_clusters3 <- cbind(coordinates_map,
cluster = k_map_df$`k_map$cluster`) %>%
subset(cluster==1)
View(k_map_clusters3)
k_map_clusters3 <- k_map_clusters3[,-3]
fviz_nbclust(k_map_clusters3,
kmeans,
method = "wss",
k.max = 24)
fviz_nbclust(k_map_clusters3,
kmeans,
method = "gap_stat",
k.max = 24,
print.summary=TRUE)
k_map2 <- kmeans(k_map_clusters3, 2)
fviz_cluster(k_map2,
data = k_map_clusters3)
k_map_df2 <- as.data.frame(k_map2$cluster)
View(k_map_df2)
k_map_clusters3.1 <- cbind(k_map_clusters3, k_map_df2$`k_map2$cluster`)
View(k_map_clusters3.1)
fviz_cluster(k_map2,
data = k_map_clusters3)
k_map_clusters3.1 <- cbind(k_map_clusters3, k_map_df2$`k_map2$cluster`) %>%
subset(`k_map_df2$\`k_map2$cluster\``==2)
k_map_clusters3.1 <- k_map_clusters3.1[,-3]
fviz_cluster(k_map2,
data = k_map_clusters3)
k_mapUltimos <- kmeans(k_map_clusters3.1, 2)
fviz_cluster(k_mapUltimos,
data = k_map_clusters3.1)
k_mapUltimos <- kmeans(k_map_clusters3.1, 3)
fviz_cluster(k_mapUltimos,
data = k_map_clusters3.1)
k_mapUltimos <- kmeans(k_map_clusters3.1, 2)
fviz_cluster(k_mapUltimos,
data = k_map_clusters3.1)
k_map2 <- kmeans(k_map_clusters3, 3)
fviz_cluster(k_map2,
data = k_map_clusters3)
library(tidyverse)
library(readxl)
library(textshape) #"Tools for Reshaping Text". Usado en columns_to_rownames
library(broom)
library(plotly)
library(scales)
library(caTools)
library(caret)
library(cluster)
library(factoextra) #Para graficar K-Means y PCA
library(psych) #Usado por su funsión de crar matices de correlaciones de colores
library(stats) #Para hacer el PCA
library(naniar) #Para limpiar las bases de datos
library(fBasics) #Analisis estadistico
library(PerformanceAnalytics)
library(statmod)
library(knitr)
library(stargazer)
library(kableExtra)
library(ggpubr)
library(ggdist)
library(ggExtra)
library(ggbeeswarm)
library(aTSA) #Raiz Unitaria
library(tseries) #Raiz Unitaria
library(QuantPsyc) #Pruba multivariada
library(ghyp) #Para hacer momentos estadisticos de la NIG
library(quantmod) #Para descargar datos
library(cramer) #Para la prueba de cramer
library(PortfolioAnalytics)
library(DEoptim)
library(tidyquant)
df <- read_excel("APLHA/ALPHA_1/ALPHA_1.1/1.1.1PCA_Codes/Criterios-Unificado (Datos para PCA).xlsx")
#df: Data Frame with all variables and observations
df <- column_to_rownames(df, loc = 1)
df <- df[,-5]
#df1: Data frame without GDP and with all the countries
df1 <- df[,-4]
kable(head(df)) #Tabla de los primero paises en Latex
kable(head(df1))
tabledf <- describe(df)
kable(tabledf, format = "latex") %>%
kable_styling(latex_options = "scale_down", font_size = 5)
tabledf1 <- describe(df1)
kable(tabledf1, format = "latex") %>%
kable_styling(latex_options = "scale_down", font_size = 5)
kable(tabledf,
caption = "Descripción Estadistica de los índicadores")
df <- read_excel("APLHA/ALPHA_1/ALPHA_1.1/1.1.1PCA_Codes/Criterios-Unificado (Datos para PCA).xlsx")
#df: Data Frame with all variables and observations
df <- column_to_rownames(df, loc = 1)
df <- df[,-5]
#df1: Data frame without GDP and with all the countries
df1 <- df[,-4]
df <- read_excel("APLHA/ALPHA_1/ALPHA_1.1/1.1.1PCA_Codes/Criterios-Unificado (Datos para PCA).xlsx")
df <- column_to_rownames(df, loc = 1)
df <- df[,-5]
df1 <- df[,-4]
View(df)
View(df1)
View(df)
df_gdplog <- cbind(df[,-4], log10(df$GDP))
View(df_gdplog)
View(df_plot)
library(tidyverse)
library(readxl)
library(textshape) #"Tools for Reshaping Text". Usado en columns_to_rownames
library(broom)
library(plotly)
library(scales)
library(caTools)
library(caret)
library(cluster)
library(factoextra) #Para graficar K-Means y PCA
library(psych) #Usado por su funsión de crar matices de correlaciones de colores
library(stats) #Para hacer el PCA
library(naniar) #Para limpiar las bases de datos
library(fBasics) #Analisis estadistico
library(PerformanceAnalytics)
library(statmod)
library(knitr)
library(stargazer)
library(kableExtra)
library(ggpubr)
library(ggdist)
library(ggExtra)
library(ggbeeswarm)
library(aTSA) #Raiz Unitaria
library(tseries) #Raiz Unitaria
library(QuantPsyc) #Pruba multivariada
library(ghyp) #Para hacer momentos estadisticos de la NIG
library(quantmod) #Para descargar datos
library(cramer) #Para la prueba de cramer
library(PortfolioAnalytics)
library(DEoptim)
library(tidyquant)
df <- read_excel("APLHA/ALPHA_1/ALPHA_1.1/1.1.1PCA_Codes/Criterios-Unificado (Datos para PCA).xlsx")
df <- column_to_rownames(df, loc = 1)
df <- df[,-5]
df1 <- df[,-4]
View(df)
View(df1)
bxp_gdp <- df_plot %>%
ggplot(aes(x=GDP, y=0))+
geom_boxplot()+
geom_quasirandom()+
geom_label(data=df_plot %>%
filter(GDP>1.0e+13), aes(label=Country))
df <- read_excel("APLHA/ALPHA_1/ALPHA_1.1/1.1.1PCA_Codes/Criterios-Unificado (Datos para PCA).xlsx")
df_plot <- df[,-5]
bxp_gdp <- df_plot %>%
ggplot(aes(x=GDP, y=0))+
geom_boxplot()+
geom_quasirandom()+
geom_label(data=df_plot %>%
filter(GDP>1.0e+13), aes(label=Country))
View(df_plot)
df <- read_excel("APLHA/ALPHA_1/ALPHA_1.1/1.1.1PCA_Codes/Criterios-Unificado (Datos para PCA).xlsx")
df_plot <- df[,-6] #Data Frame para hacer gráficas descriptivas
df <- column_to_rownames(df, loc = 1)
df <- df[,-5]
df_gdplog <- cbind(df[,-4], log10(df$GDP))
View(df_gdplog)
View(df_gdplog)
df_gdplog <- colnames(df_gdplog)[,4] = "GDP"
colnames(df_gdplog)[,4] = "GDP"
df_plot <- df[,-6] #Data Frame para hacer gráficas descriptivas
df_plot <- df[,-6] #Data Frame para hacer gráficas descriptivas
df <- read_excel("APLHA/ALPHA_1/ALPHA_1.1/1.1.1PCA_Codes/Criterios-Unificado (Datos para PCA).xlsx")
df_plot <- df[,-6] #Data Frame para hacer gráficas descriptivas
View(df_plot)
df_gdplog_plot <- cbind(df[,-5], log10(df$GDP))
View(df_gdplog_plot)
df <- read_excel("APLHA/ALPHA_1/ALPHA_1.1/1.1.1PCA_Codes/Criterios-Unificado (Datos para PCA).xlsx")
df_plot <- df[,-6] #Data Frame para hacer gráficas descriptivas
View(df_plot)
df_gdplog_plot <- cbind(df[,-5:6], log10(df$GDP))
View(df)
df_gdplog_plot <- cbind(df[,-6], log10(df$GDP))
View(df_gdplog_plot)
df <- read_excel("APLHA/ALPHA_1/ALPHA_1.1/1.1.1PCA_Codes/Criterios-Unificado (Datos para PCA).xlsx")
df_plot <- df[,-6] #Data Frame para hacer gráficas descriptivas
df <- df[,-6]
View(df)
df <- read_excel("APLHA/ALPHA_1/ALPHA_1.1/1.1.1PCA_Codes/Criterios-Unificado (Datos para PCA).xlsx")
df <- df[,-6]
df_plot <- df #Data Frame para hacer gráficas descriptivas
View(df)
View(df_plot)
df <- df <- column_to_rownames(df, loc = 1)
df_gdplog_plot <- cbind(df_plot[,-5], log10(df$GDP))
View(df_gdplog_plot)
colnames(df_gdplog_plot)[,5] = "GDP"
colnames(df_gdplog_plot)[5] = "GDP"
df <- read_excel("APLHA/ALPHA_1/ALPHA_1.1/1.1.1PCA_Codes/Criterios-Unificado (Datos para PCA).xlsx")
df <- df[,-6]
df_plot <- df #Data Frame para hacer gráficas descriptivas
df <- df <- column_to_rownames(df, loc = 1)
df_gdplog_plot <- cbind(df_plot[,-5], log10(df$GDP)) %>%
colnames(df_gdplog_plot)[5] = "GDP"
df_gdplog_plot <- cbind(df_plot[,-5], log10(df$GDP))
colnames(df_gdplog_plot)[5] = "GDP"
df <- read_excel("APLHA/ALPHA_1/ALPHA_1.1/1.1.1PCA_Codes/Criterios-Unificado (Datos para PCA).xlsx")
df <- df[,-6]
df_plot <- df #Data Frame para hacer gráficas descriptivas
df <- column_to_rownames(df, loc = 1)
df_gdplog_plot <- cbind(df_plot[,-5], log10(df$GDP))
colnames(df_gdplog_plot)[5] = "GDP"
df_gdplog <- column_to_rownames(df_gdplog_plot, loc = 1)
View(df_gdplog)
hist_gdp <- df_gdplog_plot %>%
ggplot(aes(x=GDP))+
geom_histogram(bins=100)
df_gdplog_plot %>%
ggplot(aes(x=GDP))+
geom_histogram(bins=100)
df_gdplog_plot %>%
ggplot(aes(x=GDP))+
geom_histogram(bins=100)+
geom_label(data = df_gdplog_plot %>%
filter(GDP>1.0e+13), aes(x=GDP,y=Country,
label=Country))
df_gdplog_plot %>%
ggplot(aes(x=GDP))+
geom_histogram(bins=100)+
geom_label(data = df_gdplog_plot %>%
filter(GDP>13), aes(x=GDP,y=Country,
label=Country))
# PCA con df_gdplog
pca_df_gdplog <- prcomp(df_gdplog,
center = TRUE,
scale. = TRUE)
biplot(pca_df_gdplog)
summary(pca_df_gdplog)
fviz_pca_ind(pca_df_gdplog)
df_gdplog_PC1234 <- cbind(df_gdplog, pca_df_gdplog$x) %>%
arrange(desc(PC1))
View(df_gdplog_PC1234)
View(pca_df_gdplog)
fviz_pca_biplot(pca_df_gdplog)
fviz_contrib(pca_df_gdplog)
fviz_screeplot(pca_df_gdplog)
fviz_contrib(pca_df_gdplog)
fviz_contrib(pca_df_gdplog, choice = "var")
fviz_contrib(pca_df_gdplog, choice = "ind")
fviz_screeplot(pca_df_gdplog)
# Kmean
fviz_nbclust(pca_df_gdplog)
# Kmean
fviz_nbclust(pca_df_gdplog,
kmeans,
method = "wss",
k.max = 24)
install.packages("NbClust")
library(NbClust)
# Kmean
fviz_nbclust(pca_df_gdplog,
kmeans,
method = "wss",
k.max = 24)
# Kmean
fviz_nbclust(pca_df_gdplog,
kmeans,
method = "wss",
k.max = 24)
# Kmean
NbClust(pca_df_gdplog,
distance = "euclidean",
method = "kmeans")
# Kmean
NbClust(df_gdplog,
distance = "euclidean",
method = "kmeans")
# Kmean
NB_df_gdplog <- NbClust(df_gdplog,
distance = "euclidean",
method = "kmeans")
fviz_nbclust(NB_df_gdplog,
kmeans,
method = "wss",
k.max = 24)
fviz_nbclust(df_gdplog,
kmeans,
method = "wss",
k.max = 24)
kmean_df_gdplog <- kmeans(df_gdplog, 2)
kmean_df_gdplog <- kmeans(df_gdplog, 2)
fviz_cluster(kmean_df_gdplog,
data = df_gdplog)
kmean_df_gdplog <- kmeans(df_gdplog, 3)
fviz_cluster(kmean_df_gdplog,
data = df_gdplog)
kmean_df_gdplog <- kmeans(df_gdplog, 5)
fviz_cluster(kmean_df_gdplog,
data = df_gdplog)
kmean_df_gdplog <- kmeans(df_gdplog, 8)
fviz_cluster(kmean_df_gdplog,
data = df_gdplog)
k1_map_df_gdplog <- as.data.frame(kmean1_df_gdplog$cluster)
# Kmean
NB_df_gdplog <- NbClust(df_gdplog,
distance = "euclidean",
method = "kmeans")
kmean1_df_gdplog <- kmeans(df_gdplog, 8)
fviz_cluster(kmean1_df_gdplog,
data = df_gdplog)
k1_map_df_gdplog <- as.data.frame(kmean1_df_gdplog$cluster)
View(k1_map_df_gdplog)
k1_map <- as.data.frame(kmean1_df_gdplog$cluster)
k_map <- kmeans(coordinates_map,
centers = 5,
iter.max = 20)
# Kmean
NB_df_gdplog <- NbClust(df_gdplog,
distance = "euclidean",
method = "kmeans")
kmean1_df_gdplog <- kmeans(df_gdplog,
centers = 8,
iter.max = 20)
fviz_cluster(kmean1_df_gdplog,
data = df_gdplog)
k1_map <- as.data.frame(kmean1_df_gdplog$cluster)
View(k1_map)
k1_map_dfgdplog_C1 <- k1_map  %>%
subset(`kmean1_df_gdplog$cluster`==1)
View(k1_map_dfgdplog_C1)
k1_map_C1 <- k1_map  %>%
subset(`kmean1_df_gdplog$cluster`==1)
View(k1_map_C1)
kmean1_df_gdplogdf <- as.data.frame(kmean1_df_gdplog)
kmean1_df_gdplogdf <- cbind(df_gdplog, as.data.frame(kmean1_df_gdplog$cluster))
View(kmean1_df_gdplogdf)
kmean1_df_gdplogdf <- cbind(df_gdplog,
K_C1 = as.data.frame(kmean1_df_gdplog$cluster))
View(kmean1_df_gdplogdf)
kmean1_df_gdplogdf <- cbind(df_gdplog,
"K_C1" = as.data.frame(kmean1_df_gdplog$cluster))
View(kmean1_df_gdplogdf)
colnames(kmean1_df_gdplogdf)[5] = "k_C1"
kmean1_df_gdplogdf <- cbind(df_gdplog,
as.data.frame(kmean1_df_gdplog$cluster)) %>%
arrange(desc(kmean1_df_gdplogdf$k_C1))
kmean1_df_gdplogdf <- cbind(df_gdplog,
as.data.frame(kmean1_df_gdplog$cluster)) %>%
arrange(kmean1_df_gdplogdf$k_C1)
# Kmean
NB_df_gdplog <- NbClust(df_gdplog,
distance = "euclidean",
method = "kmeans")
kmean1_df_gdplog <- kmeans(df_gdplog,
centers = 8,
iter.max = 20)
fviz_cluster(kmean1_df_gdplog,
data = df_gdplog)
kmean1_df_gdplogdf <- cbind(df_gdplog,
as.data.frame(kmean1_df_gdplog$cluster))
colnames(kmean1_df_gdplogdf)[5] = "k1"
View(kmean1_df_gdplogdf)
df_gdplog_k1C1 <- kmean1_df_gdplogdf %>%
filter(k1==1)
View(df_gdplog_k1C1)
df_gdplog_k1C1 <- kmean1_df_gdplogdf %>%
filter(k1==1) %>%
[,-5]
df_gdplog_k1C1 <- kmean1_df_gdplogdf %>%
filter(k1==1) %>%
kmean1_df_gdplogdf[,-5]
df_gdplog_k1C1 <- kmean1_df_gdplogdf %>%
filter(k1==1) %>%
df_gdplog_k1C1[,-5]
df_gdplog_k1C1 <- kmean1_df_gdplogdf %>%
filter(k1==1)
df_gdplog_k1C1[,-5]
View(df_gdplog_k1C1)
df_gdplog_k1C1 <- df_gdplog_k1C1[,-5]
kmean2_df_gdplog <- kmeans(df_gdplog_k1C1,
centers = 2,
iter.max = 10)
View(df_gdplog)
fviz_cluster(kmean2_df_gdplog,
data = df_gdplog_k1C1)
kmean2_df_gdplogdf <- cbind(df_gdplog_k1C1,
as.data.frame(kmean2_df_gdplog$cluster))
colnames(kmean2_df_gdplogdf)[5] = "k2"
View(kmean2_df_gdplogdf)
hclust.out <- hclust(dist(pca_df_gdplog))
View(pca_df_gdplog)
