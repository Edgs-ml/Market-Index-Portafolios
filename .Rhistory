geom_label(data = df_plot %>%
filter(GDP>1.0e+13), aes(x=GDP,y=Country,
label=Country))
#stat_desc_gdp <- kable(describe(df_plot$GDP), )
ggarrange(bxp_gdp, hist_gdp,
labels = c("Boxplot", "Histogram"),
ncol = 2,
nrow = 1)
df_PC1234 <- cbind(df, pca_df$x)
df_PC1234_Descent <- df_PC1234 %>%
arrange(desc(PC1))
df1_PC123 <- cbind(df1, pca_df1$x)
df1_PC123_Descent <- df1_PC123 %>%
arrange(desc(PC1))
df2_PC1234 <- cbind(df2, pca_df2$x)
df2_PC1234_Descent <- df2_PC1234 %>%
arrange(desc(PC1))
kable(head(df_PC1234_Descent, 5),
format = "latex")
kable(head(df1_PC123_Descent, 5),
format = "latex")
kable(head(df2_PC1234_Descent, 5),
format = "latex")
fviz_pca_ind(pca_df,
repel = FALSE,
title = "Lugar de Países dentro de los Componentes Principales 1 y 2 [con GDP]")
fviz_pca_ind(pca_df1,
repel = TRUE,
title = "Place of each country in a PC1 and PC2 Map [Without GDP]")
fviz_pca_ind(pca_df2,
repel = TRUE,
title = "Place of each country [With GDP and without USA & China]")
bxp_eci <- df_plot %>%
ggplot(aes(x=ECI, y=0))+
geom_boxplot()+
geom_quasirandom()
vio_eci <- df_plot %>%
ggplot(aes(x=ECI, y=0))+
geom_violin()
ggarrange(bxp_eci, vio_eci,
labels = c("A", "B"),
ncol = 2,
nrow = 1)
bxp_edbi <- df_plot %>%
ggplot(aes(x=EDBI, y=0))+
geom_boxplot()+
geom_quasirandom()
vio_edbi <- df_plot %>%
ggplot(aes(x=EDBI, y=0))+
geom_violin()
ggarrange(bxp_edbi, vio_edbi,
labels = c("A", "B"),
ncol = 2,
nrow = 1)
bxp_gci <- df_plot %>%
ggplot(aes(x=GCI, y=0))+
geom_boxplot()+
geom_quasirandom()
vio_gci <- df_plot %>%
ggplot(aes(x=GCI, y=0))+
geom_violin()
ggarrange(bxp_gci, vio_eci,
labels = c("A", "B"),
ncol = 2,
nrow = 1)
ggarrange(bxp_eci, bxp_gci, bxp_edbi, bxp_gdp,
labels = c("ECI Boxplot", "GCI Boxplot", "EDBI Boxplot", "GDP Boxplot"),
ncol = 2,
nrow = 2)
tabledf <- describe(df)
kable(tabledf, format = "latex") %>%
kable_styling(latex_options = "scale_down", font_size = 5)
kable(tabledf,
caption = "Descripción Estadistica de los índicadores")
describe(df2)
describe(df1)
cor.plot(df, main = "Correlación de GCI, ECI, EDBI, y GDP")
cor.plot(df, main = "Correlación de GCI, ECI, EDBI, y GDP")
cor.plot(df1, main = "Correlación de GCI, ECI, y EDBI")
library(tidyverse)
library(readxl)
library(textshape) #"Tools for Reshaping Text". Usado en columns_to_rownames
library(broom)
library(plotly)
library(scales)
library(caTools)
library(caret)
library(cluster)
library(factoextra) #Para graficar K-Means y PCA
library(psych) #Usado por su funsión de crar matices de correlaciones de colores
library(stats) #Para hacer el PCA
library(naniar) #Para limpiar las bases de datos
library(fBasics) #Analisis estadistico
library(PerformanceAnalytics)
library(statmod)
library(knitr)
library(stargazer)
library(kableExtra)
library(ggpubr)
library(ggdist)
library(ggExtra)
library(ggbeeswarm)
df <- read_excel("APLHA/ALPHA_1/ALPHA_1.1/1.1.1PCA_Codes/Criterios-Unificado (Datos para PCA).xlsx")
df_plot <- read_excel("APLHA/ALPHA_1/ALPHA_1.1/1.1.1PCA_Codes/Criterios-Unificado (Datos para PCA).xlsx")
#df2: eliminar a China y Estados Unidos
df2 <- df %>%
subset(Country!="China" & Country!="United States")
#df: Data Frame with all variables and observations
df <- column_to_rownames(df, loc = 1)
#df1: Data frame without GDP and with all the countries
df1 <- df[,-4]
#df2: Data Frame without China and USA and with GDP
df2 <- column_to_rownames(df2, loc = 1)
kable(head(df)) #Tabla de los primero paises en Latex
ggarrange(bxp_eci, bxp_gci, bxp_edbi, bxp_gdp,
labels = c("ECI Boxplot", "GCI Boxplot", "EDBI Boxplot", "GDP Boxplot"),
ncol = 2,
nrow = 2)
describe(df1)
tabledf <- describe(df)
kable(tabledf, format = "latex") %>%
kable_styling(latex_options = "scale_down", font_size = 5)
cor.plot(df, main = "Correlación de GCI, ECI, EDBI, y GDP")
cor.plot(df1, main = "Correlación de GCI, ECI, y EDBI")
pca_df <- prcomp(df)
summary(pca_df)
pca_df2 <- prcomp(df2)
summary(pca_df2)
pca_df <- prcomp(df)
pca_df1 <- prcomp(df1)
summary(pca_df)
summary(pca_df1)
df_PC1234 <- cbind(df, pca_df$x)
df_PC1234_Descent <- df_PC1234 %>%
arrange(desc(PC1))
df1_PC123 <- cbind(df1, pca_df1$x)
df1_PC123_Descent <- df1_PC123 %>%
arrange(desc(PC1))
kable(head(df_PC1234_Descent, 5),
format = "latex")
kable(head(df1_PC123_Descent, 5),
format = "latex")
head(df1_PC123_Descent, 5)
fviz_pca_ind(pca_df,
repel = FALSE,
title = "Lugar de Países dentro de los Componentes Principales 1 y 2 [con GDP]")
fviz_pca_ind(pca_df1,
repel = TRUE,
title = "Place of each country in a PC1 and PC2 Map [Without GDP]")
Biplot_fvis_df <- fviz_pca_biplot(pca_df)
Biplot_fvis_df1 <- fviz_pca_biplot(pca_df1)
Contrib_var_fvis_df <- fviz_contrib(pca_df, choice = "var",
title = "Porcentaje de Varianza Contribuida con GDP y todas las Observaciones",
addlabels = TRUE)
Contrib_var_fvis_df1 <- fviz_contrib(pca_df1, choice = "var",
title = "Percentage of Variance contribution Without Variable GDP",
addlabels = TRUE)
Porcen_var_fvis_df <- fviz_screeplot(pca_df,
title = "4 Principal Components With USA & China",
addlabels = TRUE)
Porcen_var_fvis_df1 <- fviz_screeplot(pca_df1,
title = "3 Principal Components Without GDP",
addlabels = TRUE) # Porcentaje de la varianza explicada con el PCA1
#PCA DF
ggarrange(Contrib_var_fvis_df, Porcen_var_fvis_df,
ncol = 2,
nrow = 2)
#PCA DF
ggarrange(Contrib_var_fvis_df, Porcen_var_fvis_df,
ncol = 1,
nrow = 2)
#PCA DF
ggarrange(Contrib_var_fvis_df, Porcen_var_fvis_df,
ncol = 1,
nrow = 2)
#,labels = c("Porcentaje de Varianza Contribuida con GDP y todas las Observaciones",
#                     "4 Componentes Principales con Estados Unidos y China",
#                     "Valor de Explicación del Componente Principal como Vector")
#PCA DF1
ggarrange(Contrib_var_fvis_df, Porcen_var_fvis_df, Biplot_fvis_df,
ncol = 2,
nrow = 2)
#PCA DF2
ggarrange(Contrib_var_fvis_df1, Porcen_var_fvis_df1, Biplot_fvis_df1,
ncol = 2,
nrow = 2)
#PCA DF
ggarrange(Contrib_var_fvis_df, Porcen_var_fvis_df,
ncol = 1,
nrow = 2)
#,labels = c("Porcentaje de Varianza Contribuida con GDP y todas las Observaciones",
#                     "4 Componentes Principales con Estados Unidos y China",
#                     "Valor de Explicación del Componente Principal como Vector")
#PCA DF1
ggarrange(Contrib_var_fvis_df1, Porcen_var_fvis_df1, Biplot_fvis_df1,
ncol = 2,
nrow = 2)
df_PC1234 <- cbind(df, pca_df$x)
df_PC1234_Descent <- df_PC1234 %>%
arrange(desc(PC1))
df1_PC123 <- cbind(df1, pca_df1$x)
df1_PC123_Descent <- df1_PC123 %>%
arrange(desc(PC1))
kable(head(df_PC1234_Descent, 5),
format = "latex")
kable(head(df1_PC123_Descent, 5),
format = "latex")
Biplot_fvis_df <- fviz_pca_biplot(pca_df)
Biplot_fvis_df1 <- fviz_pca_biplot(pca_df1)
Contrib_var_fvis_df <- fviz_contrib(pca_df, choice = "var",
title = "Porcentaje de Varianza Contribuida con GDP y todas las Observaciones",
addlabels = TRUE)
Contrib_var_fvis_df1 <- fviz_contrib(pca_df1, choice = "var",
title = "Percentage of Variance contribution Without Variable GDP",
addlabels = TRUE)
Porcen_var_fvis_df <- fviz_screeplot(pca_df,
title = "4 Principal Components With USA & China",
addlabels = TRUE)
Porcen_var_fvis_df1 <- fviz_screeplot(pca_df1,
title = "3 Principal Components Without GDP",
addlabels = TRUE) # Porcentaje de la varianza explicada con el PCA1
cor.plot(df_PC1234)
cor.plot(df1_PC123)
map <- fviz_pca_ind(pca_df1,
repel = TRUE,
title=NULL)
map
names_map <- as.data.frame(map[["data"]][["name"]])
y_map <- as.data.frame(map[["data"]][["y"]])
x_map <- as.data.frame(map[["data"]][["x"]])
coordinates_map <- cbind(names_map, x_map, y_map)
colnames(coordinates_map) <- c("Country", "x","y")
row.names(coordinates_map) <- coordinates_map$Country
coordinates_map <- coordinates_map[,-1]
coordinates_map %>%
ggplot(aes(x=x, y=y))+
geom_point()+
geom_text(aes(label=Country))
colnames(coordinates_map) <- c("Country", "x","y")
coordinates_map <- cbind(names_map, x_map, y_map)
colnames(coordinates_map) <- c("Country", "x","y")
row.names(coordinates_map) <- coordinates_map$Country
coordinates_map <- coordinates_map[,-1]
coordinates_map %>%
ggplot(aes(x=x, y=y))+
geom_point()+
geom_text(aes(label=Country))
coordinates_map %>%
ggplot(aes(x=x, y=y))+
geom_point()+
geom_text(aes(label="Country"))
View(names_map)
coordinates_map %>%
ggplot(aes(x=x, y=y))+
geom_point()+
geom_text(aes(label=names_map$`map[["data"]][["name"]]`))
k_map <- kmeans(coordinates_map, 7)
fviz_cluster(k_map, data = coordinates_map)
#PCA DF
ggarrange(Biplot_fvis_df, Contrib_var_fvis_df, Porcen_var_fvis_df,
ncol = 2,
nrow = 2)
#PCA DF
ggarrange(Biplot_fvis_df, Contrib_var_fvis_df, Porcen_var_fvis_df,
ncol = 2,
nrow = 2)
#,labels = c("Porcentaje de Varianza Contribuida con GDP y todas las Observaciones",
#                     "4 Componentes Principales con Estados Unidos y China",
#                     "Valor de Explicación del Componente Principal como Vector")
#PCA DF1
ggarrange(Contrib_var_fvis_df1, Porcen_var_fvis_df1, Biplot_fvis_df1,
ncol = 2,
nrow = 2)
#PCA DF
ggarrange(Contrib_var_fvis_df, Porcen_var_fvis_df, Biplot_fvis_df,
ncol = 2,
nrow = 2)
#,labels = c("Porcentaje de Varianza Contribuida con GDP y todas las Observaciones",
#                     "4 Componentes Principales con Estados Unidos y China",
#                     "Valor de Explicación del Componente Principal como Vector")
#PCA DF1
ggarrange(Contrib_var_fvis_df1, Porcen_var_fvis_df1, Biplot_fvis_df1,
ncol = 2,
nrow = 2)
map <- fviz_pca_ind(pca_df1,
repel = TRUE,
title=NULL)
map
names_map <- as.data.frame(map[["data"]][["name"]])
y_map <- as.data.frame(map[["data"]][["y"]])
x_map <- as.data.frame(map[["data"]][["x"]])
coordinates_map <- cbind(names_map, x_map, y_map)
colnames(coordinates_map) <- c("Country", "x","y")
row.names(coordinates_map) <- coordinates_map$Country
coordinates_map <- coordinates_map[,-1]
coordinates_map %>%
ggplot(aes(x=x, y=y))+
geom_point()+
geom_text(aes(label=names_map$`map[["data"]][["name"]]`))
k_map <- kmeans(coordinates_map, 7)
fviz_cluster(k_map, data = coordinates_map)
map <- fviz_pca_ind(pca_df1,
repel = TRUE,
title=NULL)
map
names_map <- as.data.frame(map[["data"]][["name"]])
y_map <- as.data.frame(map[["data"]][["y"]])
x_map <- as.data.frame(map[["data"]][["x"]])
coordinates_map <- cbind(names_map, x_map, y_map)
colnames(coordinates_map) <- c("Country", "x","y")
row.names(coordinates_map) <- coordinates_map$Country
coordinates_map <- coordinates_map[,-1]
coordinates_map %>%
ggplot(aes(x=x, y=y))+
geom_point()+
geom_text(aes(label=names_map$`map[["data"]][["name"]]`))
k_map <- kmeans(coordinates_map, 7)
fviz_cluster(k_map, data = coordinates_map)
Kdf1_Descent = subset(df1_PC123_Descent, select = c("PC1","PC2", "PC3"))
head(Kdf1_Descent, 5)
df1_scaled <- scale(df1_PC123_Descent)
set.seed(123)
df1_scaled <- scale(df1_PC123_Descent)
set.seed(123)
names_map <- as.data.frame(map[["data"]][["name"]])
y_map <- as.data.frame(map[["data"]][["y"]])
x_map <- as.data.frame(map[["data"]][["x"]])
coordinates_map <- cbind(names_map, x_map, y_map)
colnames(coordinates_map) <- c("Country", "x","y")
row.names(coordinates_map) <- coordinates_map$Country
coordinates_map <- coordinates_map[,-1]
coordinates_map %>%
ggplot(aes(x=x, y=y))+
geom_point()+
geom_text(aes(label=names_map$`map[["data"]][["name"]]`))
k_map <- kmeans(coordinates_map, 7)
fviz_cluster(k_map, data = coordinates_map)
fviz_nbclust(df1_scaled,
kmeans,
method = "gap_stat",
k.max = 30)
fviz_nbclust(df1_scaled,
kmeans,
method = "wss",
k.max = 24)
fviz_nbclust(coordinates_map,
kmeans,
method = "wss",
k.max = 24)
k_map <- kmeans(coordinates_map, 2)
fviz_cluster(k_map, data = coordinates_map)
k_map <- kmeans(coordinates_map, 7)
fviz_cluster(k_map, data = coordinates_map)
fviz_cluster(k_map,
data = coordinates_map,
show.clust.cent = TRUE)
fviz_cluster(k_map,
data = coordinates_map,
show.clust.cent = TRUE,
ellipse = TRUE)
fviz_cluster(k_map,
data = coordinates_map)
map <- fviz_pca_ind(pca_df1,
repel = TRUE,
title=NULL)
names_map <- as.data.frame(map[["data"]][["name"]])
y_map <- as.data.frame(map[["data"]][["y"]])
x_map <- as.data.frame(map[["data"]][["x"]])
coordinates_map <- cbind(names_map, x_map, y_map)
colnames(coordinates_map) <- c("Country", "x","y")
row.names(coordinates_map) <- coordinates_map$Country
coordinates_map <- coordinates_map[,-1]
View(coordinates_map)
coordinates_map %>%
ggplot(aes(x=x, y=y))+
geom_point()+
geom_text(aes(label=names_map$`map[["data"]][["name"]]`))
fviz_nbclust(coordinates_map,
kmeans,
method = "wss",
k.max = 24)
fviz_nbclust(df1_scaled,
kmeans,
method = "gap_stat",
k.max = 30)
k_map <- kmeans(coordinates_map, 7)
fviz_cluster(k_map,
data = coordinates_map)
fviz_cluster(k_map,
data = coordinates_map)
fviz_cluster(k_map,
data = coordinates_map)
#calculate gap statistic based on number of clusters
gap_stat <- clusGap(df1_scaled,
FUN = kmeans,
nstart = 25,
K.max = 30,
B = 50)
#plot number of clusters vs. gap statistic
fviz_gap_stat(gap_stat)
library(cluster)
library(factoextra) #Para graficar K-Means y PCA
library(psych)
library(stats) #Para hacer el PCA
library(naniar) #Para limpiar las bases de datos
library(fBasics) #Analisis estadistico
library(aTSA) #Raiz Unitaria
library(tseries) #Raiz Unitaria
library(PerformanceAnalytics)
library(QuantPsyc) #Pruba multivariada
library(statmod)
library(ghyp) #Para hacer momentos estadisticos de la NIG
library(quantmod) #Para descargar datos
library(cramer) #Para la prueba de cramer
Serie_de_datos_el_bueno_ <- read_excel("~/Documents/GitHub/Market-Index-Portafolios/iNDICES.xlsx",
col_types = c("date", "numeric", "numeric",
"numeric", "numeric", "numeric", "numeric", "numeric"))
g1 <- Serie_de_datos_el_bueno_
colnames(g1)<-c("Fecha", "SP", "OMX30","HSI","STI","DJI","KOSPI", "DAX")
g1<-textshape::column_to_rownames(g1,loc=1)
g1 <- drop_na(g1)
glimpse(g1)
g1 <- column_to_rownames(g1,loc=1)
g1<-textshape::column_to_rownames(g1,loc=1)
Serie_de_datos_el_bueno_ <- read_excel("~/Documents/GitHub/Market-Index-Portafolios/iNDICES.xlsx",
col_types = c("date", "numeric", "numeric",
"numeric", "numeric", "numeric", "numeric", "numeric"))
g1 <- Serie_de_datos_el_bueno_
colnames(g1)<-c("Fecha", "SP", "OMX30","HSI","STI","DJI","KOSPI", "DAX")
g1<-textshape::column_to_rownames(g1,loc=1)
Serie_de_datos_el_bueno_ <- read_excel("~/Documents/GitHub/Market-Index-Portafolios/iNDICES.xlsx",
col_types = c("date", "numeric", "numeric",
"numeric", "numeric", "numeric", "numeric", "numeric"))
g1 <- Serie_de_datos_el_bueno_
colnames(g1)<-c("Fecha", "SP", "OMX30","HSI","STI","DJI","KOSPI", "DAX")
g1<-textshape::column_to_rownames(g1,loc=1)
g1 <- drop_na(g1)
glimpse(g1)
glimpse(g1)
View(g1)
g1 <- drop_na(g1)
retornos <- Return.calculate(g1,
method = "log")[-1,]
Estg1 <- basicStats(retornos)
Estg1
m <- mean(retornos$SP)
sd <- sd(retornos$SP)
len <- length(retornos$SP)
basenormal <- dnorm(len,m,sd)
ks.test(retornos$SP, basenormal)
ks.test(retornos$OMX30, basenormal)
ks.test(retornos$HSI, basenormal)
ks.test(retornos$STI, basenormal)
ks.test(retornos$DJI, basenormal)
ks.test(retornos$KOSPI, basenormal)
ks.test(retornos$DAX, basenormal)
mult.norm(retornos)$mult.test
plot(density(retornos$SP),
col="red",
ylim=c(0,60),
main="Distribuciones contra normal")+
lines(density(retornos$OMX30),
col="green",
ylim=c(0,60))+
lines(density(retornos$HSI),
col="blue",
ylim=c(0,60))+
lines(density(retornos$STI),
col="orange",
ylim=c(0,60))+
lines(density(retornos$DJI),
col="pink",
ylim=c(0,60)+
lines(density(retornos$KOSPI),
col="purple",
ylim=c(0,60))+
lines(density(retornos$DAX),
col="brown",
ylim=c(0,60)))
#Parametros de la NIG
NIG<-nigFit(retornos$SP)
#Agrupar parametros en un objeto
a<-NIG@fit[["par"]]
a<-data.frame(t(a))
#NIG aleatoria con parametors univariados de nuestra serie
r = rnig(len,
alpha = a$alpha,
beta = a$beta,
delta = a$delta,
mu= a$mu)
plot(density(r),
col="black",
main="NIG Univariada",
sub="SP index")
#Pruba de Kormogorov univariada para NIG
ks.test(retornos$SP,r)
library(quantmod)
library(PerformanceAnalytics)
library(PortfolioAnalytics)
library(DEoptim)
library(readxl)
library(fBasics)
library(ghyp)
library(PortfolioAnalytics)
Specs_Port_Norm <- portfolio.spec(retornos)
##### Add Constraints #####
Specs_Port_Norm <- add.constraint(Specs_Port_Norm,type = "full_investment")
Specs_Port_Norm <- add.constraint(Specs_Port_Norm,type="long_only")
##### Add Objective #####
Specs_Port_Norm <- add.objective(Specs_Port_Norm,type="risk",name="StdDev")
Specs_Port_Norm <- add.objective(Specs_Port_Norm,type='return',name='mean')
Specs_Port_Norm
