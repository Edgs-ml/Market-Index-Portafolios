#--------pre pandemia - indices_pre.crisis.to.pre.pandemic
to_pre.crisis.to.pre.pandemic <- as.POSIXct("2020-02-27")
indices_pre.crisis.to.pre.pandemic <- indices[index(indices) <= to_pre.crisis.to.pre.pandemic]
indices_pre.crisis.to.pre.pandemic_scale <- scale(indices_pre.crisis.to.pre.pandemic)
plot(indices_pre.crisis.to.pre.pandemic_scale)
#--------pre crisis financiera - indices_pre.crisis
to_pre.crisis <- as.POSIXct("2007-06-30")
indices_pre.crisis <- indices[index(indices) <= to_pre.crisis]
indices_pre.crisis_scale <- scale(indices_pre.crisis)
plot(indices_pre.crisis_scale)
#--------entre crisis y crisis - indices_pos.crisis_pre.pandemic
from_pos.crisis <- as.POSIXct("2011-06-30")
to_pre.pandemic <- as.POSIXct("2020-02-27")
indices_pos.crisis_pre.pandemic <- indices[index(indices) >= from_pos.crisis & index(indices) <= to_pre.pandemic]
indices_pos.crisis_pre.pandemic_scale <- scale(indices_pos.crisis_pre.pandemic)
plot(indices_pos.crisis_pre.pandemic_scale)
#--------pandemic - indices_pandemic
from_pandemic <- as.POSIXct("2020-02-27")
to_pandemic <- as.POSIXct("2023-04-09")
indices_pandemic <- indices[index(indices) >= from_pandemic & index(indices) <= to_pandemic]
indices_pandemic_scale <- scale(indices_pandemic)
plot(indices_pandemic_scale)
#--------pos pandemic - indices_pos.pandemic
from_pos.pandemic <- as.POSIXct("2023-04-10")
indices_pos.pandemic <- indices[index(indices) >= from_pos.pandemic]
indices_pos.pandemic_scale <- scale(indices_pos.pandemic)
plot(indices_pos.pandemic_scale)
plot(rfr_pre.crisis.to.pre.pandemic_scale)
#--------pre pandemia - indices_pre.crisis.to.pre.pandemic
rfr_pre.crisis.to.pre.pandemic <- rfr[index(rfr) <= to_pre.crisis.to.pre.pandemic]
rfr_pre.crisis.to.pre.pandemic_scale <- scale(rfr_pre.crisis.to.pre.pandemic)
plot(rfr_pre.crisis.to.pre.pandemic_scale)
plot(rfr_pre.crisis.to.pre.pandemic)
plot(rfr_pandemic)
#--------pandemic - indices_pandemic
rfr_pandemic <- rfr[index(rfr) >= from_pandemic & index(rfr) <= to_pandemic]
plot(rfr_pandemic)
View(indices_scale)
# Indices de capital de los paises, bajados de Bloomberg
indices <- read_excel("Indices_km.xlsx",
sheet = "Hoja1",
col_types = c("date",
"numeric", "numeric", "numeric", "numeric", "numeric",
"numeric", "numeric", "numeric", "numeric", "numeric",
"numeric", "numeric", "numeric", "numeric", "numeric",
"numeric", "numeric", "numeric", "numeric", "numeric"))
names(indices)[names(indices) == '...1'] <- 'Date'
indices <- indices[-1,]
indices <- na.omit(indices)
indices <- column_to_rownames(indices, loc = 1)
indices <- round(indices, digits = 3)
indices <- as.xts(indices)
new_names <- c("United States", "Australia", "India", "Italy", "Mexico",
"Russian Federation", "Saudi Arabia", "Spain", "Canada", "China",
"France", "Germany","Japan", "Korea, Rep", "Netherlands",
"Switzerland", "United Kingdom", "Brazil", "South Africa", "US.T.30Y")
colnames(indices) <- new_names
rfr <- indices$US.T.30Y
indices.rfr <- indices
indices <- indices[,-20]
View(indices)
class(indices)
indices_scale <- scale(indices)
plot(indices_scale)
View(indices.rfr)
indices.rfr <- scale(indices.rfr)
plot(indices.rfr)
table.AnnualizedReturns(Return_indices_norm,
scale = 252,
Rf = indices.rfr[,20],
geometric = FALSE)
Return_k3c1_norm <- Return.portfolio(R = scale(k3c1_matrix),
portfolio = k3c1.init.portfolio)
table.AnnualizedReturns(Return_k3c1_norm,
scale = 252,
Rf = indices.rfr[,20],
geometric = FALSE)
Return.cumulative(Return_k3c1_norm,
geometric = TRUE)
Return_k3c2_norm <- Return.portfolio(R = k3c2_matrix_scale,
portfolio = k3c2.init.portfolio)
table.AnnualizedReturns(Return_k3c2_norm,
scale = 252,
Rf = indices.rfr[,20],
geometric = FALSE)
Return.cumulative(Return_k3c2_norm,
geometric = TRUE)
Return_k3c2_norm <- Return.portfolio(R = k3c2_matrix_scale,
portfolio = k3c2.init.portfolio)
table.AnnualizedReturns(Return_k3c2_norm,
scale = 252,
Rf = indices.rfr[,20],
geometric = FALSE)
Return.cumulative(Return_k3c2_norm,
geometric = TRUE)
table.AnnualizedReturns(Return_k3c2_norm,
scale = 252,
Rf = indices.rfr[,20],
geometric = FALSE)
Return.cumulative(Return_k3c2_norm,
geometric = TRUE)
Optimized_Port_Norm_indices <- optimize.portfolio(R = indices_scale,
portfolio = init.portfolio,
optimize_method = "random",
trace = TRUE)
Return_indices_norm <- Return.portfolio(R = indices_scale,
portfolio = init.portfolio)
Return_indices_norm
Optimized_Port_Norm_indices <- optimize.portfolio(R = indices_scale,
portfolio = init.portfolio,
optimize_method = "random",
trace = TRUE)
indices_name <- colnames(indices)
init.portfolio <- portfolio.spec(assets = indices_name)
# Add Constraints #####
init.portfolio <- add.constraint(portfolio = init.portfolio,
type="weight_sum",
min_sum = 0.99,
max_sum = 1.01)
init.portfolio <- add.constraint(portfolio = init.portfolio,
type = "long_only")
# Add Objective #####
init.portfolio <- add.objective(portfolio = init.portfolio,
type = "risk",
name = "sd")
init.portfolio <- add.objective(portfolio = init.portfolio,
type = 'return',
name = 'mean')
init.portfolio
# Optimization #####
indices_e.w.p. <- equal.weight(R = indices_scale,
portfolio = init.portfolio)
View(indices_e.w.p.)
Optimized_Port_Norm_indices <- optimize.portfolio(R = indices_scale,
portfolio = init.portfolio,
optimize_method = "random",
trace = TRUE)
Return_indices_norm <- Return.portfolio(R = indices_scale,
portfolio = init.portfolio)
View(Return_bric_norm)
indices_e.w.p.[["R"]]
View(indices.rfr[,20])
table.AnnualizedReturns(Return_indices_norm,
scale = 252,
Rf = indices.rfr[,20],
geometric = FALSE)
chart.RiskReward(object = indices_scale,
risk.col = 'sd',
return.col = 'mean',
chart.assets = FALSE)
Return_indices_norm <- Return.portfolio(R = indices_scale,
portfolio = init.portfolio)
table.AnnualizedReturns(Return_indices_norm,
scale = 252,
Rf = indices.rfr[,20],
geometric = FALSE)
Return.cumulative(Return_indices_norm,
geometric = TRUE)
Return_k3c1_norm <- Return.portfolio(R = scale(k3c1_matrix),
portfolio = k3c1.init.portfolio)
table.AnnualizedReturns(Return_k3c1_norm,
scale = 252,
Rf = indices.rfr[,20],
geometric = FALSE)
Return.cumulative(Return_k3c1_norm,
geometric = TRUE)
Return_k3c2_norm <- Return.portfolio(R = k3c2_matrix_scale,
portfolio = k3c2.init.portfolio)
table.AnnualizedReturns(Return_k3c2_norm,
scale = 252,
Rf = indices.rfr[,20],
geometric = FALSE)
Return.cumulative(Return_k3c2_norm,
geometric = TRUE)
re <- Return.cumulative(Return_k3c2_norm,
geometric = TRUE)
class(re)
View(re)
VaR.indices <- VaR(indices, p = 0.95)
VaR.indices <- VaR(indices, p = 0.95, method = "gaussian")
View(Optimized_Port_Norm_indices)
VaR.indices <- var.portfolio(indices,
Optimized_Port_Norm_indices)
VaR.indices <- var.portfolio(indices,
indices_Weights)
Optimized_Port_Norm_indices <- optimize.portfolio(R = indices_scale,
portfolio = init.portfolio,
optimize_method = "random",
trace = TRUE)
indices_Weights <- extractWeights(Optimized_Port_Norm_indices)
VaR.indices <- var.portfolio(indices,
indices_Weights)
VaR.indices
VaR.indices <- VaR(indices, p = 0.95, method = "gaussian")
VaR.indices <- var.portfolio(indices,
W_R_eqt)
VaR.indices
df_plot %>%
ggplot(aes(x=GDP))+
geom_histogram(bins=100)+
geom_label(data = df_plot %>%
filter(GDP>13), aes(x=GDP,y=Country,
label=Country))
bxp_gdp <- df_plot %>%
ggplot(aes(x=GDP, y=0))+
geom_boxplot()+
geom_quasirandom()+
geom_label(data=df_plot %>%
filter(GDP>1.0e+13), aes(label=Country))
df <- read_excel("APLHA/ALPHA_1/ALPHA_1.1/1.1.1PCA_Codes/Criterios-Unificado (Datos para PCA).xlsx")
df_plot <- df[,-6] #Data Frame para hacer gráficas descriptivas
df <- column_to_rownames(df, loc = 1)
df <- df[,-5] #Data Frame con GDP
df1 <- df[,-4] #Data Frame sin GDP
View(df)
View(df1)
df <- read_excel("APLHA/ALPHA_1/ALPHA_1.1/1.1.1PCA_Codes/Criterios-Unificado (Datos para PCA).xlsx")
df_plot <- df[,-6] #Data Frame para hacer gráficas descriptivas
df <- column_to_rownames(df, loc = 1)
df <- df[,-5] #Data Frame con GDP
df1 <- df[,-4] #Data Frame sin GDP
View(df)
View(df1)
bxp_gdp <- df_plot %>%
ggplot(aes(x=GDP, y=0))+
geom_boxplot()+
geom_quasirandom()+
geom_label(data=df_plot %>%
filter(GDP>1.0e+13), aes(label=Country))
View(df)
Return_k3c2_norm <- Return.portfolio(R = k3c2_matrix_scale,
portfolio = k3c2.init.portfolio)
table.AnnualizedReturns(Return_k3c2_norm,
scale = 252,
Rf = indices.rfr[,20],
geometric = FALSE)
Return.cumulative(Return_k3c2_norm,
geometric = TRUE)
plot(Return_k3c2_norm)
plot(Return_k3c1_norm)
plot(Return_k3c1_norm)
plot(Return_k3c2_norm)
resultados <- merge(Return_k3c1_norm, Return_k3c2_norm)
View(resultados)
resultados <- merge(Return_indices_norm, Return_k3c1_norm, Return_k3c2_norm)
plot(resultados)
k3c1_matrix_scale <- scale(k3c1_matrix)
resultados_scale_series <- merge(indices_scale, k3c1_matrix_scale, k3c2_matrix_scale)
plot(resultados_scale_series)
plot(resultados)
plot(resultados)+
legend = c("Benchmarck", "K3C1", "K3C2")
plot(resultados)+legend = c("Benchmarck", "K3C1", "K3C2")
lines(index(indices), Return_k3c2_norm, type = "l", col = "green")
plot(index(indices), Return_indices_norm, type = "l", col = "blue", xlab = "Time", ylab = "Series 1",
main = "Three Time Series")
lines(index(indices), Return_k3c1_norm, type = "l", col = "red")
lines(index(indices), Return_k3c2_norm, type = "l", col = "green")
plot(resultados)+legend = c("Benchmarck", "K3C1", "K3C2")
plot(resultados)+
legend = c("Benchmarck", "K3C1", "K3C2")
plot(resultados)+ text(index(indices), Return_indices_norm)
plot(resultados)
text(index(indices), Return_indices_norm)
text(index(indices), Return_k3c1_norm)
text(index(indices), Return_k3c2_norm)
plot(resultados)
text(index(indices), Return_indices_norm, "b")
text(index(indices), Return_k3c1_norm, "a")
text(index(indices), Return_k3c2_norm, "c")
plot.xts(all_series_xts, main = "Three Time Series", col = c("blue", "red", "green"),
lwd = 2, screens = c(1, 1, 1), ylab = "Value")
plot.xts(resultados, main = "Three Time Series", col = c("blue", "red", "green"),
lwd = 2, screens = c(1, 1, 1), ylab = "Value")
resultados <- colnames(c("Benchmark", "K3C1", "K3C2"))
resultados <- merge(Return_indices_norm, Return_k3c1_norm, Return_k3c2_norm)
resultados <- colnames(c("Benchmark", "K3C1", "K3C2"))
class(resultados)
legend("topright", legend = colnames(c("Benchmark", "K3C1", "K3C2")), col = 1:3, lwd = 2, bty = "n")
plot.xts(resultados, main = "Three Time Series", col = c("blue", "red", "green"),
lwd = 2, screens = c(1, 1, 1), ylab = "Value")
plot.xts(resultados, main = "Three Time Series", col = c("blue", "red", "green"),
lwd = 2, screens = c(1, 1, 1), ylab = "Value")
resultados <- merge(Return_indices_norm, Return_k3c1_norm, Return_k3c2_norm)
plot.xts(resultados, main = "Three Time Series", col = c("blue", "red", "green"),
lwd = 2, screens = c(1, 1, 1), ylab = "Value")
plot.xts(resultados, main = "Three Time Series", col = c("blue", "red", "green"),
lwd = 2, screens = c(1, 1, 1), ylab = "Value")
legend("topright", legend = colnames(resultados), col = 1:3, lwd = 2, bty = "n")
plot.xts(resultados, main = "Three Time Series", col = c("blue", "red", "green"),
lwd = 2, screens = c(1, 1, 1), ylab = "Value")
legend("topright", legend = colnames(resultados), col = 1:3, lwd = 2, bty = "n")
plot(Return_indices_norm)
plot(Return_k3c1_norm)
plot(Return_k3c2_norm)
plot(index(indices), Return_indices_norm, type = "l", col = "blue", xlab = "Fecha", ylab = "Series",
main = "Benchmark como azul, Primer grupo cómo rojo y segundo grupo como verde")
lines(index(indices), Return_k3c1_norm, type = "l", col = "red")
lines(index(indices), Return_k3c2_norm, type = "l", col = "green")
legend("topright", legend = colnames(resultados), col = 1:3, lwd = 2, bty = "n")
plot.xts(resultados, main = "Three Time Series", col = c("blue", "red", "green"),
lwd = 2, screens = c(1, 1, 1), ylab = "Value")
legend("topright", legend = colnames(resultados), col = 1:3, lwd = 2, bty = "n")
plot.xts(resultados, main = "Benchmark - azul, G. 1 - rojo, G. 2 - verde", col = c("blue", "red", "green"),
lwd = 2, screens = c(1, 1, 1), ylab = "Value")
legend("topright", legend = colnames(resultados), col = 1:3, lwd = 2, bty = "n")
plot.xts(resultados, main = "Benchmark - azul, G. 1 - rojo, G. 2 - verde", col = c("blue", "red", "green"),
lwd = 2, screens = c(1, 1, 1), ylab = "RRetornos normalizados")
legend("topright", legend = colnames(resultados), col = 1:3, lwd = 2, bty = "n")
plot.xts(resultados, main = "Benchmark - azul | G. 1 - rojo | G. 2 - verde", col = c("blue", "red", "green"),
lwd = 2, screens = c(1, 1, 1), ylab = "RRetornos normalizados")
legend("topright", legend = colnames(resultados), col = 1:3, lwd = 2, bty = "n")
plot.xts(resultados, main = "Benchmark - azul | G. 1 - rojo | G. 2 - verde", col = c("blue", "red", "green"),
lwd = 2, screens = c(1, 1, 1), ylab = "Retornos normalizados")
legend("topright", legend = colnames(resultados), col = 1:3, lwd = 2, bty = "n")
Return_k3c2_norm <- Return.portfolio(R = k3c2_matrix_scale,
portfolio = k3c2.init.portfolio)
table.AnnualizedReturns(Return_k3c2_norm,
scale = 252,
Rf = indices.rfr[,20],
geometric = FALSE)
Return.cumulative(Return_k3c2_norm,
geometric = TRUE)
Return_k3c2_norm <- Return.portfolio(R = k3c2_matrix_scale,
portfolio = k3c2.init.portfolio)
table.AnnualizedReturns(Return_k3c2_norm,
scale = 252,
Rf = indices.rfr[,20],
geometric = FALSE)
Return.cumulative(Return_k3c2_norm,
geometric = TRUE)
Return_k3c2_norm <- Return.portfolio(R = k3c2_matrix_scale,
portfolio = k3c2.init.portfolio)
table.AnnualizedReturns(Return_k3c2_norm,
scale = 252,
Rf = indices.rfr[,20],
geometric = FALSE)
Return.cumulative(Return_k3c2_norm,
geometric = TRUE)
Return_k3c2_norm <- Return.portfolio(R = k3c2_matrix_scale,
portfolio = k3c2.init.portfolio)
table.AnnualizedReturns(Return_k3c2_norm,
scale = 252,
Rf = indices.rfr[,20],
geometric = FALSE)
table.AnnualizedReturns(Return_k3c2_norm,
scale = 252,
Rf = indices.rfr[,20],
geometric = FALSE)
plot.xts(resultados, main = "Benchmark - azul | G. 1 - rojo | G. 2 - verde", col = c("blue", "red", "green"), panels = TRUE,
lwd = 2, screens = c(1, 1, 1), ylab = "Retornos normalizados")
legend("topright", legend = colnames(resultados), col = 1:3, lwd = 2, bty = "n")
plot.xts(resultados, main = "Benchmark - azul | G. 1 - rojo | G. 2 - verde", col = c("blue", "red", "green"), panels = TRUE,
lwd = 2, screens = c(1, 1, 1), ylab = "Retornos normalizados")
plot.xts(resultados, main = "Benchmark - azul | G. 1 - rojo | G. 2 - verde", col = c("blue", "red", "green"), panels = TRUE, lwd = 2, screens = c(1, 1, 1), ylab = "Retornos normalizados")
plot.xts(resultados, main = "Benchmark - azul | G. 1 - rojo | G. 2 - verde", col = c("blue", "red", "green"), multi.panel = TRUE, lwd = 2, screens = c(1, 1, 1), ylab = "Retornos normalizados")
colnames(resultados) <- c("Benchmark", "K3C1", "K3C2")
View(resultados)
colnames(resultados) <- c("Benchmark", "Grupo 1 K-Means", "Grupo 2 K-Means")
plot.xts(resultados, main = "Comparación de resultados normalizados", col = c("blue", "red", "green"), multi.panel = TRUE, lwd = 2, screens = c(1, 1, 1), ylab = "Retornos normalizados")
VaR(k3c2_matrix, p=0.95, portfolio_method = "component")
VaR(k3c2_matrix, p=0.95, portfolio_method = "single")
VaR(k3c2_matrix, p=0.95,
method = "gaussian"
portfolio_method = "marginal")
VaR(k3c2_matrix, p=0.95,
method = "gaussian"
portfolio_method = "component")
VaR(k3c2_matrix, p=0.95,
method = "gaussian",
portfolio_method = "component")
VaR(k3c2_matrix, p=0.95,
method = "gaussian",
portfolio_method = "marginal")
VaR(k3c2_matrix, p=0.95,
method = "gaussian",
portfolio_method = "component")
varRisk(k3c2_matrix,
k3c2.indices_e.w.p.,
alpha = 0.05)
class(k3c2.indices_e.w.p.)
sdff <- as.matrix(k3c2.indices_e.w.p.)
varRisk(k3c2_matrix,
sdff,
alpha = 0.05)
VaR(k3c2_matrix, p=0.95,
method = "gaussian",
portfolio_method = "component")
var.portfolio(k3c2_matrix, sdff)
View(sdff)
View(k3c2.indices_e.w.p.)
sdffg <- as.matrix(k3c2.indices_e.w.p.[["weights"]])
View(sdffg)
var.portfolio(k3c2_matrix, sdffg)
k3c2.indices_e.w.p.[["weights"]]
varRisk(k3c2_matrix,
sdffg,
alpha = 0.05)
sdffg <- as.vector(k3c2.indices_e.w.p.[["weights"]])
matrix_var_k2 <- as.matrix(sdffg, k3c2)
View(matrix_var_k2)
sdffgg <- as.matrix(k3c1.indices_e.w.p.[["weights"]])
var.portfolio(k3c2_matrix, sdffg)
varRisk(k3c2_matrix,
sdffg,
alpha = 0.05)
Return.cumulative(Return_k3c2_norm,
geometric = TRUE)
Return_k3c2_norm <- Return.portfolio(R = k3c2_matrix_scale,
portfolio = k3c2.init.portfolio)
table.AnnualizedReturns(Return_k3c2_norm,
scale = 252,
Rf = indices.rfr[,20],
geometric = FALSE)
Return.cumulative(Return_k3c2_norm,
geometric = TRUE)
VaR(k3c2_matrix, p=0.95,
method = "gaussian",
portfolio_method = "component")
varRisk(k3c2_matrix,
sdffg,
alpha = 0.05)
var.portfolio(k3c2_matrix, sdffg)
Return_k3c2_norm <- Return.portfolio(R = k3c2_matrix_scale,
portfolio = k3c2.init.portfolio)
table.AnnualizedReturns(Return_k3c2_norm,
scale = 252,
Rf = indices.rfr[,20],
geometric = FALSE)
table.AnnualizedReturns(Return_k3c2_norm,
scale = 252,
Rf = indices.rfr[,20],
geometric = FALSE)
Return_k3c1_norm <- Return.portfolio(R = k3c1_matrix,
portfolio = k3c1.init.portfolio)
table.AnnualizedReturns(Return_k3c1_norm,
scale = 252,
Rf = indices.rfr[,20],
geometric = FALSE)
VaR(Return_indices_norm)
Return_k3c2_norm <- Return.portfolio(R = k3c2_matrix_scale,
portfolio = k3c2.init.portfolio)
table.AnnualizedReturns(Return_k3c2_norm,
scale = 252,
Rf = indices.rfr[,20],
geometric = FALSE)
Return.cumulative(Return_k3c2_norm,
geometric = TRUE)
VaR(k3c2_matrix, p=0.95,
method = "gaussian",
portfolio_method = "component")
varRisk(k3c2_matrix,
sdffg,
alpha = 0.05)
var.portfolio(k3c2_matrix, sdffg)
library(tidyverse)
library(tidyverse)
library(readxl)
library(textshape) #"Tools for Reshaping Text". Usado en columns_to_rownames
library(broom)
library(plotly)
library(scales)
library(caTools)
library(caret)
library(cluster)
library(factoextra) #Para graficar K-Means y PCA
library(psych) #Usado por su funsión de crar matices de correlaciones de colores
library(stats) #Para hacer el PCA
library(naniar) #Para limpiar las bases de datos
library(fBasics) #Analisis estadistico
library(PerformanceAnalytics)
library(statmod)
library(knitr)
library(stargazer)
library(kableExtra)
library(ggpubr)
library(ggdist)
library(ggExtra)
library(ggbeeswarm)
library(aTSA) #Raiz Unitaria
library(tseries) #Raiz Unitaria
library(QuantPsyc) #Pruba multivariada
library(ghyp) #Para hacer momentos estadisticos de la NIG
library(quantmod) #Para descargar datos
library(cramer) #Para la prueba de cramer
library(PortfolioAnalytics)
library(DEoptim)
library(tidyquant)
library(NbClust)
library(dendextend)
library(xts)
library(zoo)
library(fPortfolio)
df <- read_excel("APLHA/ALPHA_1/ALPHA_1.1/1.1.1PCA_Codes/Criterios-Unificado (Datos para PCA).xlsx")
df <- df[,-6]
df_plot <- df #Data Frame para hacer gráficas descriptivas
df <- column_to_rownames(df, loc = 1)
df_plot <- cbind(df_plot[,-5], log10(df$GDP))
colnames(df_plot)[5] = "GDP"
df <- column_to_rownames(df_plot,
loc = 1)
View(df_PC12)
ks.univariate.test.function <- function(serie, cdf){
vector.series <- as.vector(serie)
ks.test(vector.series, cdf)
}
#--------- KS.Test Univariada NIG
ks.univ.norm_indices <- apply(indices,
MARGIN = 2,
FUN = ks.univariate.test.function,
cdf = "pnorm")
View(ks.univ.norm_indices)
