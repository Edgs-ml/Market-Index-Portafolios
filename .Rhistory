library(caret)
library(cluster)
library(factoextra) #Para graficar K-Means y PCA
library(psych) #Usado por su funsi√≥n de crar matices de correlaciones de colores
library(stats) #Para hacer el PCA
library(naniar) #Para limpiar las bases de datos
library(fBasics) #Analisis estadistico
library(PerformanceAnalytics)
library(statmod)
library(knitr)
library(stargazer)
library(kableExtra)
library(ggpubr)
library(ggdist)
library(ggExtra)
library(ggbeeswarm)
library(aTSA) #Raiz Unitaria
library(tseries) #Raiz Unitaria
library(QuantPsyc) #Pruba multivariada
library(ghyp) #Para hacer momentos estadisticos de la NIG
library(quantmod) #Para descargar datos
library(cramer) #Para la prueba de cramer
library(PortfolioAnalytics)
library(DEoptim)
library(tidyquant)
library(NbClust)
library(dendextend)
library(xts)
library(zoo)
library(fPortfolio)
Specs_Port_Norm_indices <- portfolio.spec(indices)
# Add Constraints #####
Specs_Port_Norm_indices <- add.constraint(Specs_Port_Norm_indices,
type = "full_investment")
Specs_Port_Norm_indices <- add.constraint(Specs_Port_Norm_indices,
type = "long_only")
# Add Objective #####
Specs_Port_Norm_indices <- add.objective(Specs_Port_Norm_indices,
type = "risk",
name = "StdDev")
Specs_Port_Norm_indices <- add.objective(Specs_Port_Norm_indices,
type = 'return',
name = 'mean')
Specs_Port_Norm_indices
# Optimization #####
Optimized_Port_Norm_indices <- optimize.portfolio(indices,
Specs_Port_Norm_indices,
optimize_method = "random")
portfolio.optimize(indices,
risk.measure = "sd",
type = "minimum.risk",
level = 0.95,
distr = "loss",
target.return = NULL,
risk.free = NULL,
silent = FALSE)
Specs_Port_Norm_indices <- portfolio.spec(indices)
# Add Constraints #####
Specs_Port_Norm_indices <- add.constraint(Specs_Port_Norm_indices,
type = "full_investment")
Specs_Port_Norm_indices <- add.constraint(Specs_Port_Norm_indices,
type = "long_only")
# Add Objective #####
Specs_Port_Norm_indices <- add.objective(Specs_Port_Norm_indices,
type = "risk",
name = "sd")
Specs_Port_Norm_indices <- add.objective(Specs_Port_Norm_indices,
type = 'return',
name = 'mean')
Specs_Port_Norm_indices
# Optimization #####
Optimized_Port_Norm_indices <- optimize.portfolio(indices,
Specs_Port_Norm_indices,
optimize_method = "random")
View(Specs_Port_Norm_indices)
effFrontier <- portfolioFrontier(indices,
constraints = "LongOnly")
class(indices)
portfolio.optimize(indices,
risk.measure = "sd",
type = "minimum.risk",
level = 0.95,
distr = "loss")
effFrontier <- portfolioFrontier(indices,
constraints = "LongOnly")
View(indices)
effFrontier <- portfolioFrontier(brics_matrix,
constraints = "LongOnly")
fund <- colnames(indices)
init.portfolio <- portfolio.spec(assets = fund)
init.portfolio <- add.constraint (portfolio = init.portfolio,
type= "full_investment")
init.portfolio <- add.constraint(portfolio = init.portfolio,
type= "long_only")
init.portfolio <- add.objective(portfolio = init.portfolio,
type = "risk",
name = "sd")
init.portfolio
Optimized_Port_Norm_indices <- optimize.portfolio(R = indices,
portfolio = init.portfolio,
optimize_method = "random")
init.portfolio
Optimized_Port_Norm_indices <- optimize.portfolio(R = indices,
portfolio = init.portfolio,
optimize_method = "ROI")
Optimized_Port_Norm_indices <- optimize.portfolio(R = indices,
portfolio = init.portfolio,
optimize_method = "random",
trace = TRUE)
init.portfolio <- add.constraint(portfolio = init.portfolio,
type="weight_sum",
min_sum=1,
max_sum=1)
init.portfolio <- add.constraint(portfolio = init.portfolio,
type = "long_only")
init.portfolio <- add.objective(portfolio = init.portfolio,
type = "risk",
name = "sd")
init.portfolio
Optimized_Port_Norm_indices <- optimize.portfolio(R = indices,
portfolio = init.portfolio,
optimize_method = "random",
trace = TRUE)
init.portfolio <- portfolio.spec(assets = fund)
init.portfolio <- add.constraint(portfolio = init.portfolio,
type="weight_sum",
min_sum = 0.99,
max_sum = 1)
init.portfolio <- add.constraint(portfolio = init.portfolio,
type = "long_only")
init.portfolio <- add.objective(portfolio = init.portfolio,
type = "risk",
name = "sd")
init.portfolio
Optimized_Port_Norm_indices <- optimize.portfolio(R = indices,
portfolio = init.portfolio,
optimize_method = "random",
trace = TRUE)
fund <- colnames(indices)
init.portfolio <- portfolio.spec(assets = fund)
init.portfolio <- add.constraint(portfolio = init.portfolio,
type="weight_sum",
min_sum = 0.99,
max_sum = 1.01)
init.portfolio <- add.constraint(portfolio = init.portfolio,
type = "long_only")
init.portfolio <- add.objective(portfolio = init.portfolio,
type = "risk",
name = "sd")
init.portfolio
Optimized_Port_Norm_indices <- optimize.portfolio(R = indices,
portfolio = init.portfolio,
optimize_method = "random",
trace = TRUE)
chart.Weights(Optimized_Port_Norm_indices,
plot.type = "barplot")
Weights_Optimized_Port_Norm_indices <- extractWeights(Optimized_Port_Norm_indices)
sum(Weights_Optimized_Port_Norm_indices)
fund <- colnames(indices)
init.portfolio <- portfolio.spec(assets = fund)
# Add Constraints #####
init.portfolio <- add.constraint(portfolio = init.portfolio,
type="weight_sum",
min_sum = 0.99,
max_sum = 1.01)
init.portfolio <- add.constraint(portfolio = init.portfolio,
type = "long_only")
# Add Objective #####
init.portfolio <- add.objective(portfolio = init.portfolio,
type = "risk",
name = "sd")
init.portfolio <- add.objective(portfolio = init.portfolio,
type = 'return',
name = 'mean')
init.portfolio
# Optimization #####
Optimized_Port_Norm_indices <- optimize.portfolio(R = indices,
portfolio = init.portfolio,
optimize_method = "random",
trace = TRUE)
# Weights optimization #####
chart.Weights(Optimized_Port_Norm_indices,
plot.type = "barplot")
Weights_Optimized_Port_Norm_indices <- extractWeights(Optimized_Port_Norm_indices)
sum(Weights_Optimized_Port_Norm_indices)
effFrontier <- portfolioFrontier(indices,
constraints = "LongOnly")
rghyp(1000, object = ghyp(indices))
nigFit(indices)
NIG(indices)
nigfotin <- nigFit(indices)
View(nigfotin)
nigfotin@call[["alpha"]]
eqwport <- equal.weight(R = indices,
portfolio = init.portfolio)
eqwport
View(eqwport)
NIG.ad(alpha = nigfotin@fit[["par"]][["alpha"]],
delta = nigfotin@fit[["par"]][["delta"]],
beta = nigfotin@fit[["par"]][["beta"]],
data = indices)
NIG.ad(alpha = nigfotin@fit[["par"]][["alpha"]],
delta = nigfotin@fit[["par"]][["delta"]],
beta = nigfotin@fit[["par"]][["beta"]],
mu = nigfotin@fit[["par"]][["mu"]],
data = indices)
rghyp(1000, object = ghyp(nigfotin))
portfolio.optimize(nigfotin,
risk.measure = "sd",
type = "minimum.risk",
level = 0.95,
distr = "loss",
target.return = NULL,
risk.free = NULL,
silent = FALSE)
# Weights optimization #####
chart.Weights(eqwport,
plot.type = "barplot")
nigfotin@fit[["par"]][["mu"]]
View(eqwport)
View(Optimized_Port_Norm_indices)
Return.portfolio(eqwport)
indices_name <- colnames(indices)
init.portfolio <- portfolio.spec(assets = indices_name)
# Add Constraints #####
init.portfolio <- add.constraint(portfolio = init.portfolio,
type="weight_sum",
min_sum = 0.99,
max_sum = 1.01)
init.portfolio <- add.constraint(portfolio = init.portfolio,
type = "long_only")
# Add Objective #####
init.portfolio <- add.objective(portfolio = init.portfolio,
type = "risk",
name = "sd")
init.portfolio <- add.objective(portfolio = init.portfolio,
type = 'return',
name = 'mean')
init.portfolio
# Optimization #####
eqwport <- equal.weight(R = indices,
portfolio = init.portfolio)
Return.portfolio(R = indices,
portfolio = init.portfolio)
Return_indices_norm <- Return.portfolio(R = indices,
portfolio = init.portfolio)
table.AnnualizedReturns(Return_indices_norm,
scale = 252,
geometric = FALSE)
rfr
# Indices de capital de los paises, bajados de Bloomberg
indices <- read_excel("Indices_km.xlsx",
sheet = "Hoja1",
col_types = c("date",
"numeric", "numeric", "numeric", "numeric", "numeric",
"numeric", "numeric", "numeric", "numeric", "numeric",
"numeric", "numeric", "numeric", "numeric", "numeric",
"numeric", "numeric", "numeric", "numeric", "numeric"))
names(indices)[names(indices) == '...1'] <- 'Date'
indices <- indices[-1,]
indices <- na.omit(indices)
indices <- column_to_rownames(indices, loc = 1)
indices <- round(indices, digits = 3)
indices <- as.xts(indices)
new_names <- c("United States", "Australia", "India", "Italy", "Mexico",
"Russian Federation", "Saudi Arabia", "Spain", "Canada", "China",
"France", "Germany","Japan", "Korea, Rep", "Netherlands",
"Switzerland", "United Kingdom", "Brazil", "South Africa", "US.T.30Y")
colnames(indices) <- new_names
rfr <- indices$US.T.30Y
indices <- indices[,-20]
View(indices)
class(indices)
indices_scale <- scale(indices)
plot(indices_scale)
View(rfr)
table.AnnualizedReturns(Return_indices_norm,
scale = 252,
Rf = rfr,
geometric = FALSE)
Return.cumulative(Return_indices_norm,
geometric = FALSE)
class(Return_indices_norm)
View(Return_indices_norm)
chart.RiskReward(Return_indices_norm,
risk.col = 'StdDev',
return.col = 'mean',
chart.assets = T)
Optimized_Port_Norm_indices <- optimize.portfolio(R = indices,
portfolio = init.portfolio,
optimize_method = "random",
trace = TRUE)
chart.RiskReward(Optimized_Port_Norm_indices,
risk.col = 'sd',
return.col = 'mean',
chart.assets = T)
chart.RiskReward(Optimized_Port_Norm_indices,
risk.col = 'sd',
return.col = 'mean',
chart.assets = T)
chart.Weights(Optimized_Port_Norm_indices,
plot.type="barplot")
W_R_NORM <- extractWeights(Optimized_Port_Norm_indices)
chart.RiskReward(Optimized_Port_Norm_indices,
weights = W_R_NORM,
risk.col = 'sd',
return.col = 'mean',
chart.assets = T)
chart.RiskReward(R = Optimized_Port_Norm_indices,
weights = W_R_NORM,
risk.col = 'sd',
return.col = 'mean',
chart.assets = T)
chart.RiskReward(object = Optimized_Port_Norm_indices,
weights = W_R_NORM,
risk.col = 'sd',
return.col = 'mean',
chart.assets = T)
chart.RiskReward(object = Optimized_Port_Norm_indices,
weights = W_R_NORM,
risk.col = 'sd',
return.col = 'mean',
chart.assets = FALSE)
chart.RiskReward(object = Optimized_Port_Norm_indices,
risk.col = 'sd',
return.col = 'mean',
chart.assets = FALSE)
table.AnnualizedReturns(Return_indices_norm,
scale = 252,
Rf = rfr,
geometric = FALSE)
# Optimization #####
indices_e.w. <- equal.weight(R = indices,
portfolio = init.portfolio)
# Optimization #####
indices_e.w.p. <- equal.weight(R = indices,
portfolio = init.portfolio)
Return_indices_norm <- Return.portfolio(R = indices,
portfolio = init.portfolio)
View(indices_e.w.p.)
class(indices_e.w.p.)
chart.RiskReward(object = indices_e.w.p.,
risk.col = 'sd',
return.col = 'mean',
chart.assets = FALSE)
Return.cumulative(Return_indices_norm,
geometric = FALSE)
Return.cumulative(indices_e.w.p.,
geometric = FALSE)
Return.cumulative(Return_indices_norm,
geometric = TRUE)
table.AnnualizedReturns(Return_indices_norm,
scale = 252,
Rf = rfr,
geometric = FALSE)
sharpe <- function(returns, rf) {
(mean(returns) - mean(rf)) / sd(returns)
}
sharpe(Return_indices_norm, rfr)
View(Return_indices_norm)
View(rfr)
SharpeRatio(Return_indices_norm, rfr, 0.95)
Return_indices_norm <- Return.portfolio(R = indices_scale,
portfolio = init.portfolio)
table.AnnualizedReturns(Return_indices_norm,
scale = 252,
Rf = rfr,
geometric = FALSE)
View(indices_scale)
plot(indices_scale)
indices_name <- colnames(indices)
init.portfolio <- portfolio.spec(assets = indices_name)
# Add Constraints #####
init.portfolio <- add.constraint(portfolio = init.portfolio,
type="weight_sum",
min_sum = 0.99,
max_sum = 1.01)
init.portfolio <- add.constraint(portfolio = init.portfolio,
type = "long_only")
# Add Objective #####
init.portfolio <- add.objective(portfolio = init.portfolio,
type = "risk",
name = "sd")
init.portfolio <- add.objective(portfolio = init.portfolio,
type = 'return',
name = 'mean')
init.portfolio
# Optimization #####
indices_e.w.p. <- equal.weight(R = indices_scale,
portfolio = init.portfolio)
W_R_eqt <- extractWeights(indices_e.w.p.)
View(W_R_eqt)
chart.Weights(indices_e.w.p.,
plot.type="barplot")
chart.Weights(W_R_eqt,
plot.type="barplot")
W_R_eqt <- extractWeights(indices_e.w.p.)
Return_indices_norm <- Return.portfolio(R = indices_scale,
portfolio = init.portfolio)
plot(Return_indices_norm)
table.AnnualizedReturns(Return_indices_norm,
scale = 252,
Rf = rfr,
geometric = FALSE)
Return.cumulative(Return_indices_norm,
geometric = TRUE)
plot(Return_indices_norm)
chart.RiskReward(object = indices_e.w.p.,
risk.col = 'sd',
return.col = 'mean',
chart.assets = FALSE)
chart.RiskReward(object = Return_indices_norm,
risk.col = 'sd',
return.col = 'mean',
chart.assets = FALSE)
class(indices_e.w.p.)
chart.RiskReward(object = indices_scale,
risk.col = 'sd',
return.col = 'mean',
chart.assets = FALSE)
class(indices_scale)
Return_indices_norm <- Return.portfolio(R = indices_scale,
portfolio = init.portfolio)
table.AnnualizedReturns(Return_indices_norm,
scale = 252,
Rf = rfr,
geometric = FALSE)
Return.cumulative(Return_indices_norm,
geometric = TRUE)
bric.init.portfolio <- portfolio.spec(assets = brics)
# Add Constraints #####
bric.init.portfolio <- add.constraint(portfolio = bric.init.portfolio,
type="weight_sum",
min_sum = 0.99,
max_sum = 1.01)
bric.init.portfolio <- add.constraint(portfolio = bric.init.portfolio,
type = "long_only")
# Add Objective #####
bric.init.portfolio <- add.objective(portfolio = bric.init.portfolio,
type = "risk",
name = "sd")
bric.init.portfolio <- add.objective(portfolio = bric.init.portfolio,
type = 'return',
name = 'mean')
bric.init.portfolio
# Optimization #####
brics.indices_e.w.p. <- equal.weight(R = scale(brics_matrix),
portfolio = bric.init.portfolio)
Return_bric_norm <- Return.portfolio(R = scale(brics_matrix),
portfolio = bric.init.portfolio)
table.AnnualizedReturns(Return_bric_norm,
scale = 252,
Rf = rfr,
geometric = FALSE)
Return.cumulative(Return_bric_norm,
geometric = TRUE)
k3c2.init.portfolio <- portfolio.spec(assets = k3c2)
# Add Constraints #####
k3c2.init.portfolio <- add.constraint(portfolio = k3c2.init.portfolio,
type="weight_sum",
min_sum = 0.99,
max_sum = 1.01)
k3c2.init.portfolio <- add.constraint(portfolio = k3c2.init.portfolio,
type = "long_only")
# Add Objective #####
k3c2.init.portfolio <- add.objective(portfolio = k3c2.init.portfolio,
type = "risk",
name = "sd")
k3c2.init.portfolio <- add.objective(portfolio = k3c2.init.portfolio,
type = 'return',
name = 'mean')
k3c2.init.portfolio
# Optimization #####
k3c2.indices_e.w.p. <- equal.weight(R = k3c2_matrix_scale,
portfolio = k3c2.init.portfolio)
Return_k3c2_norm <- Return.portfolio(R = k3c2_matrix_scale,
portfolio = k3c2.init.portfolio)
table.AnnualizedReturns(Return_k3c2_norm,
scale = 252,
Rf = rfr,
geometric = FALSE)
Return.cumulative(Return_k3c2_norm,
geometric = TRUE)
k3c1.init.portfolio <- portfolio.spec(assets = k3c1)
# Add Constraints #####
k3c1.init.portfolio <- add.constraint(portfolio = k3c1.init.portfolio,
type="weight_sum",
min_sum = 0.99,
max_sum = 1.01)
k3c1.init.portfolio <- add.constraint(portfolio = k3c1.init.portfolio,
type = "long_only")
# Add Objective #####
k3c1.init.portfolio <- add.objective(portfolio = k3c1.init.portfolio,
type = "risk",
name = "sd")
k3c1.init.portfolio <- add.objective(portfolio = k3c1.init.portfolio,
type = 'return',
name = 'mean')
k3c1.init.portfolio
# Optimization #####
k3c1.indices_e.w.p. <- equal.weight(R = scale(k3c1_matrix),
portfolio = k3c1.init.portfolio)
Return_k3c1_norm <- Return.portfolio(R = k3c1_matrix_scale,
portfolio = k3c1.init.portfolio)
Return_k3c1_norm <- Return.portfolio(R = scale(k3c1_matrix),
portfolio = k3c1.init.portfolio)
table.AnnualizedReturns(Return_k3c1_norm,
scale = 252,
Rf = rfr,
geometric = FALSE)
Return.cumulative(Return_k3c1_norm,
geometric = TRUE)
