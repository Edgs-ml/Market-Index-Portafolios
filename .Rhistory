sort = TRUE,
decreasing = FALSE,
include_leaves = FALSE)
branch.height <- get_branches_heights(hc.out.dend,
sort = TRUE,
decreasing = FALSE,
include_leaves = FALSE)
View(branch.height)
branch.height
branch.height <- as.data.frame(branch.height)
branch.height <- get_branches_heights(hc.out.dend,
sort = F,
decreasing = FALSE,
include_leaves = FALSE)
branch.height <- as.data.frame(branch.height)
View(branch.height)
fviz_dend(hclust.out,
color_labels_by_k = T)
fviz_dend(hclust.out,
type = "circular",
color_labels_by_k = T)
branch.height <- get_branches_heights(hc.out.dend,
sort = FALSE,
decreasing = FALSE,
include_leaves = FALSE)
branch.height <- as.data.frame(branch.height)
View(branch.height)
View(df_PC12)
fviz_dend(hclust.out,
color_labels_by_k = T)
fviz_dend(hclust.out,
rect_border = 2:5
color_labels_by_k = T)
fviz_dend(hclust.out,
rect_border = 2:5,
color_labels_by_k = T)
fviz_dend(hclust.out,
rect_border = 1,
color_labels_by_k = T)
fviz_dend(hclust.out,
rect_border = 7,
color_labels_by_k = T)
clusters6 <- cutree(hc.out, k = 3)
diana(df_PC12,
metric = "euclidean")
dianac <- as.data.frame(diana(df_PC12,
metric = "euclidean"))
dianac <- diana(df_PC12,
metric = "euclidean")
View(dianac)
#chatgpt
clusters <- cutree(hc.out.dend, h = 2)
# Determine the number of clusters
num_clusters <- length(unique(clusters))
# Print the number of clusters
print(num_clusters)
#chatgpt
clusters <- cutree(hc.out.dend, h = 1.5)
# Determine the number of clusters
num_clusters <- length(unique(clusters))
# Print the number of clusters
print(num_clusters)
clusters <- cutree(hc.out, h = 1.7)
ch <- as.data.frame(clusters)
View(ch)
fviz_dend(hclust.out,
rect_border = 7)+
abline(h=1.5, col="red")
fviz_dend(hclust.out,
rect_border = 7)+
abline(h=6, col="red")
plot(hclust.out)+
abline(h=3, col = "red")
fviz_dend(hclust.out)+
abline(h=6, col="red")
plot(hclust.out)+
abline(h=3, col = "red")
plot(hclust.out)+
abline(h=3, col = "red")
plot(hc.out.dend)+
abline(h=3, col = "red")
plot(hc.out.dend)+
abline(h=1.5, col = "red")
plot(hc.out.dend)+
abline(h=1.7, col = "red")
plot(hc.out.dend)+
abline(h=1.4, col = "red")
clusters <- cutree(hc.out, h = 1.4)
ch <- as.data.frame(clusters)
View(ch)
ch16 <- ch %>%
filter(clusters = 16)
ch16 <- ch %>%
filter(clusters == 16)
View(ch16)
fviz_dend(hclust.out,
repel = TRUE,
rect = TRUE
color_labels_by_k = TRUE)
fviz_dend(hclust.out,
repel = TRUE,
rect = TRUE,
color_labels_by_k = TRUE)
fviz_dend(hclust.out,
repel = TRUE,
rect = TRUE,
color_labels_by_k = TRUE)+
abline(h=1.4, col = "red")
fviz_dend(hclust.out,
repel = TRUE,
rect = TRUE,
color_labels_by_k = TRUE)
hclust.out <- hclust(dist(df_PC12))
summary(hclust.out)
hc.out.dend <- as.dendrogram(hclust.out)
fviz_dend(hclust.out,
repel = TRUE,
rect = TRUE,
color_labels_by_k = TRUE)
plot(hc.out.dend)+
abline(h=1.4, col = "red")
branch.height <- get_branches_heights(hc.out.dend,
sort = FALSE,
decreasing = FALSE,
include_leaves = FALSE)
branch.height <- as.data.frame(branch.height)
View(branch.height)
clusters <- cutree(hc.out, h = 1.4)
ch <- as.data.frame(clusters)
summary(hc.out.dend)
View(hc.out.dend)
View(hclust.out)
library(tidyverse)
library(readxl)
library(textshape) #"Tools for Reshaping Text". Usado en columns_to_rownames
library(broom)
library(plotly)
library(scales)
library(caTools)
library(caret)
library(cluster)
library(factoextra) #Para graficar K-Means y PCA
library(psych) #Usado por su funsión de crar matices de correlaciones de colores
library(stats) #Para hacer el PCA
library(naniar) #Para limpiar las bases de datos
library(fBasics) #Analisis estadistico
library(PerformanceAnalytics)
library(statmod)
library(knitr)
library(stargazer)
library(kableExtra)
library(ggpubr)
library(ggdist)
library(ggExtra)
library(ggbeeswarm)
library(aTSA) #Raiz Unitaria
library(tseries) #Raiz Unitaria
library(QuantPsyc) #Pruba multivariada
library(ghyp) #Para hacer momentos estadisticos de la NIG
library(quantmod) #Para descargar datos
library(cramer) #Para la prueba de cramer
library(PortfolioAnalytics)
library(DEoptim)
library(tidyquant)
library(NbClust)
library(dendextend)
# Creación de las Data Frames
df <- read_excel("APLHA/ALPHA_1/ALPHA_1.1/1.1.1PCA_Codes/Criterios-Unificado (Datos para PCA).xlsx")
df <- df[,-6]
df_plot <- df #Data Frame para hacer gráficas descriptivas
df <- column_to_rownames(df, loc = 1)
df_gdplog_plot <- cbind(df_plot[,-5], log10(df$GDP))
colnames(df_gdplog_plot)[5] = "GDP"
df_gdplog <- column_to_rownames(df_gdplog_plot, loc = 1)
# PCA con df_gdplog
pca_df_gdplog <- prcomp(df_gdplog,
center = TRUE,
scale. = TRUE)
summary(pca_df_gdplog)
biplot(pca_df_gdplog)
fviz_pca_biplot(pca_df_gdplog)
df_gdplog_PC1234 <- cbind(df_gdplog, pca_df_gdplog$x) %>%
arrange(desc(PC1))
View(df_gdplog_PC1234)
df_PC12 <- as.data.frame(pca_df_gdplog$x)
df_PC12 <- df_PC12[,1:2]
View(df_PC12)
library(tidyverse)
library(readxl)
library(textshape) #"Tools for Reshaping Text". Usado en columns_to_rownames
library(broom)
library(plotly)
library(scales)
library(caTools)
library(caret)
library(cluster)
library(factoextra) #Para graficar K-Means y PCA
library(psych) #Usado por su funsión de crar matices de correlaciones de colores
library(stats) #Para hacer el PCA
library(naniar) #Para limpiar las bases de datos
library(fBasics) #Analisis estadistico
library(PerformanceAnalytics)
library(statmod)
library(knitr)
library(stargazer)
library(kableExtra)
library(ggpubr)
library(ggdist)
library(ggExtra)
library(ggbeeswarm)
library(aTSA) #Raiz Unitaria
library(tseries) #Raiz Unitaria
library(QuantPsyc) #Pruba multivariada
library(ghyp) #Para hacer momentos estadisticos de la NIG
library(quantmod) #Para descargar datos
library(cramer) #Para la prueba de cramer
library(PortfolioAnalytics)
library(DEoptim)
library(tidyquant)
library(NbClust)
library(dendextend)
# Creación de las Data Frames
df <- read_excel("APLHA/ALPHA_1/ALPHA_1.1/1.1.1PCA_Codes/Criterios-Unificado (Datos para PCA).xlsx")
df <- df[,-6]
df_plot <- df #Data Frame para hacer gráficas descriptivas
df <- column_to_rownames(df, loc = 1)
df_gdplog_plot <- cbind(df_plot[,-5], log10(df$GDP))
colnames(df_gdplog_plot)[5] = "GDP"
df_gdplog <- column_to_rownames(df_gdplog_plot, loc = 1)
pca_df_gdplog <- prcomp(df_gdplog,
center = TRUE,
scale. = TRUE)
summary(pca_df_gdplog)
biplot(pca_df_gdplog)
fviz_pca_biplot(pca_df_gdplog)
fviz_contrib(pca_df_gdplog,
choice = "var")
fviz_contrib(pca_df_gdplog,
choice = "ind")
fviz_screeplot(pca_df_gdplog)
df_gdplog_PC1234 <- cbind(df_gdplog, pca_df_gdplog$x) %>%
arrange(desc(PC1))
View(df_gdplog_PC1234)
df_PC12 <- as.data.frame(pca_df_gdplog$x)
df_PC12 <- df_PC12[,1:2]
View(df_PC12)
# Kmeans sobre el PCA
NbClust(df_PC12,
distance = "euclidean",
method = "kmeans")
kmean1_df_PC12 <- kmeans(df_PC12,
centers = 3,
iter.max = 50) #creamos objeto de kmeans con la df principal
fviz_cluster(kmean1_df_PC12,
data = df_PC12)
## Segundo kmeans sobre PC12
df_K1C1 <- cbind(df_PC12,
as.data.frame(kmean1_df_PC12$cluster))
colnames(df_K1C1)[3] = "K1C1"
df_K1C1 <- df_K1C1 %>%
filter(K1C1==3)
df_K1C1 <- df_K1C1[,-3]
View(df_K1C1)
#----
NbClust(df_K1C1,
distance = "euclidean",
method = "kmeans")
kmean2_df_PC12 <- kmeans(df_K1C1,
centers = 5,
iter.max = 50)
fviz_cluster(kmean2_df_PC12,
data = df_K1C1)
kmean2_df_PC12 <- kmeans(df_K1C1,
centers = 2,
iter.max = 50)
fviz_cluster(kmean2_df_PC12,
data = df_K1C1)
## Tercer kmeans sobre PC12
df_k2C2 <- cbind(df_K1C1,
as.data.frame(kmean2_df_PC12$cluster))
colnames(df_k2C2)[3] = "K2C2"
df_k2C2 <- df_k2C2 %>%
filter(K2C2==2)
df_k2C2 <- df_k2C2[,-3]
View(df_K1C1)
#----
NbClust(df_k2C2,
distance = "euclidean",
method = "kmeans")
View(df_k2C2)
#----
NbClust(df_k2C2,
distance = "euclidean",
method = "kmeans")
kmean3_df_PC12 <- kmeans(df_k2C2,
centers = 2,
iter.max = 50)
fviz_cluster(kmean3_df_PC12,
data = df_k2C2)
df_k3C2 <- cbind(df_k2C2,
as.data.frame(kmean3_df_PC12$cluster))
colnames(df_k2C2)[3] = "K3C2"
colnames(df_k3C2)[3] = "K3C2"
df_k3C2 <- df_k3C2 %>%
filter(K3C2==2)
df_k3C2 <- df_k3C2[,-3]
View(df_k3C2)
df_k3C1 <- cbind(df_k2C2,
as.data.frame(kmean3_df_PC12$cluster))
colnames(df_k3C1)[3] = "K3C1"
df_k3C1 <- df_k3C1 %>%
filter(K3C1==1)
df_k3C1 <- df_k3C1[,-3]
View(df_k3C1)
library(tidyverse)
library(readxl)
library(textshape) #"Tools for Reshaping Text". Usado en columns_to_rownames
library(broom)
library(plotly)
library(scales)
library(caTools)
library(caret)
library(cluster)
library(factoextra) #Para graficar K-Means y PCA
library(psych) #Usado por su funsión de crar matices de correlaciones de colores
library(stats) #Para hacer el PCA
library(naniar) #Para limpiar las bases de datos
library(fBasics) #Analisis estadistico
library(PerformanceAnalytics)
library(statmod)
library(knitr)
library(stargazer)
library(kableExtra)
library(ggpubr)
library(ggdist)
library(ggExtra)
library(ggbeeswarm)
library(aTSA) #Raiz Unitaria
library(tseries) #Raiz Unitaria
library(QuantPsyc) #Pruba multivariada
library(ghyp) #Para hacer momentos estadisticos de la NIG
library(quantmod) #Para descargar datos
library(cramer) #Para la prueba de cramer
library(PortfolioAnalytics)
library(DEoptim)
library(tidyquant)
library(NbClust)
library(dendextend)
df <- read_excel("APLHA/ALPHA_1/ALPHA_1.1/1.1.1PCA_Codes/Criterios-Unificado (Datos para PCA).xlsx")
df <- df[,-6]
df_plot <- df #Data Frame para hacer gráficas descriptivas
df <- column_to_rownames(df, loc = 1)
df_gdplog_plot <- cbind(df_plot[,-5], log10(df$GDP))
colnames(df_gdplog_plot)[5] = "GDP"
df_gdplog <- column_to_rownames(df_gdplog_plot, loc = 1)
# Graficas descriptivas de las variables
df_gdplog_plot %>%
ggplot(aes(x=GDP))+
geom_histogram(bins=100)+
geom_label(data = df_gdplog_plot %>%
filter(GDP>13), aes(x=GDP,y=Country,
label=Country))
pca_df_gdplog <- prcomp(df_gdplog,
center = TRUE,
scale. = TRUE)
summary(pca_df_gdplog)
biplot(pca_df_gdplog)
fviz_pca_biplot(pca_df_gdplog)
fviz_contrib(pca_df_gdplog,
choice = "var")
fviz_contrib(pca_df_gdplog,
choice = "ind")
fviz_screeplot(pca_df_gdplog)
df_gdplog_PC1234 <- cbind(df_gdplog, pca_df_gdplog$x) %>%
arrange(desc(PC1))
View(df_gdplog_PC1234)
df_PC12 <- as.data.frame(pca_df_gdplog$x)
df_PC12 <- df_PC12[,1:2]
View(df_PC12)
hclust.out <- hclust(dist(df_PC12))
summary(hclust.out)
hc.out.dend <- as.dendrogram(hclust.out)
fviz_dend(hclust.out,
repel = TRUE,
rect = TRUE,
color_labels_by_k = TRUE)
plot(hc.out.dend)+
abline(h=1.4, col = "red")
branch.height <- get_branches_heights(hc.out.dend,
sort = FALSE,
decreasing = FALSE,
include_leaves = FALSE)
branch.height <- as.data.frame(branch.height)
View(branch.height)
clusters <- cutree(hc.out, h = 1.4)
ch <- as.data.frame(clusters)
clusters <- cutree(hclust.out, h = 1.4)
ch <- as.data.frame(clusters)
View(ch)
clusters <- as.data.frame(clusters)
df_GDPlog_PC1234_hk_km <- cbind(df_gdplog_PC1234, clusters)
View(df_GDPlog_PC1234_hk_km)
View(kmean1_df_PC12)
kmean1_df_PC12 <- kmeans(df_PC12,
centers = 3,
iter.max = 50) #creamos objeto de kmeans con la df principal
View(kmean1_df_PC12)
df_GDPlog_PC1234_hk_km <- cbind(df_GDPlog_PC1234_hk_km,
as.data.frame(kmean1_df_PC12[["cluster"]]))
colnames(df_GDPlog_PC1234_hk_km)[9] <- "HC_h1.4"
colnames(df_GDPlog_PC1234_hk_km)[10] <- "KM_1"
Vie(df)
View(df)
df_plot <- cbind(df_plot[,-5], log10(df$GDP))
colnames(df_plot)[5] = "GDP"
df <- column_to_rownames(df_gdplog_plot, loc = 1)
df <- column_to_rownames(df_plot,
loc = 1)
# Graficas descriptivas de las variables
df_plot %>%
ggplot(aes(x=GDP))+
geom_histogram(bins=100)+
geom_label(data = df_gdplog_plot %>%
filter(GDP>13), aes(x=GDP,y=Country,
label=Country))
df <- read_excel("APLHA/ALPHA_1/ALPHA_1.1/1.1.1PCA_Codes/Criterios-Unificado (Datos para PCA).xlsx")
df <- df[,-6]
df_plot <- df #Data Frame para hacer gráficas descriptivas
df <- column_to_rownames(df, loc = 1)
df_plot <- cbind(df_plot[,-5], log10(df$GDP))
colnames(df_plot)[5] = "GDP"
df <- column_to_rownames(df_plot,
loc = 1)
# PCA con df_gdplog
pca_df <- prcomp(df,
center = TRUE,
scale. = TRUE)
summary(pca_df)
biplot(pca_df)
fviz_pca_biplot(pca_df)
fviz_contrib(pca_df,
choice = "var")
fviz_contrib(pca_df,
choice = "ind")
fviz_screeplot(pca_df)
df_PC1234 <- cbind(df, pca_df$x) %>%
arrange(desc(PC1)) %>%
View()
df_PC12 <- as.data.frame(pca_df$x)
df_PC12 <- df_PC12[,1:2]
View(df_PC12)
View(df_PC1234)
class(df_PC1234)
df_PC1234 <- cbind(df, as.data.frame(pca_df$x)) %>%
arrange(desc(PC1))
View(df_PC1234)
df_PC12 <- as.data.frame(pca_df$x)
df_PC12 <- df_PC12[,1:2]
View(df_PC12)
df <- read_excel("APLHA/ALPHA_1/ALPHA_1.1/1.1.1PCA_Codes/Criterios-Unificado (Datos para PCA).xlsx")
df <- df[,-6]
df_plot <- df #Data Frame para hacer gráficas descriptivas
df <- column_to_rownames(df, loc = 1)
df_plot <- cbind(df_plot[,-5], log10(df$GDP))
colnames(df_plot)[5] = "GDP"
df <- column_to_rownames(df_plot,
loc = 1)
hclust.out <- hclust(dist(df_PC12))
pca_df <- prcomp(df,
center = TRUE,
scale. = TRUE)
summary(pca_df)
biplot(pca_df)
fviz_pca_biplot(pca_df)
fviz_contrib(pca_df,
choice = "var")
fviz_contrib(pca_df,
choice = "ind")
fviz_screeplot(pca_df)
df_PC1234 <- cbind(df,
as.data.frame(pca_df$x)) %>%
arrange(desc(PC1))
View(df_PC1234)
df_PC12 <- as.data.frame(pca_df$x)
df_PC12 <- df_PC12[,1:2]
View(df_PC12)
hclust.out <- hclust(dist(df_PC12))
summary(hclust.out)
fviz_dend(hclust.out,
repel = TRUE,
rect = TRUE,
color_labels_by_k = TRUE)
branch.height <- get_branches_heights(hclust.out,
sort = FALSE,
decreasing = FALSE,
include_leaves = FALSE)
hc.out.dend
hc.out.dend <- as.dendrogram(hclust.out) # Solo para hacer otra forma del dendrograma
plot(hc.out.dend)+
abline(h=1.4, col = "red")
branch.height <- get_branches_heights(hc.out.dend,
sort = FALSE,
decreasing = FALSE,
include_leaves = FALSE)
branch.height <- as.data.frame(branch.height)
HC_clusters <- cutree(hclust.out, h = 1.4)
HC_clusters <- as.data.frame(clusters)
HC_clusters <- as.data.frame(HC_clusters)
fviz_dend(hclust.out,
repel = TRUE)
plot(hc.out.dend)+
abline(h=1.4, col = "red")
