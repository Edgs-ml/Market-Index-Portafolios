method = "gap_stat",
k.max = 30,
print.summary=TRUE)
k_map <- kmeans(coordinates_map, 4)
fviz_cluster(k_map,
data = coordinates_map)
#List of countries by cluster
k_map_df <- as.data.frame(k_map$cluster)
k_map1 <- k_map_df %>%
arrange(`k_map$cluster`) %>%
subset(`k_map$cluster`==2)
View(k_map1)
k_map <- kmeans(coordinates_map, 4)
fviz_cluster(k_map,
data = coordinates_map)
#List of countries by cluster
k_map_df <- as.data.frame(k_map$cluster)
k_map1 <- k_map_df %>%
arrange(`k_map$cluster`) %>%
subset(`k_map$cluster`==2)
View(k_map1)
k_map_clusters3 <- cbind(coordinates_map,
cluster = k_map_df$`k_map$cluster`) %>%
subset(cluster==2)
k_map_clusters3 <- k_map_clusters3[,-3]
fviz_nbclust(k_map_clusters3,
kmeans,
method = "wss",
k.max = 24)
fviz_nbclust(k_map_clusters3,
kmeans,
method = "gap_stat",
k.max = 24,
print.summary=TRUE)
k_map2 <- kmeans(k_map_clusters3, 2)
fviz_cluster(k_map2,
data = k_map_clusters3)
#List of countries by cluster
k_map_df2 <- as.data.frame(k_map2$cluster)
k_map2 <- k_map_df2 %>%
arrange(`k_map2$cluster`) %>%
subset(`k_map2$cluster`==1)
#---
k_map3 <- k_map_df2 %>%
arrange(`k_map2$cluster`) %>%
subset(`k_map2$cluster`==2)
View(k_map2)
View(k_map3)
library(tidyverse)
library(readxl)
library(textshape) #"Tools for Reshaping Text". Usado en columns_to_rownames
library(broom)
library(plotly)
library(scales)
library(caTools)
library(caret)
library(cluster)
library(factoextra) #Para graficar K-Means y PCA
library(psych) #Usado por su funsión de crar matices de correlaciones de colores
library(stats) #Para hacer el PCA
library(naniar) #Para limpiar las bases de datos
library(fBasics) #Analisis estadistico
library(PerformanceAnalytics)
library(statmod)
library(knitr)
library(stargazer)
library(kableExtra)
library(ggpubr)
library(ggdist)
library(ggExtra)
library(ggbeeswarm)
library(aTSA) #Raiz Unitaria
library(tseries) #Raiz Unitaria
library(QuantPsyc) #Pruba multivariada
library(ghyp) #Para hacer momentos estadisticos de la NIG
library(quantmod) #Para descargar datos
library(cramer) #Para la prueba de cramer
library(PortfolioAnalytics)
library(DEoptim)
library(tidyquant)
df <- read_excel("APLHA/ALPHA_1/ALPHA_1.1/1.1.1PCA_Codes/Criterios-Unificado (Datos para PCA).xlsx")
#df: Data Frame with all variables and observations
df <- column_to_rownames(df, loc = 1)
#df1: Data frame without GDP and with all the countries
df1 <- df[,-4]
kable(head(df)) #Tabla de los primero paises en Latex
kable(head(df1))
tabledf <- describe(df)
kable(tabledf, format = "latex") %>%
kable_styling(latex_options = "scale_down", font_size = 5)
tabledf1 <- describe(df1)
kable(tabledf1, format = "latex") %>%
kable_styling(latex_options = "scale_down", font_size = 5)
kable(tabledf,
caption = "Descripción Estadistica de los índicadores")
library(tidyverse)
library(readxl)
library(textshape) #"Tools for Reshaping Text". Usado en columns_to_rownames
library(broom)
library(plotly)
library(scales)
library(caTools)
library(caret)
library(cluster)
library(factoextra) #Para graficar K-Means y PCA
library(psych) #Usado por su funsión de crar matices de correlaciones de colores
library(stats) #Para hacer el PCA
library(naniar) #Para limpiar las bases de datos
library(fBasics) #Analisis estadistico
library(PerformanceAnalytics)
library(statmod)
library(knitr)
library(stargazer)
library(kableExtra)
library(ggpubr)
library(ggdist)
library(ggExtra)
library(ggbeeswarm)
library(aTSA) #Raiz Unitaria
library(tseries) #Raiz Unitaria
library(QuantPsyc) #Pruba multivariada
library(ghyp) #Para hacer momentos estadisticos de la NIG
library(quantmod) #Para descargar datos
library(cramer) #Para la prueba de cramer
library(PortfolioAnalytics)
library(DEoptim)
library(tidyquant)
df <- read_excel("APLHA/ALPHA_1/ALPHA_1.1/1.1.1PCA_Codes/Criterios-Unificado (Datos para PCA).xlsx")
#df: Data Frame with all variables and observations
df <- column_to_rownames(df, loc = 1)
#df1: Data frame without GDP and with all the countries
df1 <- df[,-4]
kable(head(df)) #Tabla de los primero paises en Latex
kable(head(df1))
tabledf <- describe(df)
kable(tabledf, format = "latex") %>%
kable_styling(latex_options = "scale_down", font_size = 5)
tabledf1 <- describe(df1)
kable(tabledf1, format = "latex") %>%
kable_styling(latex_options = "scale_down", font_size = 5)
kable(tabledf,
caption = "Descripción Estadistica de los índicadores")
pca_df <- prcomp(df, scale. = TRUE)
cor.plot(df, main = "Correlación de GCI, ECI, EDBI, y GDP")
View(df)
View(df1)
df <- read_excel("APLHA/ALPHA_1/ALPHA_1.1/1.1.1PCA_Codes/Criterios-Unificado (Datos para PCA).xlsx")
#df: Data Frame with all variables and observations
df <- column_to_rownames(df, loc = 1)
df <- df[,-5]
df1 <- df[,-4]
bxp_gdp <- df_plot %>%
ggplot(aes(x=GDP, y=0))+
geom_boxplot()+
geom_quasirandom()+
geom_label(data=df_plot %>%
filter(GDP>1.0e+13), aes(label=Country))
#vio_gdp <- df_plot %>%
#  ggplot(aes(x=GDP, y=GCI))+
#  geom_violin()+
#  geom_label(data=df_plot %>%
#               filter(GDP>1.0e+13), aes(label=Country))
hist_gdp <- df_plot %>%
ggplot(aes(x=GDP))+
geom_histogram(bins=100)+
geom_label(data = df_plot %>%
filter(GDP>1.0e+13), aes(x=GDP,y=Country,
label=Country))
#stat_desc_gdp <- kable(describe(df_plot$GDP), )
ggarrange(bxp_gdp, hist_gdp,
labels = c("Boxplot", "Histogram"),
ncol = 2,
nrow = 1)
cor.plot(df, main = "Correlación de GCI, ECI, EDBI, y GDP")
cor.plot(df1, main = "Correlación de GCI, ECI, y EDBI")
pca_df <- prcomp(df, scale. = TRUE)
summary(pca_df)
pca_df1 <- prcomp(df1, scale. = TRUE)
pca_df1 <- prcomp(df1, scale. = TRUE)
summary(pca_df1)
#Gráfica de individuos y variables.
Biplot_fvis_df <- fviz_pca_biplot(pca_df)
Biplot_fvis_df1 <- fviz_pca_biplot(pca_df1)
#Contribución de varianza de variables y de Componentes Principales
Contrib_var_fvis_df <- fviz_contrib(pca_df, choice = "var",
title = "Porcentaje de Varianza Contribuida con GDP y todas las Observaciones",
addlabels = TRUE)
Contrib_var_fvis_df1 <- fviz_contrib(pca_df1, choice = "var",
title = "Percentage of Variance contribution Without Variable GDP",
addlabels = TRUE)
# Porcentaje de varianza explicada por cada Componente Principal
Porcen_var_fvis_df <- fviz_screeplot(pca_df,
title = "4 Principal Components With USA & China",
addlabels = TRUE)
Porcen_var_fvis_df1 <- fviz_screeplot(pca_df1,
title = "3 Principal Components Without GDP",
addlabels = TRUE) # Porcentaje de la varianza explicada con el PCA1
#PCA DF
ggarrange(Contrib_var_fvis_df, Porcen_var_fvis_df, Biplot_fvis_df,
ncol = 2,
nrow = 2)
#,labels = c("Porcentaje de Varianza Contribuida con GDP y todas las Observaciones",
#                     "4 Componentes Principales con Estados Unidos y China",
#                     "Valor de Explicación del Componente Principal como Vector")
#PCA DF1
ggarrange(Contrib_var_fvis_df1, Porcen_var_fvis_df1, Biplot_fvis_df1,
ncol = 2,
nrow = 2)
pca_df <- prcomp(df, scale. = TRUE)
pca_df1 <- prcomp(df1, scale. = TRUE)
summary(pca_df)
summary(pca_df1)
df_PC1234 <- cbind(df, pca_df$x)
df_PC1234_Descent <- df_PC1234 %>%
arrange(desc(PC1))
#Crear una nueva data frame con los 3 Componentes principales como variables y ordenarlos de forma descendiente por el PC1
df1_PC123 <- cbind(df1, pca_df1$x)
df1_PC123_Descent <- df1_PC123 %>%
arrange(desc(PC1))
kable(head(df_PC1234_Descent, 5),
format = "latex")
kable(head(df1_PC123_Descent, 5),
format = "latex")
fviz_pca_ind(pca_df,
repel = FALSE,
title = "Lugar de Países dentro de los Componentes Principales 1 y 2 [con GDP]")
fviz_pca_ind(pca_df1,
repel = TRUE,
title = "Place of each country in a PC1 and PC2 Map [Without GDP]")
pca_df <- prcomp(df, center = TRUE, scale. = TRUE)
pca_df1 <- prcomp(df1, center = TRUE, scale. = TRUE)
summary(pca_df)
summary(pca_df1)
df_PC1234 <- cbind(df, pca_df$x)
df_PC1234_Descent <- df_PC1234 %>%
arrange(desc(PC1))
#Crear una nueva data frame con los 3 Componentes principales como variables y ordenarlos de forma descendiente por el PC1
df1_PC123 <- cbind(df1, pca_df1$x)
df1_PC123_Descent <- df1_PC123 %>%
arrange(desc(PC1))
kable(head(df_PC1234_Descent, 5),
format = "latex")
kable(head(df1_PC123_Descent, 5),
format = "latex")
fviz_pca_ind(pca_df,
repel = FALSE,
title = "Lugar de Países dentro de los Componentes Principales 1 y 2 [con GDP]")
fviz_pca_ind(pca_df1,
repel = TRUE,
title = "Place of each country in a PC1 and PC2 Map [Without GDP]")
biplot(pca_df)
fviz_pca_ind(pca_df,
repel = FALSE,
title = "Lugar de Países dentro de los Componentes Principales 1 y 2 [con GDP]")
fviz_pca_ind(pca_df1,
repel = TRUE,
title = "Place of each country in a PC1 and PC2 Map [Without GDP]")
cor.plot(df_PC1234)
cor.plot(df1_PC123)
# A partir del mapa hecho del PC1 y PC2 creamos un objeto para facilitar la extracción de
# sus valores
map <- fviz_pca_ind(pca_df1,
repel = TRUE,
title=NULL)
#map Es opcional ver el resultado
# Creamos un Data Frame para luego poder usar sus valores para el Kmeans
names_map <- as.data.frame(map[["data"]][["name"]])
y_map <- as.data.frame(map[["data"]][["y"]])
x_map <- as.data.frame(map[["data"]][["x"]])
coordinates_map <- cbind(names_map, x_map, y_map)
colnames(coordinates_map) <- c("Country", "x","y")
row.names(coordinates_map) <- coordinates_map$Country
coordinates_map <- coordinates_map[,-1]
coordinates_map %>%
ggplot(aes(x=x, y=y))+
geom_point()+
geom_text(aes(label=names_map$`map[["data"]][["name"]]`))
library(httr)
library(jsonlite)
# API endpoint for Global Competitiveness Index data
url <- "https://api.imd.org/GCI/DownloadHistoricalData"
# Set request parameters
params <- list(
indicator = "GCI",
report = "HISTORICAL",
year = 2020,  # Replace with the desired year
fileType = "XLSX"
)
# Send GET request to the API
response <- GET(url, query = params)
# Check if the request was successful
if (status_code(response) == 200) {
# Specify the path to save the downloaded file
file_path <- "GlobalCompetitivenessIndex.xlsx"  # Replace with desired file name and extension
# Save the response content to a file
content(response, as = "raw") %>%
writeBin(file_path)
# Load the downloaded file into a data frame
data <- read.xlsx(file_path, sheet = 1)  # Assumes data is on the first sheet
# Print the first few rows of the data frame
head(data)
} else {
# If the request was not successful, print the error message
print(paste("Error:", status_code(response)))
}
View(response)
# Send GET request to the API
response <- GET(url, query = params)
# Set request parameters
params <- list(
indicator = "GCI",
report = "HISTORICAL",
year = 2020,  # Replace with the desired year
fileType = "XLSX"
)
# Send GET request to the API
response <- GET(url, query = params)
df_PC1234 <- cbind(df, pca_df$x) %>%
arrange(desc(PC1))
df1_PC123 <- cbind(df1, pca_df1$x) %>%
arrange(desc(PC1))
pca_df <- prcomp(df,
center = TRUE,
scale. = TRUE)
pca_df1 <- prcomp(df1,
center = TRUE,
scale. = TRUE)
summary(pca_df)
summary(pca_df1)
#Crear una nueva data frame con los 3 Componentes principales como variables y ordenarlos de forma descendiente por el PC1
df_PC1234 <- cbind(df, pca_df$x) %>%
arrange(desc(PC1))
df1_PC123 <- cbind(df1, pca_df1$x) %>%
arrange(desc(PC1))
fviz_pca_ind(pca_df,
repel = FALSE,
title = "Lugar de Países dentro de los Componentes Principales 1 y 2 [con GDP]")
fviz_pca_ind(pca_df1,
repel = TRUE,
title = "Place of each country in a PC1 and PC2 Map [Without GDP]")
fviz_pca_ind(pca_df,
repel = FALSE,
title = "Lugar de Países dentro de los Componentes Principales 1 y 2 [con GDP]")
fviz_pca_ind(pca_df1,
repel = FALSE,
title = "Place of each country in a PC1 and PC2 Map [Without GDP]")
View(pca_df)
pca_df$clusters
#Gráfica de individuos y variables.
Biplot_fvis_df <- fviz_pca_biplot(pca_df)
Biplot_fvis_df1 <- fviz_pca_biplot(pca_df1)
#Contribución de varianza de variables y de Componentes Principales
Contrib_var_fvis_df <- fviz_contrib(pca_df, choice = "var",
title = "Porcentaje de Varianza Contribuida con GDP y todas las Observaciones",
addlabels = TRUE)
Contrib_var_fvis_df1 <- fviz_contrib(pca_df1, choice = "var",
title = "Percentage of Variance contribution Without Variable GDP",
addlabels = TRUE)
# Porcentaje de varianza explicada por cada Componente Principal
Porcen_var_fvis_df <- fviz_screeplot(pca_df,
title = "4 Principal Components With USA & China",
addlabels = TRUE)
Porcen_var_fvis_df1 <- fviz_screeplot(pca_df1,
title = "3 Principal Components Without GDP",
addlabels = TRUE) # Porcentaje de la varianza explicada con el PCA1
#PCA DF
ggarrange(Contrib_var_fvis_df, Porcen_var_fvis_df, Biplot_fvis_df,
ncol = 2,
nrow = 2)
#,labels = c("Porcentaje de Varianza Contribuida con GDP y todas las Observaciones",
#                     "4 Componentes Principales con Estados Unidos y China",
#                     "Valor de Explicación del Componente Principal como Vector")
#PCA DF1
ggarrange(Contrib_var_fvis_df1, Porcen_var_fvis_df1, Biplot_fvis_df1,
ncol = 2,
nrow = 2)
View(df_PC1234)
cor.plot(df_PC1234)
cor.plot(df1_PC123)
# A partir del mapa hecho del PC1 y PC2 creamos un objeto para facilitar la extracción de
# sus valores
map <- fviz_pca_ind(pca_df1,
repel = TRUE,
title=NULL)
#map Es opcional ver el resultado
# Creamos un Data Frame para luego poder usar sus valores para el Kmeans
names_map <- as.data.frame(map[["data"]][["name"]])
y_map <- as.data.frame(map[["data"]][["y"]])
x_map <- as.data.frame(map[["data"]][["x"]])
coordinates_map <- cbind(names_map, x_map, y_map)
colnames(coordinates_map) <- c("Country", "x","y")
row.names(coordinates_map) <- coordinates_map$Country
coordinates_map <- coordinates_map[,-1]
coordinates_map %>%
ggplot(aes(x=x, y=y))+
geom_point()+
geom_text(aes(label=names_map$`map[["data"]][["name"]]`))
k_map <- kmeans(coordinates_map, 4)
fviz_cluster(k_map,
data = coordinates_map)
#List of countries by cluster
k_map_df <- as.data.frame(k_map$cluster)
k_map1 <- k_map_df %>%
arrange(`k_map$cluster`) %>%
subset(`k_map$cluster`==2)
View(k_map1)
k_map <- kmeans(coordinates_map, 4)
fviz_cluster(k_map,
data = coordinates_map)
k_map <- kmeans(coordinates_map, 5)
fviz_cluster(k_map,
data = coordinates_map)
k_map_df <- as.data.frame(k_map$cluster)
k_map_df <- as.data.frame(k_map$cluster)%>%
arrange(`k_map$cluster`) %>%
subset(`k_map$cluster`==2)
View(k_map_df)
fviz_cluster(k_map,
data = coordinates_map)
k_map <- kmeans(coordinates_map, 5)
fviz_cluster(k_map,
data = coordinates_map)
#List of countries by cluster
k_map_df <- as.data.frame(k_map$cluster)%>%
arrange(`k_map$cluster`) %>%
subset(`k_map$cluster`==3)
View(k_map_df)
k_map_clusters3 <- cbind(coordinates_map,
cluster = k_map_df$`k_map$cluster`) %>%
subset(cluster==3)
k_map_clusters3 <- cbind(coordinates_map,
cluster = k_map_df$`k_map$cluster`)
View(coordinates_map)
k_map <- kmeans(coordinates_map, 5)
fviz_cluster(k_map,
data = coordinates_map)
#List of countries by cluster
k_map_df <- as.data.frame(k_map$cluster)%>%
arrange(`k_map$cluster`)
k_map_df_C3 <- k_map_df  %>%
subset(`k_map$cluster`==3)
View(k_map_df)
View(k_map_df_C3)
k_map <- kmeans(coordinates_map, 5)
fviz_cluster(k_map,
data = coordinates_map)
k_map_df <- as.data.frame(k_map$cluster) %>%
arrange(`k_map$cluster`)
View(k_map_df)
k_map_df_C3 <- k_map_df  %>%
subset(`k_map$cluster`==3)
View(k_map_df_C3)
fviz_cluster(k_map,
data = coordinates_map)
k_map_df_C2 <- k_map_df  %>%
subset(`k_map$cluster`==2)
View(k_map_df_C2)
fviz_cluster(k_map,
data = coordinates_map)
k_map_clusters3 <- cbind(coordinates_map,
cluster = k_map_df$`k_map$cluster`)
View(k_map_clusters3)
k_map <- kmeans(coordinates_map, 5)
fviz_cluster(k_map,
data = coordinates_map)
k_map_df <- as.data.frame(k_map$cluster)
View(k_map_df)
k_map_df_C1 <- k_map_df  %>%
subset(`k_map$cluster`==1)
View(k_map_df_C1)
fviz_cluster(k_map,
data = coordinates_map)
k_map_clusters3 <- cbind(coordinates_map,
cluster = k_map_df$`k_map$cluster`) %>%
subset(cluster==1)
View(k_map_clusters3)
k_map_clusters3 <- k_map_clusters3[,-3]
fviz_nbclust(k_map_clusters3,
kmeans,
method = "wss",
k.max = 24)
fviz_nbclust(k_map_clusters3,
kmeans,
method = "gap_stat",
k.max = 24,
print.summary=TRUE)
k_map2 <- kmeans(k_map_clusters3, 2)
fviz_cluster(k_map2,
data = k_map_clusters3)
k_map_df2 <- as.data.frame(k_map2$cluster)
View(k_map_df2)
k_map_clusters3.1 <- cbind(k_map_clusters3, k_map_df2$`k_map2$cluster`)
View(k_map_clusters3.1)
fviz_cluster(k_map2,
data = k_map_clusters3)
k_map_clusters3.1 <- cbind(k_map_clusters3, k_map_df2$`k_map2$cluster`) %>%
subset(`k_map_df2$\`k_map2$cluster\``==2)
k_map_clusters3.1 <- k_map_clusters3.1[,-3]
fviz_cluster(k_map2,
data = k_map_clusters3)
k_mapUltimos <- kmeans(k_map_clusters3.1, 2)
fviz_cluster(k_mapUltimos,
data = k_map_clusters3.1)
k_mapUltimos <- kmeans(k_map_clusters3.1, 3)
fviz_cluster(k_mapUltimos,
data = k_map_clusters3.1)
k_mapUltimos <- kmeans(k_map_clusters3.1, 2)
fviz_cluster(k_mapUltimos,
data = k_map_clusters3.1)
k_map2 <- kmeans(k_map_clusters3, 3)
fviz_cluster(k_map2,
data = k_map_clusters3)
