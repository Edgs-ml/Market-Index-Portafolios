class(indices)
indices <- as.xts(indices)
# Indices
indices <- read_excel("Indices_km.xlsx",
sheet = "Hoja1",
col_types = c("date",
"numeric", "numeric", "numeric", "numeric", "numeric",
"numeric", "numeric", "numeric", "numeric", "numeric",
"numeric", "numeric", "numeric", "numeric", "numeric",
"numeric", "numeric", "numeric", "numeric"))
names(indices)[names(indices) == '...1'] <- 'Date'
indices <- indices[-1,]
indices <- na.omit(indices)
View(indices)
class(indices)
indices <- column_to_rownames(indices, loc = 1)
indices <- round(indices, digits = 2)
indices <- as.xts(indices)
indices <- rename(indices, United States = USA)
# Creación de las Data Frames
df <- read_excel("APLHA/ALPHA_1/ALPHA_1.1/1.1.1PCA_Codes/Criterios-Unificado (Datos para PCA).xlsx")
df <- df[,-6]
df_plot <- df #Data Frame para hacer gráficas descriptivas
df <- column_to_rownames(df, loc = 1)
df_plot <- cbind(df_plot[,-5], log10(df$GDP))
colnames(df_plot)[5] = "GDP"
df <- column_to_rownames(df_plot,
loc = 1)
# Graficas descriptivas de las variables
df_plot %>%
ggplot(aes(x=GDP))+
geom_histogram(bins=100)+
geom_label(data = df_plot %>%
filter(GDP>13), aes(x=GDP,y=Country,
label=Country))
View(df_plot)
new_names <- c("United States", "Australia", "India", "Italy", "Mexico",
"Russian Federation", "Saudi Arabia", "Spain", "Canada", "China",
"France", "Germany","Japan", "Korea, Rep", "Netherlands",
"Switzerland", "United Kingdom", "Brazil", "South Africa")
colnames(indices) <- new_names
View(indices)
class(indices)
View(indices)
Equity1 <- c("^AXJO", "^ATX","^BFX","^GSPTSE","000001.SS", "^OMXT", "^OMXH25", "^FCHI",
"^FCHI", "^GDAXI", "^ISEQ", "TA35.TA", "^N225", "FBMEMAS.FGI", "^AEX", "^IBEX",
"^SSMI", "DUAE.L")
getSymbols(Equity1, from=as.Date("2018-01-01"), to=Sys.Date())
Equity1_ad <- NULL
for(i in Equity1){
assign(paste0("Ad_",i), Ad(get(i)))
Equity1_ad <- c(Equity1_ad, paste0("Ad_",i))
}
class(Equity1)
class(Equity2_Portfolio)
Serie_de_datos_el_bueno_ <- read_excel("~/Documents/GitHub/Market-Index-Portafolios/iNDICES.xlsx",
col_types = c("date", "numeric", "numeric",
"numeric", "numeric", "numeric", "numeric", "numeric"))
g1 <- Serie_de_datos_el_bueno_
colnames(g1)<-c("Fecha", "SP", "OMX30","HSI","STI","DJI","KOSPI", "DAX")
g1<-textshape::column_to_rownames(g1,loc=1)
g1 <- drop_na(g1)
retornos <- Return.calculate(g1,
method = "log")[-1,]
View(retornos)
class(retornos)
#-----Portafolios
Indices_Returns <- Return.calculate(indices)[-1,]
View(Indices_Returns)
library(tidyverse)
library(readxl)
library(textshape) #"Tools for Reshaping Text". Usado en columns_to_rownames
library(broom)
library(plotly)
library(scales)
library(caTools)
library(caret)
library(cluster)
library(factoextra) #Para graficar K-Means y PCA
library(psych) #Usado por su funsión de crar matices de correlaciones de colores
library(stats) #Para hacer el PCA
library(naniar) #Para limpiar las bases de datos
library(fBasics) #Analisis estadistico
library(PerformanceAnalytics)
library(statmod)
library(knitr)
library(stargazer)
library(kableExtra)
library(ggpubr)
library(ggdist)
library(ggExtra)
library(ggbeeswarm)
library(aTSA) #Raiz Unitaria
library(tseries) #Raiz Unitaria
library(QuantPsyc) #Pruba multivariada
library(ghyp) #Para hacer momentos estadisticos de la NIG
library(quantmod) #Para descargar datos
library(cramer) #Para la prueba de cramer
library(PortfolioAnalytics)
library(DEoptim)
library(tidyquant)
library(NbClust)
library(dendextend)
library(xts)
library(zoo)
# Creación de las Data Frames
df <- read_excel("APLHA/ALPHA_1/ALPHA_1.1/1.1.1PCA_Codes/Criterios-Unificado (Datos para PCA).xlsx")
df <- df[,-6]
df_plot <- df #Data Frame para hacer gráficas descriptivas
df <- column_to_rownames(df, loc = 1)
df_plot <- cbind(df_plot[,-5], log10(df$GDP))
colnames(df_plot)[5] = "GDP"
df <- column_to_rownames(df_plot,
loc = 1)
# PCA con df_gdplog
pca_df <- prcomp(df,
center = TRUE,
scale. = TRUE)
df_PC1234 <- cbind(df,
as.data.frame(pca_df$x)) %>%
arrange(desc(PC1))
12 <- as.data.frame(pca_df$x)
df_PC12 <- as.data.frame(pca_df$x)
df_PC12 <- df_PC12[,1:2]
kmean1_df_PC12 <- kmeans(df_PC12,
centers = 3,
iter.max = 50) #creamos objeto de kmeans con la df principal
## Segundo kmeans sobre PC12
df_K1C1 <- cbind(df_PC12,
as.data.frame(kmean1_df_PC12$cluster))
colnames(df_K1C1)[3] = "K1C1"
df_K1C1 <- df_K1C1 %>%
filter(K1C1==3)
df_K1C1 <- df_K1C1[,-3]
kmean2_df_PC12 <- kmeans(df_K1C1,
centers = 2,
iter.max = 50)
## Tercer kmeans sobre PC12
df_K2C2 <- cbind(df_K1C1,
as.data.frame(kmean2_df_PC12$cluster))
colnames(df_K2C2)[3] = "K2C2"
df_K2C2 <- df_K2C2 %>%
filter(K2C2==2)
df_K2C2 <- df_K2C2[,-3]
#----
kmean3_df_PC12 <- kmeans(df_K2C2,
centers = 2,
iter.max = 50)
df_K3C2 <- cbind(df_K2C2,
as.data.frame(kmean3_df_PC12$cluster))
colnames(df_K3C2)[3] = "K3C2"
df_K3C2 <- df_K3C2 %>%
filter(K3C2==2)
df_K3C2 <- df_K3C2[,-3]
df_K3C1 <- cbind(df_K2C2,
as.data.frame(kmean3_df_PC12$cluster))
colnames(df_K3C1)[3] = "K3C1"
df_K3C1 <- df_K3C1 %>%
filter(K3C1==1)
df_K3C1 <- df_K3C1[,-3]
# Indices
indices <- read_excel("Indices_km.xlsx",
sheet = "Hoja1",
col_types = c("date",
"numeric", "numeric", "numeric", "numeric", "numeric",
"numeric", "numeric", "numeric", "numeric", "numeric",
"numeric", "numeric", "numeric", "numeric", "numeric",
"numeric", "numeric", "numeric", "numeric"))
names(indices)[names(indices) == '...1'] <- 'Date'
indices <- indices[-1,]
indices <- na.omit(indices)
indices <- column_to_rownames(indices, loc = 1)
indices <- round(indices, digits = 2)
indices <- as.xts(indices)
new_names <- c("United States", "Australia", "India", "Italy", "Mexico",
"Russian Federation", "Saudi Arabia", "Spain", "Canada", "China",
"France", "Germany","Japan", "Korea, Rep", "Netherlands",
"Switzerland", "United Kingdom", "Brazil", "South Africa")
colnames(indices) <- new_names
View(kmean3_df_PC12)
View(df_K3C1)
View(df_K3C2)
View(df_K1C1)
View(df_PC1234)
View(df_K3C2)
View(df_PC12)
# Kmeans sobre el PCA
NbClust(df_PC12,
distance = "euclidean",
method = "kmeans")
kmean1_df_PC12 <- kmeans(df_PC12,
centers = 3,
iter.max = 50) #creamos objeto de kmeans con la df principal
fviz_cluster(kmean1_df_PC12,
data = df_PC12)
## Segundo kmeans sobre PC12
df_K1C1 <- cbind(df_PC12,
as.data.frame(kmean1_df_PC12$cluster))
colnames(df_K1C1)[3] = "K1C1"
df_K1C1 <- df_K1C1 %>%
filter(K1C1==3)
df_K1C1 <- df_K1C1[,-3]
View(df_K1C1)
#----
NbClust(df_K1C1,
distance = "euclidean",
method = "kmeans")
kmean2_df_PC12 <- kmeans(df_K1C1,
centers = 2,
iter.max = 50)
fviz_cluster(kmean2_df_PC12,
data = df_K1C1)
## Tercer kmeans sobre PC12
df_K2C2 <- cbind(df_K1C1,
as.data.frame(kmean2_df_PC12$cluster))
colnames(df_K2C2)[3] = "K2C2"
df_K2C2 <- df_K2C2 %>%
filter(K2C2==2)
df_K2C2 <- df_K2C2[,-3]
View(df_K2C2)
#----
kmean3_df_PC12 <- kmeans(df_K2C2,
centers = 2,
iter.max = 50)
fviz_cluster(kmean3_df_PC12,
data = df_K2C2)
df_K3C2 <- cbind(df_K2C2,
as.data.frame(kmean3_df_PC12$cluster))
colnames(df_K3C2)[3] = "K3C2"
df_K3C2 <- df_K3C2 %>%
filter(K3C2==2)
df_K3C2 <- df_K3C2[,-3]
View(df_K3C2)
df_K3C1 <- cbind(df_K2C2,
as.data.frame(kmean3_df_PC12$cluster))
colnames(df_K3C1)[3] = "K3C1"
df_K3C1 <- df_K3C1 %>%
filter(K3C1==1)
df_K3C1 <- df_K3C1[,-3]
View(df_K3C1)
## km 2
k2c2 <- rownames(df_K3C2)
## km1
k3c1 <- rownames(df_K3C1)
## km 2
k3c2 <- rownames(df_K3C2)
# Indices
indices <- read_excel("Indices_km.xlsx",
sheet = "Hoja1",
col_types = c("date",
"numeric", "numeric", "numeric", "numeric", "numeric",
"numeric", "numeric", "numeric", "numeric", "numeric",
"numeric", "numeric", "numeric", "numeric", "numeric",
"numeric", "numeric", "numeric", "numeric"))
names(indices)[names(indices) == '...1'] <- 'Date'
indices <- indices[-1,]
indices <- na.omit(indices)
indices <- column_to_rownames(indices, loc = 1)
indices <- round(indices, digits = 2)
indices <- as.xts(indices)
new_names <- c("United States", "Australia", "India", "Italy", "Mexico",
"Russian Federation", "Saudi Arabia", "Spain", "Canada", "China",
"France", "Germany","Japan", "Korea, Rep", "Netherlands",
"Switzerland", "United Kingdom", "Brazil", "South Africa")
colnames(indices) <- new_names
k3c1_matrrix <- indices[,k3c1]
k3c1_matrrix <- indices[,"k3c1"]
k3c1_matrrix <- indices[,rownames(indices)=="k3c1"]
View(k3c1_matrrix)
View(k3c1_matrrix)
# Indices
indices <- read_excel("Indices_km.xlsx",
sheet = "Hoja1",
col_types = c("date",
"numeric", "numeric", "numeric", "numeric", "numeric",
"numeric", "numeric", "numeric", "numeric", "numeric",
"numeric", "numeric", "numeric", "numeric", "numeric",
"numeric", "numeric", "numeric", "numeric"))
names(indices)[names(indices) == '...1'] <- 'Date'
indices <- indices[-1,]
indices <- na.omit(indices)
indices <- column_to_rownames(indices, loc = 1)
indices <- round(indices, digits = 2)
indices <- as.xts(indices)
new_names <- c("United States", "Australia", "India", "Italy", "Mexico",
"Russian Federation", "Saudi Arabia", "Spain", "Canada", "China",
"France", "Germany","Japan", "Korea, Rep", "Netherlands",
"Switzerland", "United Kingdom", "Brazil", "South Africa")
colnames(indices) <- new_names
View(indices)
## km1
k3c1 <- rownames(df_K3C1)
k3c1_matrix <- indices[,print(k3c1)]
## km1
k3c1 <- print(rownames(df_K3C1))
k3c1_matrix <- indices[,k3c1]
## km1
k3c1 <- as.vector(print(rownames(df_K3C1)))
k3c1_matrix <- indices[,k3c1]
k3c1_matrix <- indices[,c("Canada", "China",  "France", "Germany", "Japan",
"Korea, Rep", "Netherlands", "Switzerland",
"United Kindom", "United States")]
## BRICS
brics <- c("Brazil", "Russian Federation", "India", "China", "South Africa")
brics_matrix <- indices[,c("Brazil", "Russian Federation", "India",
"China", "South Africa")]
## km1
k3c1 <- c("Canada", "China",  "France", "Germany", "Japan",
"Korea, Rep", "Netherlands", "Switzerland",
"United Kindom", "United States")
k3c1_matrix <- indices[,c("Canada", "China",  "France", "Germany", "Japan",
"Korea, Rep", "Netherlands", "Switzerland",
"United Kindom", "United States")]
k3c1_matrix <- indices[,c("Canada", "China", "France", "Germany", "Japan",
"Korea, Rep", "Netherlands", "Switzerland",
"United Kindom", "United States")]
print(rownames(df_K3C2))
## km1
k3c1 <- c("Canada", "China",  "France", "Germany", "Japan","Korea, Rep",
"Netherlands", "Switzerland","United Kindom", "United States")
k3c1_matrix <- indices[,c("Canada", "China", "France", "Germany", "Japan",
"Korea, Rep", "Netherlands", "Switzerland",
"United Kindom", "United States")]
## km 2
k3c2 <- c("Asutralia", "India", "Italy", "Mexico", "Russian Federation",
"Saudi Arabia", "Spain")
k3c2_matrix <- indices[,c("Asutralia", "India", "Italy", "Mexico", "Russian Federation",
"Saudi Arabia", "Spain")]
k3c2_matrix <- indices[,"Asutralia"
k3c2_matrix <- indices[,"Asutralia"]
k3c2_matrix <- indices[,"Asutralia"]
class(indices)
plot(indices)
indices_scale <- scale(indices)
plot(indices_scale)
## km 2
k3c2 <- c("Australia", "India", "Italy", "Mexico", "Russian Federation",
"Saudi Arabia", "Spain")
k3c2_matrix <- indices[c("Australia", "India", "Italy", "Mexico", "Russian Federation",
"Saudi Arabia", "Spain")]
k3c2_matrix <- c(indices$Australia, indices$India)
View(k3c2_matrix)
brics_matrix <- indices[,c("Brazil", "Russian Federation", "India",
"China", "South Africa")]
View(brics_matrix)
k3c2_matrix <- indices[,c("Brazil", "Russian Federation", "India",
"China", "South Africa")]
k3c2_matrix <- indices[,c("Australia", "Russian Federation", "India",
"China", "South Africa")]
View(df_K3C2)
View(k3c2_matrix)
k3c2_matrix <- indices[,c("Australia", "Italy", "India",
"China", "South Africa")]
k3c2_matrix <- indices[,c("Australia", "Russian Federation", "India",
"Mexico", "Saudi Arabia", "Spain")]
k3c2_matrix <- indices[,c("Australia", "India", "Italy", "Russian Federation",
"Mexico", "Saudi Arabia", "Spain")]
k3c2_matrix <- indices[,c("Australia", "India", "Italy", "Mexico",
"Russian Federation", "Saudi Arabia", "Spain")]
k3c1_matrix <- indices[,c("Canada", "China", "France", "Germany",
"Japan", "Korea, Rep", "Netherlands",
"Switzerland","United Kindom", "United States")]
k3c1_matrix <- indices[,c("Canada", "China", "France", "Germany",
"Japan", "Korea, Rep", "Netherlands")]
k3c1_matrix <- indices[,c("Canada", "China", "France", "Germany",
"Japan", "Korea, Rep", "Netherlands", "Switzerland")]
k3c1_matrix <- indices[,c("Canada", "China", "France", "Germany",
"Japan", "Korea, Rep", "Netherlands", "Switzerland",
"United Kindom", "United States")]
k3c1_matrix <- indices[,c("Canada", "China", "France", "Germany",
"Japan", "Korea, Rep", "Netherlands", "Switzerland")]
k3c1_matrix <- indices[,c("Canada", "China", "France", "Germany",
"Japan", "Korea, Rep", "Netherlands", "Switzerland",
"United Kingdom")]
k3c1_matrix <- indices[,c("Canada", "China", "France", "Germany",
"Japan", "Korea, Rep", "Netherlands", "Switzerland",
"United Kingdom", "United States")]
## km1
k3c1 <- c("Canada", "China", "France", "Germany",
"Japan", "Korea, Rep", "Netherlands", "Switzerland",
"United Kingdom", "United States")
k3c1_matrix <- indices[,c("Canada", "China", "France", "Germany",
"Japan", "Korea, Rep", "Netherlands", "Switzerland",
"United Kingdom", "United States")]
View(k3c1_matrix)
k3c1_matrix_scaled <- scale(k3c1_matrix)
k3c2_matrix_scale <- scale(k3c2_matrix)
brics_matrix_scale <- scale(brics_matrix)
#-----Portafolios
brics_Specs_Portfolio <- portfolio.spec(brics)
##### Add Constraints #####
brics_Specs_Portfolio <- add.constraint(brics_Specs_Portfolio,
type="full_investment")
brics_Specs_Portfolio <- add.constraint(brics_Specs_Portfolio,
type="long_only")
##### Add Objective #####
brics_Specs_Portfolio <- add.objective(brics_Specs_Portfolio,
type="risk",
name="StdDev")
brics_Specs_Portfolio <- add.objective(brics_Specs_Portfolio,
type='return',
name='mean')
brics_Specs_Portfolio
brics_Optimum_Portfolio <- optimize.portfolio(brics_matrix,
brics_Specs_Portfolio)
k3c1_Specs_Portfolio <- portfolio.spec(k3c1)
#-----Portafolios
brics_Specs_Portfolio <- portfolio.spec(brics)
k3c1_Specs_Portfolio <- portfolio.spec(k3c1)
k3c2_Specs_Portfolio <- portfolio.spec(k3c2)
##### Add Constraints #####
brics_Specs_Portfolio <- add.constraint(brics_Specs_Portfolio,
type="full_investment")
brics_Specs_Portfolio <- add.constraint(brics_Specs_Portfolio,
type="long_only")
k3c1_Specs_Portfolio <- add.constraint(k3c1_Specs_Portfolio,
type="full_investment")
k3c1_Specs_Portfolio <- add.constraint(k3c1_Specs_Portfolio,
type="long_only")
k3c2_Specs_Portfolio <- add.constraint(k3c2_Specs_Portfolio,
type="full_investment")
k3c2_Specs_Portfolio <- add.constraint(k3c2_Specs_Portfolio,
type="long_only")
##### Add Objective #####
brics_Specs_Portfolio <- add.objective(brics_Specs_Portfolio,
type="risk",
name="StdDev")
brics_Specs_Portfolio <- add.objective(brics_Specs_Portfolio,
type='return',
name='mean')
brics_Specs_Portfolio
k3c1_Specs_Portfolio <- add.objective(k3c1_Specs_Portfolio,
type="risk",
name="StdDev")
k3c1_Specs_Portfolio <- add.objective(k3c1_Specs_Portfolio,
type='return',
name='mean')
k3c1_Specs_Portfolio
k3c2_Specs_Portfolio <- add.objective(k3c2_Specs_Portfolio,
type="risk",
name="StdDev")
k3c2_Specs_Portfolio <- add.objective(k3c2_Specs_Portfolio,
type='return',
name='mean')
k3c2_Specs_Portfolio
brics_Optimum_Portfolio <- optimize.portfolio(brics_matrix,
brics_Specs_Portfolio)
k3c1_Specs_Portfolio <- optimize.portfolio(k3c1_matrix,
k3c1_Specs_Portfolio)
k3c2_Specs_Portfolio <- optimize.portfolio(k3c2_matrix,
k3c2_Specs_Portfolio)
k3c1_Optimum_Portfolio <- optimize.portfolio(k3c1_matrix,
k3c1_Specs_Portfolio)
k3c2__Optimum_Portfolio <- optimize.portfolio(k3c2_matrix,
k3c2_Specs_Portfolio)
k3c2_Specs_Portfolio
k3c2_Optimum_Portfolio <- optimize.portfolio(k3c2_matrix,
k3c2_Specs_Portfolio)
View(brics_Optimum_Portfolio)
# nuevo objeto para los rendimientos del port
bricRendOptPort <- Return.portfolio(brics_matrix,
extractWeights(brics_Optimum_Portfolio))
View(bricRendOptPort)
plot(density(RendOptPort))
plot(density(bricRendOptPort))
#------- Pruebas estadisticas
Estg1 <- basicStats(indices)
Estg1
#------- Pruebas estadisticas
basic.stat.indices <- basicStats(indices)
basic.stats.k3c1 <- basicStats(k3c1_matrix)
View(basic.stats.k3c1)
basic.stats.k3c2 <- basicStats(k3c2_matrix)
basic.stats.brics <- basicStats(brics_matrix)
m <- mean(indices$`United States`)
sd <- sd(indices$`United States`)
len <- length(indices$`United States`)
basenormal <- dnorm(len,m,sd)
ks.test(indices$`United States`,
basenormal)
ks.test(indices$`United States`, basenormal)
ks.test(as.vector(indices$`United States`),
basenormal)
ks.test(as.vector(indices$Australia),
basenormal)
#Parametros de la NIG
NIG <- nigFit(indices$`United States`)
#Agrupar parametros en un objeto
a <- NIG@fit[["par"]]
a <- data.frame(t(a))
#NIG aleatoria con parametors univariados de nuestra serie
r = rnig(len,
alpha = a$alpha,
beta = a$beta,
delta = a$delta,
mu= a$mu)
plot(density(r),
col="black",
main="NIG Univariada",
sub="SP index")
#Pruba de Kormogorov univariada para NIG
ks.test(indices$`United States`, r)
#Pruba de Kormogorov univariada para NIG
ks.test(as.vector(indices$`United States`), r)
#Pruba de Kormogorov univariada para NIG
ks.test(as.vector(indices$Australia), r)
ks.function <- function(serie, base = basenormal){
vector.series <- as.vector(serie)
ks.test(vector.series, base)
}
lapply(k3c2_matrix, ks.function)
lapply(brics_matrix, ks.function)
